
tin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004af0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08004c90  08004c90  00014c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800502c  0800502c  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005034  08005034  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005034  08005034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005038  08005038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800503c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000908  20000220  0800525c  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b28  0800525c  00020b28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c655  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002237  00000000  00000000  0002c8a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008d0  00000000  00000000  0002eae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007c0  00000000  00000000  0002f3b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017b75  00000000  00000000  0002fb70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000097e4  00000000  00000000  000476e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087003  00000000  00000000  00050ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d7ecc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002edc  00000000  00000000  000d7f48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000220 	.word	0x20000220
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c78 	.word	0x08004c78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000224 	.word	0x20000224
 80001dc:	08004c78 	.word	0x08004c78

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <HAL_Init+0x40>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <HAL_Init+0x40>)
 80005ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <HAL_Init+0x40>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0a      	ldr	r2, [pc, #40]	; (80005f0 <HAL_Init+0x40>)
 80005c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <HAL_Init+0x40>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <HAL_Init+0x40>)
 80005d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d8:	2003      	movs	r0, #3
 80005da:	f000 f92b 	bl	8000834 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 f808 	bl	80005f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e4:	f002 fb94 	bl	8002d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023c00 	.word	0x40023c00

080005f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_InitTick+0x54>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <HAL_InitTick+0x58>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4619      	mov	r1, r3
 8000606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060a:	fbb3 f3f1 	udiv	r3, r3, r1
 800060e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f943 	bl	800089e <HAL_SYSTICK_Config>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
 8000620:	e00e      	b.n	8000640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b0f      	cmp	r3, #15
 8000626:	d80a      	bhi.n	800063e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000628:	2200      	movs	r2, #0
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	f04f 30ff 	mov.w	r0, #4294967295
 8000630:	f000 f90b 	bl	800084a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000634:	4a06      	ldr	r2, [pc, #24]	; (8000650 <HAL_InitTick+0x5c>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800063a:	2300      	movs	r3, #0
 800063c:	e000      	b.n	8000640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000004c 	.word	0x2000004c
 800064c:	20000004 	.word	0x20000004
 8000650:	20000000 	.word	0x20000000

08000654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_IncTick+0x20>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_IncTick+0x24>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4413      	add	r3, r2
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <HAL_IncTick+0x24>)
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000004 	.word	0x20000004
 8000678:	20000ae0 	.word	0x20000ae0

0800067c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return uwTick;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <HAL_GetTick+0x14>)
 8000682:	681b      	ldr	r3, [r3, #0]
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000ae0 	.word	0x20000ae0

08000694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f003 0307 	and.w	r3, r3, #7
 80006a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <__NVIC_SetPriorityGrouping+0x44>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006aa:	68ba      	ldr	r2, [r7, #8]
 80006ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b0:	4013      	ands	r3, r2
 80006b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006c6:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <__NVIC_SetPriorityGrouping+0x44>)
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	60d3      	str	r3, [r2, #12]
}
 80006cc:	bf00      	nop
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <__NVIC_GetPriorityGrouping+0x18>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	0a1b      	lsrs	r3, r3, #8
 80006e6:	f003 0307 	and.w	r3, r3, #7
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	2b00      	cmp	r3, #0
 8000708:	db0b      	blt.n	8000722 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	f003 021f 	and.w	r2, r3, #31
 8000710:	4907      	ldr	r1, [pc, #28]	; (8000730 <__NVIC_EnableIRQ+0x38>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	095b      	lsrs	r3, r3, #5
 8000718:	2001      	movs	r0, #1
 800071a:	fa00 f202 	lsl.w	r2, r0, r2
 800071e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000e100 	.word	0xe000e100

08000734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	6039      	str	r1, [r7, #0]
 800073e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000744:	2b00      	cmp	r3, #0
 8000746:	db0a      	blt.n	800075e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	b2da      	uxtb	r2, r3
 800074c:	490c      	ldr	r1, [pc, #48]	; (8000780 <__NVIC_SetPriority+0x4c>)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	0112      	lsls	r2, r2, #4
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	440b      	add	r3, r1
 8000758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800075c:	e00a      	b.n	8000774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4908      	ldr	r1, [pc, #32]	; (8000784 <__NVIC_SetPriority+0x50>)
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	f003 030f 	and.w	r3, r3, #15
 800076a:	3b04      	subs	r3, #4
 800076c:	0112      	lsls	r2, r2, #4
 800076e:	b2d2      	uxtb	r2, r2
 8000770:	440b      	add	r3, r1
 8000772:	761a      	strb	r2, [r3, #24]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000e100 	.word	0xe000e100
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000788:	b480      	push	{r7}
 800078a:	b089      	sub	sp, #36	; 0x24
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	f1c3 0307 	rsb	r3, r3, #7
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	bf28      	it	cs
 80007a6:	2304      	movcs	r3, #4
 80007a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3304      	adds	r3, #4
 80007ae:	2b06      	cmp	r3, #6
 80007b0:	d902      	bls.n	80007b8 <NVIC_EncodePriority+0x30>
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3b03      	subs	r3, #3
 80007b6:	e000      	b.n	80007ba <NVIC_EncodePriority+0x32>
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007bc:	f04f 32ff 	mov.w	r2, #4294967295
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	43da      	mvns	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	401a      	ands	r2, r3
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d0:	f04f 31ff 	mov.w	r1, #4294967295
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	fa01 f303 	lsl.w	r3, r1, r3
 80007da:	43d9      	mvns	r1, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	4313      	orrs	r3, r2
         );
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3724      	adds	r7, #36	; 0x24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
	...

080007f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000800:	d301      	bcc.n	8000806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000802:	2301      	movs	r3, #1
 8000804:	e00f      	b.n	8000826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <SysTick_Config+0x40>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3b01      	subs	r3, #1
 800080c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800080e:	210f      	movs	r1, #15
 8000810:	f04f 30ff 	mov.w	r0, #4294967295
 8000814:	f7ff ff8e 	bl	8000734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <SysTick_Config+0x40>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800081e:	4b04      	ldr	r3, [pc, #16]	; (8000830 <SysTick_Config+0x40>)
 8000820:	2207      	movs	r2, #7
 8000822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	e000e010 	.word	0xe000e010

08000834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ff29 	bl	8000694 <__NVIC_SetPriorityGrouping>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084a:	b580      	push	{r7, lr}
 800084c:	b086      	sub	sp, #24
 800084e:	af00      	add	r7, sp, #0
 8000850:	4603      	mov	r3, r0
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
 8000856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800085c:	f7ff ff3e 	bl	80006dc <__NVIC_GetPriorityGrouping>
 8000860:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	68b9      	ldr	r1, [r7, #8]
 8000866:	6978      	ldr	r0, [r7, #20]
 8000868:	f7ff ff8e 	bl	8000788 <NVIC_EncodePriority>
 800086c:	4602      	mov	r2, r0
 800086e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000872:	4611      	mov	r1, r2
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff5d 	bl	8000734 <__NVIC_SetPriority>
}
 800087a:	bf00      	nop
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	4603      	mov	r3, r0
 800088a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800088c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff31 	bl	80006f8 <__NVIC_EnableIRQ>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff ffa2 	bl	80007f0 <SysTick_Config>
 80008ac:	4603      	mov	r3, r0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d004      	beq.n	80008d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80008d0:	2301      	movs	r3, #1
 80008d2:	e00c      	b.n	80008ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2205      	movs	r2, #5
 80008d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f022 0201 	bic.w	r2, r2, #1
 80008ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
	...

080008fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b089      	sub	sp, #36	; 0x24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
 8000916:	e159      	b.n	8000bcc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000918:	2201      	movs	r2, #1
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	697a      	ldr	r2, [r7, #20]
 8000928:	4013      	ands	r3, r2
 800092a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	429a      	cmp	r2, r3
 8000932:	f040 8148 	bne.w	8000bc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d00b      	beq.n	8000956 <HAL_GPIO_Init+0x5a>
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	2b02      	cmp	r3, #2
 8000944:	d007      	beq.n	8000956 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800094a:	2b11      	cmp	r3, #17
 800094c:	d003      	beq.n	8000956 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	2b12      	cmp	r3, #18
 8000954:	d130      	bne.n	80009b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	2203      	movs	r2, #3
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43db      	mvns	r3, r3
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	4013      	ands	r3, r2
 800096c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	68da      	ldr	r2, [r3, #12]
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	4313      	orrs	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	69ba      	ldr	r2, [r7, #24]
 8000984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800098c:	2201      	movs	r2, #1
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	69ba      	ldr	r2, [r7, #24]
 8000998:	4013      	ands	r3, r2
 800099a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	091b      	lsrs	r3, r3, #4
 80009a2:	f003 0201 	and.w	r2, r3, #1
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	2203      	movs	r2, #3
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	4013      	ands	r3, r2
 80009ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	689a      	ldr	r2, [r3, #8]
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	4313      	orrs	r3, r2
 80009e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d003      	beq.n	80009f8 <HAL_GPIO_Init+0xfc>
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	2b12      	cmp	r3, #18
 80009f6:	d123      	bne.n	8000a40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	08da      	lsrs	r2, r3, #3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3208      	adds	r2, #8
 8000a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	f003 0307 	and.w	r3, r3, #7
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	220f      	movs	r2, #15
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	43db      	mvns	r3, r3
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	691a      	ldr	r2, [r3, #16]
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	08da      	lsrs	r2, r3, #3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3208      	adds	r2, #8
 8000a3a:	69b9      	ldr	r1, [r7, #24]
 8000a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	43db      	mvns	r3, r3
 8000a52:	69ba      	ldr	r2, [r7, #24]
 8000a54:	4013      	ands	r3, r2
 8000a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f003 0203 	and.w	r2, r3, #3
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	f000 80a2 	beq.w	8000bc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b56      	ldr	r3, [pc, #344]	; (8000be0 <HAL_GPIO_Init+0x2e4>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	4a55      	ldr	r2, [pc, #340]	; (8000be0 <HAL_GPIO_Init+0x2e4>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a90:	6453      	str	r3, [r2, #68]	; 0x44
 8000a92:	4b53      	ldr	r3, [pc, #332]	; (8000be0 <HAL_GPIO_Init+0x2e4>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a9e:	4a51      	ldr	r2, [pc, #324]	; (8000be4 <HAL_GPIO_Init+0x2e8>)
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	089b      	lsrs	r3, r3, #2
 8000aa4:	3302      	adds	r3, #2
 8000aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	f003 0303 	and.w	r3, r3, #3
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	220f      	movs	r2, #15
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a48      	ldr	r2, [pc, #288]	; (8000be8 <HAL_GPIO_Init+0x2ec>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d019      	beq.n	8000afe <HAL_GPIO_Init+0x202>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a47      	ldr	r2, [pc, #284]	; (8000bec <HAL_GPIO_Init+0x2f0>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d013      	beq.n	8000afa <HAL_GPIO_Init+0x1fe>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a46      	ldr	r2, [pc, #280]	; (8000bf0 <HAL_GPIO_Init+0x2f4>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d00d      	beq.n	8000af6 <HAL_GPIO_Init+0x1fa>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a45      	ldr	r2, [pc, #276]	; (8000bf4 <HAL_GPIO_Init+0x2f8>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d007      	beq.n	8000af2 <HAL_GPIO_Init+0x1f6>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a44      	ldr	r2, [pc, #272]	; (8000bf8 <HAL_GPIO_Init+0x2fc>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d101      	bne.n	8000aee <HAL_GPIO_Init+0x1f2>
 8000aea:	2304      	movs	r3, #4
 8000aec:	e008      	b.n	8000b00 <HAL_GPIO_Init+0x204>
 8000aee:	2307      	movs	r3, #7
 8000af0:	e006      	b.n	8000b00 <HAL_GPIO_Init+0x204>
 8000af2:	2303      	movs	r3, #3
 8000af4:	e004      	b.n	8000b00 <HAL_GPIO_Init+0x204>
 8000af6:	2302      	movs	r3, #2
 8000af8:	e002      	b.n	8000b00 <HAL_GPIO_Init+0x204>
 8000afa:	2301      	movs	r3, #1
 8000afc:	e000      	b.n	8000b00 <HAL_GPIO_Init+0x204>
 8000afe:	2300      	movs	r3, #0
 8000b00:	69fa      	ldr	r2, [r7, #28]
 8000b02:	f002 0203 	and.w	r2, r2, #3
 8000b06:	0092      	lsls	r2, r2, #2
 8000b08:	4093      	lsls	r3, r2
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b10:	4934      	ldr	r1, [pc, #208]	; (8000be4 <HAL_GPIO_Init+0x2e8>)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	089b      	lsrs	r3, r3, #2
 8000b16:	3302      	adds	r3, #2
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b1e:	4b37      	ldr	r3, [pc, #220]	; (8000bfc <HAL_GPIO_Init+0x300>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b42:	4a2e      	ldr	r2, [pc, #184]	; (8000bfc <HAL_GPIO_Init+0x300>)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b48:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <HAL_GPIO_Init+0x300>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	43db      	mvns	r3, r3
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	4013      	ands	r3, r2
 8000b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d003      	beq.n	8000b6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b6c:	4a23      	ldr	r2, [pc, #140]	; (8000bfc <HAL_GPIO_Init+0x300>)
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b72:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <HAL_GPIO_Init+0x300>)
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b96:	4a19      	ldr	r2, [pc, #100]	; (8000bfc <HAL_GPIO_Init+0x300>)
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <HAL_GPIO_Init+0x300>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bc0:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <HAL_GPIO_Init+0x300>)
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	61fb      	str	r3, [r7, #28]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	2b0f      	cmp	r3, #15
 8000bd0:	f67f aea2 	bls.w	8000918 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3724      	adds	r7, #36	; 0x24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40013800 	.word	0x40013800
 8000be8:	40020000 	.word	0x40020000
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	40020800 	.word	0x40020800
 8000bf4:	40020c00 	.word	0x40020c00
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40013c00 	.word	0x40013c00

08000c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c10:	787b      	ldrb	r3, [r7, #1]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c16:	887a      	ldrh	r2, [r7, #2]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c1c:	e003      	b.n	8000c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c1e:	887b      	ldrh	r3, [r7, #2]
 8000c20:	041a      	lsls	r2, r3, #16
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	619a      	str	r2, [r3, #24]
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e25b      	b.n	80010fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d075      	beq.n	8000d3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c52:	4ba3      	ldr	r3, [pc, #652]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	f003 030c 	and.w	r3, r3, #12
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	d00c      	beq.n	8000c78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c5e:	4ba0      	ldr	r3, [pc, #640]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c66:	2b08      	cmp	r3, #8
 8000c68:	d112      	bne.n	8000c90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c6a:	4b9d      	ldr	r3, [pc, #628]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c76:	d10b      	bne.n	8000c90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c78:	4b99      	ldr	r3, [pc, #612]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d05b      	beq.n	8000d3c <HAL_RCC_OscConfig+0x108>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d157      	bne.n	8000d3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e236      	b.n	80010fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c98:	d106      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x74>
 8000c9a:	4b91      	ldr	r3, [pc, #580]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a90      	ldr	r2, [pc, #576]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca4:	6013      	str	r3, [r2, #0]
 8000ca6:	e01d      	b.n	8000ce4 <HAL_RCC_OscConfig+0xb0>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cb0:	d10c      	bne.n	8000ccc <HAL_RCC_OscConfig+0x98>
 8000cb2:	4b8b      	ldr	r3, [pc, #556]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a8a      	ldr	r2, [pc, #552]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	4b88      	ldr	r3, [pc, #544]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a87      	ldr	r2, [pc, #540]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cc8:	6013      	str	r3, [r2, #0]
 8000cca:	e00b      	b.n	8000ce4 <HAL_RCC_OscConfig+0xb0>
 8000ccc:	4b84      	ldr	r3, [pc, #528]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a83      	ldr	r2, [pc, #524]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	4b81      	ldr	r3, [pc, #516]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a80      	ldr	r2, [pc, #512]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d013      	beq.n	8000d14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cec:	f7ff fcc6 	bl	800067c <HAL_GetTick>
 8000cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf2:	e008      	b.n	8000d06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cf4:	f7ff fcc2 	bl	800067c <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b64      	cmp	r3, #100	; 0x64
 8000d00:	d901      	bls.n	8000d06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d02:	2303      	movs	r3, #3
 8000d04:	e1fb      	b.n	80010fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d06:	4b76      	ldr	r3, [pc, #472]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d0f0      	beq.n	8000cf4 <HAL_RCC_OscConfig+0xc0>
 8000d12:	e014      	b.n	8000d3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d14:	f7ff fcb2 	bl	800067c <HAL_GetTick>
 8000d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1a:	e008      	b.n	8000d2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d1c:	f7ff fcae 	bl	800067c <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b64      	cmp	r3, #100	; 0x64
 8000d28:	d901      	bls.n	8000d2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e1e7      	b.n	80010fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d2e:	4b6c      	ldr	r3, [pc, #432]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f0      	bne.n	8000d1c <HAL_RCC_OscConfig+0xe8>
 8000d3a:	e000      	b.n	8000d3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d063      	beq.n	8000e12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d4a:	4b65      	ldr	r3, [pc, #404]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	f003 030c 	and.w	r3, r3, #12
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d00b      	beq.n	8000d6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d56:	4b62      	ldr	r3, [pc, #392]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d5e:	2b08      	cmp	r3, #8
 8000d60:	d11c      	bne.n	8000d9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d62:	4b5f      	ldr	r3, [pc, #380]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d116      	bne.n	8000d9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d6e:	4b5c      	ldr	r3, [pc, #368]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d005      	beq.n	8000d86 <HAL_RCC_OscConfig+0x152>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d001      	beq.n	8000d86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e1bb      	b.n	80010fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d86:	4b56      	ldr	r3, [pc, #344]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	4952      	ldr	r1, [pc, #328]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000d96:	4313      	orrs	r3, r2
 8000d98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d9a:	e03a      	b.n	8000e12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d020      	beq.n	8000de6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000da4:	4b4f      	ldr	r3, [pc, #316]	; (8000ee4 <HAL_RCC_OscConfig+0x2b0>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000daa:	f7ff fc67 	bl	800067c <HAL_GetTick>
 8000dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db0:	e008      	b.n	8000dc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000db2:	f7ff fc63 	bl	800067c <HAL_GetTick>
 8000db6:	4602      	mov	r2, r0
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d901      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e19c      	b.n	80010fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc4:	4b46      	ldr	r3, [pc, #280]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0f0      	beq.n	8000db2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd0:	4b43      	ldr	r3, [pc, #268]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	691b      	ldr	r3, [r3, #16]
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	4940      	ldr	r1, [pc, #256]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000de0:	4313      	orrs	r3, r2
 8000de2:	600b      	str	r3, [r1, #0]
 8000de4:	e015      	b.n	8000e12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000de6:	4b3f      	ldr	r3, [pc, #252]	; (8000ee4 <HAL_RCC_OscConfig+0x2b0>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dec:	f7ff fc46 	bl	800067c <HAL_GetTick>
 8000df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000df2:	e008      	b.n	8000e06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000df4:	f7ff fc42 	bl	800067c <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d901      	bls.n	8000e06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e17b      	b.n	80010fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e06:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1f0      	bne.n	8000df4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d030      	beq.n	8000e80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d016      	beq.n	8000e54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e26:	4b30      	ldr	r3, [pc, #192]	; (8000ee8 <HAL_RCC_OscConfig+0x2b4>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e2c:	f7ff fc26 	bl	800067c <HAL_GetTick>
 8000e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e32:	e008      	b.n	8000e46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e34:	f7ff fc22 	bl	800067c <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d901      	bls.n	8000e46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e15b      	b.n	80010fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e46:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0f0      	beq.n	8000e34 <HAL_RCC_OscConfig+0x200>
 8000e52:	e015      	b.n	8000e80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e54:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <HAL_RCC_OscConfig+0x2b4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e5a:	f7ff fc0f 	bl	800067c <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e62:	f7ff fc0b 	bl	800067c <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e144      	b.n	80010fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e74:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1f0      	bne.n	8000e62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f000 80a0 	beq.w	8000fce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d10f      	bne.n	8000ebe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_RCC_OscConfig+0x2b8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d121      	bne.n	8000f0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_RCC_OscConfig+0x2b8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_RCC_OscConfig+0x2b8>)
 8000ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ed6:	f7ff fbd1 	bl	800067c <HAL_GetTick>
 8000eda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000edc:	e011      	b.n	8000f02 <HAL_RCC_OscConfig+0x2ce>
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	42470000 	.word	0x42470000
 8000ee8:	42470e80 	.word	0x42470e80
 8000eec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ef0:	f7ff fbc4 	bl	800067c <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e0fd      	b.n	80010fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f02:	4b81      	ldr	r3, [pc, #516]	; (8001108 <HAL_RCC_OscConfig+0x4d4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0f0      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d106      	bne.n	8000f24 <HAL_RCC_OscConfig+0x2f0>
 8000f16:	4b7d      	ldr	r3, [pc, #500]	; (800110c <HAL_RCC_OscConfig+0x4d8>)
 8000f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f1a:	4a7c      	ldr	r2, [pc, #496]	; (800110c <HAL_RCC_OscConfig+0x4d8>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6713      	str	r3, [r2, #112]	; 0x70
 8000f22:	e01c      	b.n	8000f5e <HAL_RCC_OscConfig+0x32a>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	2b05      	cmp	r3, #5
 8000f2a:	d10c      	bne.n	8000f46 <HAL_RCC_OscConfig+0x312>
 8000f2c:	4b77      	ldr	r3, [pc, #476]	; (800110c <HAL_RCC_OscConfig+0x4d8>)
 8000f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f30:	4a76      	ldr	r2, [pc, #472]	; (800110c <HAL_RCC_OscConfig+0x4d8>)
 8000f32:	f043 0304 	orr.w	r3, r3, #4
 8000f36:	6713      	str	r3, [r2, #112]	; 0x70
 8000f38:	4b74      	ldr	r3, [pc, #464]	; (800110c <HAL_RCC_OscConfig+0x4d8>)
 8000f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f3c:	4a73      	ldr	r2, [pc, #460]	; (800110c <HAL_RCC_OscConfig+0x4d8>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6713      	str	r3, [r2, #112]	; 0x70
 8000f44:	e00b      	b.n	8000f5e <HAL_RCC_OscConfig+0x32a>
 8000f46:	4b71      	ldr	r3, [pc, #452]	; (800110c <HAL_RCC_OscConfig+0x4d8>)
 8000f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f4a:	4a70      	ldr	r2, [pc, #448]	; (800110c <HAL_RCC_OscConfig+0x4d8>)
 8000f4c:	f023 0301 	bic.w	r3, r3, #1
 8000f50:	6713      	str	r3, [r2, #112]	; 0x70
 8000f52:	4b6e      	ldr	r3, [pc, #440]	; (800110c <HAL_RCC_OscConfig+0x4d8>)
 8000f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f56:	4a6d      	ldr	r2, [pc, #436]	; (800110c <HAL_RCC_OscConfig+0x4d8>)
 8000f58:	f023 0304 	bic.w	r3, r3, #4
 8000f5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d015      	beq.n	8000f92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f66:	f7ff fb89 	bl	800067c <HAL_GetTick>
 8000f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f6c:	e00a      	b.n	8000f84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f6e:	f7ff fb85 	bl	800067c <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e0bc      	b.n	80010fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f84:	4b61      	ldr	r3, [pc, #388]	; (800110c <HAL_RCC_OscConfig+0x4d8>)
 8000f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0ee      	beq.n	8000f6e <HAL_RCC_OscConfig+0x33a>
 8000f90:	e014      	b.n	8000fbc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f92:	f7ff fb73 	bl	800067c <HAL_GetTick>
 8000f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f98:	e00a      	b.n	8000fb0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f9a:	f7ff fb6f 	bl	800067c <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e0a6      	b.n	80010fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb0:	4b56      	ldr	r3, [pc, #344]	; (800110c <HAL_RCC_OscConfig+0x4d8>)
 8000fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1ee      	bne.n	8000f9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fbc:	7dfb      	ldrb	r3, [r7, #23]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d105      	bne.n	8000fce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fc2:	4b52      	ldr	r3, [pc, #328]	; (800110c <HAL_RCC_OscConfig+0x4d8>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a51      	ldr	r2, [pc, #324]	; (800110c <HAL_RCC_OscConfig+0x4d8>)
 8000fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 8092 	beq.w	80010fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fd8:	4b4c      	ldr	r3, [pc, #304]	; (800110c <HAL_RCC_OscConfig+0x4d8>)
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f003 030c 	and.w	r3, r3, #12
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d05c      	beq.n	800109e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d141      	bne.n	8001070 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fec:	4b48      	ldr	r3, [pc, #288]	; (8001110 <HAL_RCC_OscConfig+0x4dc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff2:	f7ff fb43 	bl	800067c <HAL_GetTick>
 8000ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ff8:	e008      	b.n	800100c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ffa:	f7ff fb3f 	bl	800067c <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e078      	b.n	80010fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800100c:	4b3f      	ldr	r3, [pc, #252]	; (800110c <HAL_RCC_OscConfig+0x4d8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1f0      	bne.n	8000ffa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69da      	ldr	r2, [r3, #28]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	431a      	orrs	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001026:	019b      	lsls	r3, r3, #6
 8001028:	431a      	orrs	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102e:	085b      	lsrs	r3, r3, #1
 8001030:	3b01      	subs	r3, #1
 8001032:	041b      	lsls	r3, r3, #16
 8001034:	431a      	orrs	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103a:	061b      	lsls	r3, r3, #24
 800103c:	4933      	ldr	r1, [pc, #204]	; (800110c <HAL_RCC_OscConfig+0x4d8>)
 800103e:	4313      	orrs	r3, r2
 8001040:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001042:	4b33      	ldr	r3, [pc, #204]	; (8001110 <HAL_RCC_OscConfig+0x4dc>)
 8001044:	2201      	movs	r2, #1
 8001046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fb18 	bl	800067c <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001050:	f7ff fb14 	bl	800067c <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e04d      	b.n	80010fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001062:	4b2a      	ldr	r3, [pc, #168]	; (800110c <HAL_RCC_OscConfig+0x4d8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0f0      	beq.n	8001050 <HAL_RCC_OscConfig+0x41c>
 800106e:	e045      	b.n	80010fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001070:	4b27      	ldr	r3, [pc, #156]	; (8001110 <HAL_RCC_OscConfig+0x4dc>)
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001076:	f7ff fb01 	bl	800067c <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800107e:	f7ff fafd 	bl	800067c <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e036      	b.n	80010fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001090:	4b1e      	ldr	r3, [pc, #120]	; (800110c <HAL_RCC_OscConfig+0x4d8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1f0      	bne.n	800107e <HAL_RCC_OscConfig+0x44a>
 800109c:	e02e      	b.n	80010fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d101      	bne.n	80010aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e029      	b.n	80010fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <HAL_RCC_OscConfig+0x4d8>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d11c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d115      	bne.n	80010f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010d2:	4013      	ands	r3, r2
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010d8:	4293      	cmp	r3, r2
 80010da:	d10d      	bne.n	80010f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d106      	bne.n	80010f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d001      	beq.n	80010fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e000      	b.n	80010fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40007000 	.word	0x40007000
 800110c:	40023800 	.word	0x40023800
 8001110:	42470060 	.word	0x42470060

08001114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e0cc      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001128:	4b68      	ldr	r3, [pc, #416]	; (80012cc <HAL_RCC_ClockConfig+0x1b8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 030f 	and.w	r3, r3, #15
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d90c      	bls.n	8001150 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001136:	4b65      	ldr	r3, [pc, #404]	; (80012cc <HAL_RCC_ClockConfig+0x1b8>)
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800113e:	4b63      	ldr	r3, [pc, #396]	; (80012cc <HAL_RCC_ClockConfig+0x1b8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d001      	beq.n	8001150 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e0b8      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d020      	beq.n	800119e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	2b00      	cmp	r3, #0
 8001166:	d005      	beq.n	8001174 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001168:	4b59      	ldr	r3, [pc, #356]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	4a58      	ldr	r2, [pc, #352]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001172:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	2b00      	cmp	r3, #0
 800117e:	d005      	beq.n	800118c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001180:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	4a52      	ldr	r2, [pc, #328]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800118a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800118c:	4b50      	ldr	r3, [pc, #320]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	494d      	ldr	r1, [pc, #308]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	4313      	orrs	r3, r2
 800119c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d044      	beq.n	8001234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d107      	bne.n	80011c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d119      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e07f      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d003      	beq.n	80011d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d107      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011d2:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d109      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e06f      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e2:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e067      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011f2:	4b37      	ldr	r3, [pc, #220]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f023 0203 	bic.w	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4934      	ldr	r1, [pc, #208]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	4313      	orrs	r3, r2
 8001202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001204:	f7ff fa3a 	bl	800067c <HAL_GetTick>
 8001208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120a:	e00a      	b.n	8001222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800120c:	f7ff fa36 	bl	800067c <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	f241 3288 	movw	r2, #5000	; 0x1388
 800121a:	4293      	cmp	r3, r2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e04f      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001222:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 020c 	and.w	r2, r3, #12
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	429a      	cmp	r2, r3
 8001232:	d1eb      	bne.n	800120c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <HAL_RCC_ClockConfig+0x1b8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 030f 	and.w	r3, r3, #15
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	d20c      	bcs.n	800125c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <HAL_RCC_ClockConfig+0x1b8>)
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <HAL_RCC_ClockConfig+0x1b8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d001      	beq.n	800125c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e032      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	d008      	beq.n	800127a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	4916      	ldr	r1, [pc, #88]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	4313      	orrs	r3, r2
 8001278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	2b00      	cmp	r3, #0
 8001284:	d009      	beq.n	800129a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	490e      	ldr	r1, [pc, #56]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001296:	4313      	orrs	r3, r2
 8001298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800129a:	f000 f821 	bl	80012e0 <HAL_RCC_GetSysClockFreq>
 800129e:	4601      	mov	r1, r0
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <HAL_RCC_ClockConfig+0x1c0>)
 80012ac:	5cd3      	ldrb	r3, [r2, r3]
 80012ae:	fa21 f303 	lsr.w	r3, r1, r3
 80012b2:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f99a 	bl	80005f4 <HAL_InitTick>

  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023c00 	.word	0x40023c00
 80012d0:	40023800 	.word	0x40023800
 80012d4:	08004e18 	.word	0x08004e18
 80012d8:	2000004c 	.word	0x2000004c
 80012dc:	20000000 	.word	0x20000000

080012e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012f6:	4b63      	ldr	r3, [pc, #396]	; (8001484 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d007      	beq.n	8001312 <HAL_RCC_GetSysClockFreq+0x32>
 8001302:	2b08      	cmp	r3, #8
 8001304:	d008      	beq.n	8001318 <HAL_RCC_GetSysClockFreq+0x38>
 8001306:	2b00      	cmp	r3, #0
 8001308:	f040 80b4 	bne.w	8001474 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800130c:	4b5e      	ldr	r3, [pc, #376]	; (8001488 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800130e:	60bb      	str	r3, [r7, #8]
       break;
 8001310:	e0b3      	b.n	800147a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001312:	4b5e      	ldr	r3, [pc, #376]	; (800148c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001314:	60bb      	str	r3, [r7, #8]
      break;
 8001316:	e0b0      	b.n	800147a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001318:	4b5a      	ldr	r3, [pc, #360]	; (8001484 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001320:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001322:	4b58      	ldr	r3, [pc, #352]	; (8001484 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d04a      	beq.n	80013c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800132e:	4b55      	ldr	r3, [pc, #340]	; (8001484 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	099b      	lsrs	r3, r3, #6
 8001334:	f04f 0400 	mov.w	r4, #0
 8001338:	f240 11ff 	movw	r1, #511	; 0x1ff
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	ea03 0501 	and.w	r5, r3, r1
 8001344:	ea04 0602 	and.w	r6, r4, r2
 8001348:	4629      	mov	r1, r5
 800134a:	4632      	mov	r2, r6
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	f04f 0400 	mov.w	r4, #0
 8001354:	0154      	lsls	r4, r2, #5
 8001356:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800135a:	014b      	lsls	r3, r1, #5
 800135c:	4619      	mov	r1, r3
 800135e:	4622      	mov	r2, r4
 8001360:	1b49      	subs	r1, r1, r5
 8001362:	eb62 0206 	sbc.w	r2, r2, r6
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	f04f 0400 	mov.w	r4, #0
 800136e:	0194      	lsls	r4, r2, #6
 8001370:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001374:	018b      	lsls	r3, r1, #6
 8001376:	1a5b      	subs	r3, r3, r1
 8001378:	eb64 0402 	sbc.w	r4, r4, r2
 800137c:	f04f 0100 	mov.w	r1, #0
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	00e2      	lsls	r2, r4, #3
 8001386:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800138a:	00d9      	lsls	r1, r3, #3
 800138c:	460b      	mov	r3, r1
 800138e:	4614      	mov	r4, r2
 8001390:	195b      	adds	r3, r3, r5
 8001392:	eb44 0406 	adc.w	r4, r4, r6
 8001396:	f04f 0100 	mov.w	r1, #0
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	0262      	lsls	r2, r4, #9
 80013a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80013a4:	0259      	lsls	r1, r3, #9
 80013a6:	460b      	mov	r3, r1
 80013a8:	4614      	mov	r4, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	4621      	mov	r1, r4
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f04f 0400 	mov.w	r4, #0
 80013b4:	461a      	mov	r2, r3
 80013b6:	4623      	mov	r3, r4
 80013b8:	f7fe ff7a 	bl	80002b0 <__aeabi_uldivmod>
 80013bc:	4603      	mov	r3, r0
 80013be:	460c      	mov	r4, r1
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	e049      	b.n	8001458 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c4:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	099b      	lsrs	r3, r3, #6
 80013ca:	f04f 0400 	mov.w	r4, #0
 80013ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	ea03 0501 	and.w	r5, r3, r1
 80013da:	ea04 0602 	and.w	r6, r4, r2
 80013de:	4629      	mov	r1, r5
 80013e0:	4632      	mov	r2, r6
 80013e2:	f04f 0300 	mov.w	r3, #0
 80013e6:	f04f 0400 	mov.w	r4, #0
 80013ea:	0154      	lsls	r4, r2, #5
 80013ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013f0:	014b      	lsls	r3, r1, #5
 80013f2:	4619      	mov	r1, r3
 80013f4:	4622      	mov	r2, r4
 80013f6:	1b49      	subs	r1, r1, r5
 80013f8:	eb62 0206 	sbc.w	r2, r2, r6
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	f04f 0400 	mov.w	r4, #0
 8001404:	0194      	lsls	r4, r2, #6
 8001406:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800140a:	018b      	lsls	r3, r1, #6
 800140c:	1a5b      	subs	r3, r3, r1
 800140e:	eb64 0402 	sbc.w	r4, r4, r2
 8001412:	f04f 0100 	mov.w	r1, #0
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	00e2      	lsls	r2, r4, #3
 800141c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001420:	00d9      	lsls	r1, r3, #3
 8001422:	460b      	mov	r3, r1
 8001424:	4614      	mov	r4, r2
 8001426:	195b      	adds	r3, r3, r5
 8001428:	eb44 0406 	adc.w	r4, r4, r6
 800142c:	f04f 0100 	mov.w	r1, #0
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	02a2      	lsls	r2, r4, #10
 8001436:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800143a:	0299      	lsls	r1, r3, #10
 800143c:	460b      	mov	r3, r1
 800143e:	4614      	mov	r4, r2
 8001440:	4618      	mov	r0, r3
 8001442:	4621      	mov	r1, r4
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f04f 0400 	mov.w	r4, #0
 800144a:	461a      	mov	r2, r3
 800144c:	4623      	mov	r3, r4
 800144e:	f7fe ff2f 	bl	80002b0 <__aeabi_uldivmod>
 8001452:	4603      	mov	r3, r0
 8001454:	460c      	mov	r4, r1
 8001456:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	0c1b      	lsrs	r3, r3, #16
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	3301      	adds	r3, #1
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001470:	60bb      	str	r3, [r7, #8]
      break;
 8001472:	e002      	b.n	800147a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001476:	60bb      	str	r3, [r7, #8]
      break;
 8001478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800147a:	68bb      	ldr	r3, [r7, #8]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001484:	40023800 	.word	0x40023800
 8001488:	00f42400 	.word	0x00f42400
 800148c:	007a1200 	.word	0x007a1200

08001490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	2000004c 	.word	0x2000004c

080014a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014ac:	f7ff fff0 	bl	8001490 <HAL_RCC_GetHCLKFreq>
 80014b0:	4601      	mov	r1, r0
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	0a9b      	lsrs	r3, r3, #10
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	4a03      	ldr	r2, [pc, #12]	; (80014cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40023800 	.word	0x40023800
 80014cc:	08004e28 	.word	0x08004e28

080014d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014d4:	f7ff ffdc 	bl	8001490 <HAL_RCC_GetHCLKFreq>
 80014d8:	4601      	mov	r1, r0
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	0b5b      	lsrs	r3, r3, #13
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	4a03      	ldr	r2, [pc, #12]	; (80014f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014e6:	5cd3      	ldrb	r3, [r2, r3]
 80014e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	08004e28 	.word	0x08004e28

080014f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e03f      	b.n	800158a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d106      	bne.n	8001524 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f001 fc1e 	bl	8002d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2224      	movs	r2, #36	; 0x24
 8001528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800153a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 faef 	bl	8001b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001550:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	695a      	ldr	r2, [r3, #20]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001560:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001570:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2220      	movs	r2, #32
 800157c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2220      	movs	r2, #32
 8001584:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001592:	b480      	push	{r7}
 8001594:	b085      	sub	sp, #20
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	4613      	mov	r3, r2
 800159e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	d130      	bne.n	800160e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <HAL_UART_Transmit_IT+0x26>
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e029      	b.n	8001610 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_UART_Transmit_IT+0x38>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e022      	b.n	8001610 <HAL_UART_Transmit_IT+0x7e>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	88fa      	ldrh	r2, [r7, #6]
 80015dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	88fa      	ldrh	r2, [r7, #6]
 80015e2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2221      	movs	r2, #33	; 0x21
 80015ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001608:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800160e:	2302      	movs	r3, #2
  }
}
 8001610:	4618      	mov	r0, r3
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	4613      	mov	r3, r2
 8001628:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b20      	cmp	r3, #32
 8001634:	d140      	bne.n	80016b8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <HAL_UART_Receive_IT+0x26>
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e039      	b.n	80016ba <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <HAL_UART_Receive_IT+0x38>
 8001650:	2302      	movs	r3, #2
 8001652:	e032      	b.n	80016ba <HAL_UART_Receive_IT+0x9e>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	88fa      	ldrh	r2, [r7, #6]
 8001666:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	88fa      	ldrh	r2, [r7, #6]
 800166c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2222      	movs	r2, #34	; 0x22
 8001678:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001692:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	695a      	ldr	r2, [r3, #20]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0201 	orr.w	r2, r2, #1
 80016a2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0220 	orr.w	r2, r2, #32
 80016b2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	e000      	b.n	80016ba <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80016b8:	2302      	movs	r3, #2
  }
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10d      	bne.n	800171a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	f003 0320 	and.w	r3, r3, #32
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_UART_IRQHandler+0x52>
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	f003 0320 	and.w	r3, r3, #32
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f982 	bl	8001a1c <UART_Receive_IT>
      return;
 8001718:	e0d1      	b.n	80018be <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80b0 	beq.w	8001882 <HAL_UART_IRQHandler+0x1ba>
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d105      	bne.n	8001738 <HAL_UART_IRQHandler+0x70>
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 80a5 	beq.w	8001882 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00a      	beq.n	8001758 <HAL_UART_IRQHandler+0x90>
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001750:	f043 0201 	orr.w	r2, r3, #1
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00a      	beq.n	8001778 <HAL_UART_IRQHandler+0xb0>
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001770:	f043 0202 	orr.w	r2, r3, #2
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00a      	beq.n	8001798 <HAL_UART_IRQHandler+0xd0>
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001790:	f043 0204 	orr.w	r2, r3, #4
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00f      	beq.n	80017c2 <HAL_UART_IRQHandler+0xfa>
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	f003 0320 	and.w	r3, r3, #32
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d104      	bne.n	80017b6 <HAL_UART_IRQHandler+0xee>
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ba:	f043 0208 	orr.w	r2, r3, #8
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d078      	beq.n	80018bc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f003 0320 	and.w	r3, r3, #32
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d007      	beq.n	80017e4 <HAL_UART_IRQHandler+0x11c>
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	f003 0320 	and.w	r3, r3, #32
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f91c 	bl	8001a1c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ee:	2b40      	cmp	r3, #64	; 0x40
 80017f0:	bf0c      	ite	eq
 80017f2:	2301      	moveq	r3, #1
 80017f4:	2300      	movne	r3, #0
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d102      	bne.n	800180c <HAL_UART_IRQHandler+0x144>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d031      	beq.n	8001870 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 f865 	bl	80018dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181c:	2b40      	cmp	r3, #64	; 0x40
 800181e:	d123      	bne.n	8001868 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	695a      	ldr	r2, [r3, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800182e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001834:	2b00      	cmp	r3, #0
 8001836:	d013      	beq.n	8001860 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183c:	4a21      	ldr	r2, [pc, #132]	; (80018c4 <HAL_UART_IRQHandler+0x1fc>)
 800183e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff f836 	bl	80008b6 <HAL_DMA_Abort_IT>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d016      	beq.n	800187e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800185a:	4610      	mov	r0, r2
 800185c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800185e:	e00e      	b.n	800187e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f831 	bl	80018c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001866:	e00a      	b.n	800187e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f82d 	bl	80018c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800186e:	e006      	b.n	800187e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f829 	bl	80018c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800187c:	e01e      	b.n	80018bc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800187e:	bf00      	nop
    return;
 8001880:	e01c      	b.n	80018bc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001888:	2b00      	cmp	r3, #0
 800188a:	d008      	beq.n	800189e <HAL_UART_IRQHandler+0x1d6>
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f852 	bl	8001940 <UART_Transmit_IT>
    return;
 800189c:	e00f      	b.n	80018be <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00a      	beq.n	80018be <HAL_UART_IRQHandler+0x1f6>
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d005      	beq.n	80018be <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f89a 	bl	80019ec <UART_EndTransmit_IT>
    return;
 80018b8:	bf00      	nop
 80018ba:	e000      	b.n	80018be <HAL_UART_IRQHandler+0x1f6>
    return;
 80018bc:	bf00      	nop
  }
}
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	08001919 	.word	0x08001919

080018c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80018f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695a      	ldr	r2, [r3, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0201 	bic.w	r2, r2, #1
 8001902:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2220      	movs	r2, #32
 8001908:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001924:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f7ff ffc8 	bl	80018c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b21      	cmp	r3, #33	; 0x21
 8001952:	d144      	bne.n	80019de <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800195c:	d11a      	bne.n	8001994 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001972:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	1c9a      	adds	r2, r3, #2
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	621a      	str	r2, [r3, #32]
 8001986:	e00e      	b.n	80019a6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	621a      	str	r2, [r3, #32]
 8001992:	e008      	b.n	80019a6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	1c59      	adds	r1, r3, #1
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6211      	str	r1, [r2, #32]
 800199e:	781a      	ldrb	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	3b01      	subs	r3, #1
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4619      	mov	r1, r3
 80019b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10f      	bne.n	80019da <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e000      	b.n	80019e0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80019de:	2302      	movs	r3, #2
  }
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2220      	movs	r2, #32
 8001a08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 fff9 	bl	8002a04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b22      	cmp	r3, #34	; 0x22
 8001a2e:	d171      	bne.n	8001b14 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a38:	d123      	bne.n	8001a82 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10e      	bne.n	8001a66 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	1c9a      	adds	r2, r3, #2
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28
 8001a64:	e029      	b.n	8001aba <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
 8001a80:	e01b      	b.n	8001aba <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10a      	bne.n	8001aa0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6858      	ldr	r0, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	1c59      	adds	r1, r3, #1
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6291      	str	r1, [r2, #40]	; 0x28
 8001a9a:	b2c2      	uxtb	r2, r0
 8001a9c:	701a      	strb	r2, [r3, #0]
 8001a9e:	e00c      	b.n	8001aba <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	1c58      	adds	r0, r3, #1
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	6288      	str	r0, [r1, #40]	; 0x28
 8001ab2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d120      	bne.n	8001b10 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0220 	bic.w	r2, r2, #32
 8001adc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695a      	ldr	r2, [r3, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0201 	bic.w	r2, r2, #1
 8001afc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2220      	movs	r2, #32
 8001b02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 ff5c 	bl	80029c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	e002      	b.n	8001b16 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e000      	b.n	8001b16 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
  }
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001b62:	f023 030c 	bic.w	r3, r3, #12
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	68f9      	ldr	r1, [r7, #12]
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	699a      	ldr	r2, [r3, #24]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b8e:	f040 818b 	bne.w	8001ea8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4ac1      	ldr	r2, [pc, #772]	; (8001e9c <UART_SetConfig+0x37c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d005      	beq.n	8001ba8 <UART_SetConfig+0x88>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4abf      	ldr	r2, [pc, #764]	; (8001ea0 <UART_SetConfig+0x380>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	f040 80bd 	bne.w	8001d22 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ba8:	f7ff fc92 	bl	80014d0 <HAL_RCC_GetPCLK2Freq>
 8001bac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	461d      	mov	r5, r3
 8001bb2:	f04f 0600 	mov.w	r6, #0
 8001bb6:	46a8      	mov	r8, r5
 8001bb8:	46b1      	mov	r9, r6
 8001bba:	eb18 0308 	adds.w	r3, r8, r8
 8001bbe:	eb49 0409 	adc.w	r4, r9, r9
 8001bc2:	4698      	mov	r8, r3
 8001bc4:	46a1      	mov	r9, r4
 8001bc6:	eb18 0805 	adds.w	r8, r8, r5
 8001bca:	eb49 0906 	adc.w	r9, r9, r6
 8001bce:	f04f 0100 	mov.w	r1, #0
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001bda:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001bde:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001be2:	4688      	mov	r8, r1
 8001be4:	4691      	mov	r9, r2
 8001be6:	eb18 0005 	adds.w	r0, r8, r5
 8001bea:	eb49 0106 	adc.w	r1, r9, r6
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	461d      	mov	r5, r3
 8001bf4:	f04f 0600 	mov.w	r6, #0
 8001bf8:	196b      	adds	r3, r5, r5
 8001bfa:	eb46 0406 	adc.w	r4, r6, r6
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4623      	mov	r3, r4
 8001c02:	f7fe fb55 	bl	80002b0 <__aeabi_uldivmod>
 8001c06:	4603      	mov	r3, r0
 8001c08:	460c      	mov	r4, r1
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4ba5      	ldr	r3, [pc, #660]	; (8001ea4 <UART_SetConfig+0x384>)
 8001c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	461d      	mov	r5, r3
 8001c1c:	f04f 0600 	mov.w	r6, #0
 8001c20:	46a9      	mov	r9, r5
 8001c22:	46b2      	mov	sl, r6
 8001c24:	eb19 0309 	adds.w	r3, r9, r9
 8001c28:	eb4a 040a 	adc.w	r4, sl, sl
 8001c2c:	4699      	mov	r9, r3
 8001c2e:	46a2      	mov	sl, r4
 8001c30:	eb19 0905 	adds.w	r9, r9, r5
 8001c34:	eb4a 0a06 	adc.w	sl, sl, r6
 8001c38:	f04f 0100 	mov.w	r1, #0
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001c48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001c4c:	4689      	mov	r9, r1
 8001c4e:	4692      	mov	sl, r2
 8001c50:	eb19 0005 	adds.w	r0, r9, r5
 8001c54:	eb4a 0106 	adc.w	r1, sl, r6
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	461d      	mov	r5, r3
 8001c5e:	f04f 0600 	mov.w	r6, #0
 8001c62:	196b      	adds	r3, r5, r5
 8001c64:	eb46 0406 	adc.w	r4, r6, r6
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4623      	mov	r3, r4
 8001c6c:	f7fe fb20 	bl	80002b0 <__aeabi_uldivmod>
 8001c70:	4603      	mov	r3, r0
 8001c72:	460c      	mov	r4, r1
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b8b      	ldr	r3, [pc, #556]	; (8001ea4 <UART_SetConfig+0x384>)
 8001c78:	fba3 1302 	umull	r1, r3, r3, r2
 8001c7c:	095b      	lsrs	r3, r3, #5
 8001c7e:	2164      	movs	r1, #100	; 0x64
 8001c80:	fb01 f303 	mul.w	r3, r1, r3
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	3332      	adds	r3, #50	; 0x32
 8001c8a:	4a86      	ldr	r2, [pc, #536]	; (8001ea4 <UART_SetConfig+0x384>)
 8001c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c90:	095b      	lsrs	r3, r3, #5
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001c98:	4498      	add	r8, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	461d      	mov	r5, r3
 8001c9e:	f04f 0600 	mov.w	r6, #0
 8001ca2:	46a9      	mov	r9, r5
 8001ca4:	46b2      	mov	sl, r6
 8001ca6:	eb19 0309 	adds.w	r3, r9, r9
 8001caa:	eb4a 040a 	adc.w	r4, sl, sl
 8001cae:	4699      	mov	r9, r3
 8001cb0:	46a2      	mov	sl, r4
 8001cb2:	eb19 0905 	adds.w	r9, r9, r5
 8001cb6:	eb4a 0a06 	adc.w	sl, sl, r6
 8001cba:	f04f 0100 	mov.w	r1, #0
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001cc6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001cca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001cce:	4689      	mov	r9, r1
 8001cd0:	4692      	mov	sl, r2
 8001cd2:	eb19 0005 	adds.w	r0, r9, r5
 8001cd6:	eb4a 0106 	adc.w	r1, sl, r6
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	461d      	mov	r5, r3
 8001ce0:	f04f 0600 	mov.w	r6, #0
 8001ce4:	196b      	adds	r3, r5, r5
 8001ce6:	eb46 0406 	adc.w	r4, r6, r6
 8001cea:	461a      	mov	r2, r3
 8001cec:	4623      	mov	r3, r4
 8001cee:	f7fe fadf 	bl	80002b0 <__aeabi_uldivmod>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	460c      	mov	r4, r1
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4b6a      	ldr	r3, [pc, #424]	; (8001ea4 <UART_SetConfig+0x384>)
 8001cfa:	fba3 1302 	umull	r1, r3, r3, r2
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	2164      	movs	r1, #100	; 0x64
 8001d02:	fb01 f303 	mul.w	r3, r1, r3
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	3332      	adds	r3, #50	; 0x32
 8001d0c:	4a65      	ldr	r2, [pc, #404]	; (8001ea4 <UART_SetConfig+0x384>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	f003 0207 	and.w	r2, r3, #7
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4442      	add	r2, r8
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	e26f      	b.n	8002202 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d22:	f7ff fbc1 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001d26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	461d      	mov	r5, r3
 8001d2c:	f04f 0600 	mov.w	r6, #0
 8001d30:	46a8      	mov	r8, r5
 8001d32:	46b1      	mov	r9, r6
 8001d34:	eb18 0308 	adds.w	r3, r8, r8
 8001d38:	eb49 0409 	adc.w	r4, r9, r9
 8001d3c:	4698      	mov	r8, r3
 8001d3e:	46a1      	mov	r9, r4
 8001d40:	eb18 0805 	adds.w	r8, r8, r5
 8001d44:	eb49 0906 	adc.w	r9, r9, r6
 8001d48:	f04f 0100 	mov.w	r1, #0
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001d54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001d58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001d5c:	4688      	mov	r8, r1
 8001d5e:	4691      	mov	r9, r2
 8001d60:	eb18 0005 	adds.w	r0, r8, r5
 8001d64:	eb49 0106 	adc.w	r1, r9, r6
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	461d      	mov	r5, r3
 8001d6e:	f04f 0600 	mov.w	r6, #0
 8001d72:	196b      	adds	r3, r5, r5
 8001d74:	eb46 0406 	adc.w	r4, r6, r6
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4623      	mov	r3, r4
 8001d7c:	f7fe fa98 	bl	80002b0 <__aeabi_uldivmod>
 8001d80:	4603      	mov	r3, r0
 8001d82:	460c      	mov	r4, r1
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b47      	ldr	r3, [pc, #284]	; (8001ea4 <UART_SetConfig+0x384>)
 8001d88:	fba3 2302 	umull	r2, r3, r3, r2
 8001d8c:	095b      	lsrs	r3, r3, #5
 8001d8e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	461d      	mov	r5, r3
 8001d96:	f04f 0600 	mov.w	r6, #0
 8001d9a:	46a9      	mov	r9, r5
 8001d9c:	46b2      	mov	sl, r6
 8001d9e:	eb19 0309 	adds.w	r3, r9, r9
 8001da2:	eb4a 040a 	adc.w	r4, sl, sl
 8001da6:	4699      	mov	r9, r3
 8001da8:	46a2      	mov	sl, r4
 8001daa:	eb19 0905 	adds.w	r9, r9, r5
 8001dae:	eb4a 0a06 	adc.w	sl, sl, r6
 8001db2:	f04f 0100 	mov.w	r1, #0
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001dbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001dc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001dc6:	4689      	mov	r9, r1
 8001dc8:	4692      	mov	sl, r2
 8001dca:	eb19 0005 	adds.w	r0, r9, r5
 8001dce:	eb4a 0106 	adc.w	r1, sl, r6
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	461d      	mov	r5, r3
 8001dd8:	f04f 0600 	mov.w	r6, #0
 8001ddc:	196b      	adds	r3, r5, r5
 8001dde:	eb46 0406 	adc.w	r4, r6, r6
 8001de2:	461a      	mov	r2, r3
 8001de4:	4623      	mov	r3, r4
 8001de6:	f7fe fa63 	bl	80002b0 <__aeabi_uldivmod>
 8001dea:	4603      	mov	r3, r0
 8001dec:	460c      	mov	r4, r1
 8001dee:	461a      	mov	r2, r3
 8001df0:	4b2c      	ldr	r3, [pc, #176]	; (8001ea4 <UART_SetConfig+0x384>)
 8001df2:	fba3 1302 	umull	r1, r3, r3, r2
 8001df6:	095b      	lsrs	r3, r3, #5
 8001df8:	2164      	movs	r1, #100	; 0x64
 8001dfa:	fb01 f303 	mul.w	r3, r1, r3
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	3332      	adds	r3, #50	; 0x32
 8001e04:	4a27      	ldr	r2, [pc, #156]	; (8001ea4 <UART_SetConfig+0x384>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e12:	4498      	add	r8, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	461d      	mov	r5, r3
 8001e18:	f04f 0600 	mov.w	r6, #0
 8001e1c:	46a9      	mov	r9, r5
 8001e1e:	46b2      	mov	sl, r6
 8001e20:	eb19 0309 	adds.w	r3, r9, r9
 8001e24:	eb4a 040a 	adc.w	r4, sl, sl
 8001e28:	4699      	mov	r9, r3
 8001e2a:	46a2      	mov	sl, r4
 8001e2c:	eb19 0905 	adds.w	r9, r9, r5
 8001e30:	eb4a 0a06 	adc.w	sl, sl, r6
 8001e34:	f04f 0100 	mov.w	r1, #0
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001e44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001e48:	4689      	mov	r9, r1
 8001e4a:	4692      	mov	sl, r2
 8001e4c:	eb19 0005 	adds.w	r0, r9, r5
 8001e50:	eb4a 0106 	adc.w	r1, sl, r6
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	461d      	mov	r5, r3
 8001e5a:	f04f 0600 	mov.w	r6, #0
 8001e5e:	196b      	adds	r3, r5, r5
 8001e60:	eb46 0406 	adc.w	r4, r6, r6
 8001e64:	461a      	mov	r2, r3
 8001e66:	4623      	mov	r3, r4
 8001e68:	f7fe fa22 	bl	80002b0 <__aeabi_uldivmod>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	460c      	mov	r4, r1
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <UART_SetConfig+0x384>)
 8001e74:	fba3 1302 	umull	r1, r3, r3, r2
 8001e78:	095b      	lsrs	r3, r3, #5
 8001e7a:	2164      	movs	r1, #100	; 0x64
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	3332      	adds	r3, #50	; 0x32
 8001e86:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <UART_SetConfig+0x384>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	095b      	lsrs	r3, r3, #5
 8001e8e:	f003 0207 	and.w	r2, r3, #7
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4442      	add	r2, r8
 8001e98:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001e9a:	e1b2      	b.n	8002202 <UART_SetConfig+0x6e2>
 8001e9c:	40011000 	.word	0x40011000
 8001ea0:	40011400 	.word	0x40011400
 8001ea4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4ad7      	ldr	r2, [pc, #860]	; (800220c <UART_SetConfig+0x6ec>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d005      	beq.n	8001ebe <UART_SetConfig+0x39e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4ad6      	ldr	r2, [pc, #856]	; (8002210 <UART_SetConfig+0x6f0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	f040 80d1 	bne.w	8002060 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ebe:	f7ff fb07 	bl	80014d0 <HAL_RCC_GetPCLK2Freq>
 8001ec2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	469a      	mov	sl, r3
 8001ec8:	f04f 0b00 	mov.w	fp, #0
 8001ecc:	46d0      	mov	r8, sl
 8001ece:	46d9      	mov	r9, fp
 8001ed0:	eb18 0308 	adds.w	r3, r8, r8
 8001ed4:	eb49 0409 	adc.w	r4, r9, r9
 8001ed8:	4698      	mov	r8, r3
 8001eda:	46a1      	mov	r9, r4
 8001edc:	eb18 080a 	adds.w	r8, r8, sl
 8001ee0:	eb49 090b 	adc.w	r9, r9, fp
 8001ee4:	f04f 0100 	mov.w	r1, #0
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001ef0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001ef4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001ef8:	4688      	mov	r8, r1
 8001efa:	4691      	mov	r9, r2
 8001efc:	eb1a 0508 	adds.w	r5, sl, r8
 8001f00:	eb4b 0609 	adc.w	r6, fp, r9
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	f04f 0400 	mov.w	r4, #0
 8001f16:	0094      	lsls	r4, r2, #2
 8001f18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001f1c:	008b      	lsls	r3, r1, #2
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4623      	mov	r3, r4
 8001f22:	4628      	mov	r0, r5
 8001f24:	4631      	mov	r1, r6
 8001f26:	f7fe f9c3 	bl	80002b0 <__aeabi_uldivmod>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	460c      	mov	r4, r1
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4bb8      	ldr	r3, [pc, #736]	; (8002214 <UART_SetConfig+0x6f4>)
 8001f32:	fba3 2302 	umull	r2, r3, r3, r2
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	469b      	mov	fp, r3
 8001f40:	f04f 0c00 	mov.w	ip, #0
 8001f44:	46d9      	mov	r9, fp
 8001f46:	46e2      	mov	sl, ip
 8001f48:	eb19 0309 	adds.w	r3, r9, r9
 8001f4c:	eb4a 040a 	adc.w	r4, sl, sl
 8001f50:	4699      	mov	r9, r3
 8001f52:	46a2      	mov	sl, r4
 8001f54:	eb19 090b 	adds.w	r9, r9, fp
 8001f58:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001f5c:	f04f 0100 	mov.w	r1, #0
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f70:	4689      	mov	r9, r1
 8001f72:	4692      	mov	sl, r2
 8001f74:	eb1b 0509 	adds.w	r5, fp, r9
 8001f78:	eb4c 060a 	adc.w	r6, ip, sl
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4619      	mov	r1, r3
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	f04f 0400 	mov.w	r4, #0
 8001f8e:	0094      	lsls	r4, r2, #2
 8001f90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001f94:	008b      	lsls	r3, r1, #2
 8001f96:	461a      	mov	r2, r3
 8001f98:	4623      	mov	r3, r4
 8001f9a:	4628      	mov	r0, r5
 8001f9c:	4631      	mov	r1, r6
 8001f9e:	f7fe f987 	bl	80002b0 <__aeabi_uldivmod>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	460c      	mov	r4, r1
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b9a      	ldr	r3, [pc, #616]	; (8002214 <UART_SetConfig+0x6f4>)
 8001faa:	fba3 1302 	umull	r1, r3, r3, r2
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	2164      	movs	r1, #100	; 0x64
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	3332      	adds	r3, #50	; 0x32
 8001fbc:	4a95      	ldr	r2, [pc, #596]	; (8002214 <UART_SetConfig+0x6f4>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fc8:	4498      	add	r8, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	469b      	mov	fp, r3
 8001fce:	f04f 0c00 	mov.w	ip, #0
 8001fd2:	46d9      	mov	r9, fp
 8001fd4:	46e2      	mov	sl, ip
 8001fd6:	eb19 0309 	adds.w	r3, r9, r9
 8001fda:	eb4a 040a 	adc.w	r4, sl, sl
 8001fde:	4699      	mov	r9, r3
 8001fe0:	46a2      	mov	sl, r4
 8001fe2:	eb19 090b 	adds.w	r9, r9, fp
 8001fe6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001fea:	f04f 0100 	mov.w	r1, #0
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ff6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ffa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001ffe:	4689      	mov	r9, r1
 8002000:	4692      	mov	sl, r2
 8002002:	eb1b 0509 	adds.w	r5, fp, r9
 8002006:	eb4c 060a 	adc.w	r6, ip, sl
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4619      	mov	r1, r3
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	f04f 0400 	mov.w	r4, #0
 800201c:	0094      	lsls	r4, r2, #2
 800201e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002022:	008b      	lsls	r3, r1, #2
 8002024:	461a      	mov	r2, r3
 8002026:	4623      	mov	r3, r4
 8002028:	4628      	mov	r0, r5
 800202a:	4631      	mov	r1, r6
 800202c:	f7fe f940 	bl	80002b0 <__aeabi_uldivmod>
 8002030:	4603      	mov	r3, r0
 8002032:	460c      	mov	r4, r1
 8002034:	461a      	mov	r2, r3
 8002036:	4b77      	ldr	r3, [pc, #476]	; (8002214 <UART_SetConfig+0x6f4>)
 8002038:	fba3 1302 	umull	r1, r3, r3, r2
 800203c:	095b      	lsrs	r3, r3, #5
 800203e:	2164      	movs	r1, #100	; 0x64
 8002040:	fb01 f303 	mul.w	r3, r1, r3
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	3332      	adds	r3, #50	; 0x32
 800204a:	4a72      	ldr	r2, [pc, #456]	; (8002214 <UART_SetConfig+0x6f4>)
 800204c:	fba2 2303 	umull	r2, r3, r2, r3
 8002050:	095b      	lsrs	r3, r3, #5
 8002052:	f003 020f 	and.w	r2, r3, #15
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4442      	add	r2, r8
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	e0d0      	b.n	8002202 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002060:	f7ff fa22 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8002064:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	469a      	mov	sl, r3
 800206a:	f04f 0b00 	mov.w	fp, #0
 800206e:	46d0      	mov	r8, sl
 8002070:	46d9      	mov	r9, fp
 8002072:	eb18 0308 	adds.w	r3, r8, r8
 8002076:	eb49 0409 	adc.w	r4, r9, r9
 800207a:	4698      	mov	r8, r3
 800207c:	46a1      	mov	r9, r4
 800207e:	eb18 080a 	adds.w	r8, r8, sl
 8002082:	eb49 090b 	adc.w	r9, r9, fp
 8002086:	f04f 0100 	mov.w	r1, #0
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002092:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002096:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800209a:	4688      	mov	r8, r1
 800209c:	4691      	mov	r9, r2
 800209e:	eb1a 0508 	adds.w	r5, sl, r8
 80020a2:	eb4b 0609 	adc.w	r6, fp, r9
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4619      	mov	r1, r3
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	f04f 0400 	mov.w	r4, #0
 80020b8:	0094      	lsls	r4, r2, #2
 80020ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80020be:	008b      	lsls	r3, r1, #2
 80020c0:	461a      	mov	r2, r3
 80020c2:	4623      	mov	r3, r4
 80020c4:	4628      	mov	r0, r5
 80020c6:	4631      	mov	r1, r6
 80020c8:	f7fe f8f2 	bl	80002b0 <__aeabi_uldivmod>
 80020cc:	4603      	mov	r3, r0
 80020ce:	460c      	mov	r4, r1
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b50      	ldr	r3, [pc, #320]	; (8002214 <UART_SetConfig+0x6f4>)
 80020d4:	fba3 2302 	umull	r2, r3, r3, r2
 80020d8:	095b      	lsrs	r3, r3, #5
 80020da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	469b      	mov	fp, r3
 80020e2:	f04f 0c00 	mov.w	ip, #0
 80020e6:	46d9      	mov	r9, fp
 80020e8:	46e2      	mov	sl, ip
 80020ea:	eb19 0309 	adds.w	r3, r9, r9
 80020ee:	eb4a 040a 	adc.w	r4, sl, sl
 80020f2:	4699      	mov	r9, r3
 80020f4:	46a2      	mov	sl, r4
 80020f6:	eb19 090b 	adds.w	r9, r9, fp
 80020fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80020fe:	f04f 0100 	mov.w	r1, #0
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800210a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800210e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002112:	4689      	mov	r9, r1
 8002114:	4692      	mov	sl, r2
 8002116:	eb1b 0509 	adds.w	r5, fp, r9
 800211a:	eb4c 060a 	adc.w	r6, ip, sl
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4619      	mov	r1, r3
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	f04f 0400 	mov.w	r4, #0
 8002130:	0094      	lsls	r4, r2, #2
 8002132:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002136:	008b      	lsls	r3, r1, #2
 8002138:	461a      	mov	r2, r3
 800213a:	4623      	mov	r3, r4
 800213c:	4628      	mov	r0, r5
 800213e:	4631      	mov	r1, r6
 8002140:	f7fe f8b6 	bl	80002b0 <__aeabi_uldivmod>
 8002144:	4603      	mov	r3, r0
 8002146:	460c      	mov	r4, r1
 8002148:	461a      	mov	r2, r3
 800214a:	4b32      	ldr	r3, [pc, #200]	; (8002214 <UART_SetConfig+0x6f4>)
 800214c:	fba3 1302 	umull	r1, r3, r3, r2
 8002150:	095b      	lsrs	r3, r3, #5
 8002152:	2164      	movs	r1, #100	; 0x64
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	3332      	adds	r3, #50	; 0x32
 800215e:	4a2d      	ldr	r2, [pc, #180]	; (8002214 <UART_SetConfig+0x6f4>)
 8002160:	fba2 2303 	umull	r2, r3, r2, r3
 8002164:	095b      	lsrs	r3, r3, #5
 8002166:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800216a:	4498      	add	r8, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	469b      	mov	fp, r3
 8002170:	f04f 0c00 	mov.w	ip, #0
 8002174:	46d9      	mov	r9, fp
 8002176:	46e2      	mov	sl, ip
 8002178:	eb19 0309 	adds.w	r3, r9, r9
 800217c:	eb4a 040a 	adc.w	r4, sl, sl
 8002180:	4699      	mov	r9, r3
 8002182:	46a2      	mov	sl, r4
 8002184:	eb19 090b 	adds.w	r9, r9, fp
 8002188:	eb4a 0a0c 	adc.w	sl, sl, ip
 800218c:	f04f 0100 	mov.w	r1, #0
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002198:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800219c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021a0:	4689      	mov	r9, r1
 80021a2:	4692      	mov	sl, r2
 80021a4:	eb1b 0509 	adds.w	r5, fp, r9
 80021a8:	eb4c 060a 	adc.w	r6, ip, sl
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4619      	mov	r1, r3
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	f04f 0400 	mov.w	r4, #0
 80021be:	0094      	lsls	r4, r2, #2
 80021c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80021c4:	008b      	lsls	r3, r1, #2
 80021c6:	461a      	mov	r2, r3
 80021c8:	4623      	mov	r3, r4
 80021ca:	4628      	mov	r0, r5
 80021cc:	4631      	mov	r1, r6
 80021ce:	f7fe f86f 	bl	80002b0 <__aeabi_uldivmod>
 80021d2:	4603      	mov	r3, r0
 80021d4:	460c      	mov	r4, r1
 80021d6:	461a      	mov	r2, r3
 80021d8:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <UART_SetConfig+0x6f4>)
 80021da:	fba3 1302 	umull	r1, r3, r3, r2
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	2164      	movs	r1, #100	; 0x64
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	3332      	adds	r3, #50	; 0x32
 80021ec:	4a09      	ldr	r2, [pc, #36]	; (8002214 <UART_SetConfig+0x6f4>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	f003 020f 	and.w	r2, r3, #15
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4442      	add	r2, r8
 80021fe:	609a      	str	r2, [r3, #8]
}
 8002200:	e7ff      	b.n	8002202 <UART_SetConfig+0x6e2>
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800220c:	40011000 	.word	0x40011000
 8002210:	40011400 	.word	0x40011400
 8002214:	51eb851f 	.word	0x51eb851f

08002218 <CLI_Proc>:
 */
static void CLI_StringToLower(char *dst, const char *src);
	
	
	
void CLI_Proc(void){
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
	uint8_t count=0;
 800221e:	2300      	movs	r3, #0
 8002220:	71fb      	strb	r3, [r7, #7]
	
	if(CLI_StoreCommand()){
 8002222:	f000 f89f 	bl	8002364 <CLI_StoreCommand>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d02a      	beq.n	8002282 <CLI_Proc+0x6a>
		CLI_StringToLower(commandBuffer,commandBuffer);
 800222c:	4917      	ldr	r1, [pc, #92]	; (800228c <CLI_Proc+0x74>)
 800222e:	4817      	ldr	r0, [pc, #92]	; (800228c <CLI_Proc+0x74>)
 8002230:	f000 f86a 	bl	8002308 <CLI_StringToLower>
		
		while(commandBuffer[count]!=' '&&commandBuffer[count]!=0){
 8002234:	e002      	b.n	800223c <CLI_Proc+0x24>
			count++;
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	3301      	adds	r3, #1
 800223a:	71fb      	strb	r3, [r7, #7]
		while(commandBuffer[count]!=' '&&commandBuffer[count]!=0){
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	4a13      	ldr	r2, [pc, #76]	; (800228c <CLI_Proc+0x74>)
 8002240:	5cd3      	ldrb	r3, [r2, r3]
 8002242:	2b20      	cmp	r3, #32
 8002244:	d004      	beq.n	8002250 <CLI_Proc+0x38>
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	4a10      	ldr	r2, [pc, #64]	; (800228c <CLI_Proc+0x74>)
 800224a:	5cd3      	ldrb	r3, [r2, r3]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f2      	bne.n	8002236 <CLI_Proc+0x1e>
		}
		commandBuffer[count]=0;
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	4a0e      	ldr	r2, [pc, #56]	; (800228c <CLI_Proc+0x74>)
 8002254:	2100      	movs	r1, #0
 8002256:	54d1      	strb	r1, [r2, r3]
		
		if(CLI_GetMenuItemByCommandName(commandBuffer)==NULL){
 8002258:	480c      	ldr	r0, [pc, #48]	; (800228c <CLI_Proc+0x74>)
 800225a:	f000 f835 	bl	80022c8 <CLI_GetMenuItemByCommandName>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d103      	bne.n	800226c <CLI_Proc+0x54>
			USART_WriteString("No command\r\n");
 8002264:	480a      	ldr	r0, [pc, #40]	; (8002290 <CLI_Proc+0x78>)
 8002266:	f000 fb7d 	bl	8002964 <USART_WriteString>
		}else{
			CLI_GetMenuItemByCommandName(commandBuffer)->callback(commandBuffer+count+1);
		}
	}
	
}
 800226a:	e00a      	b.n	8002282 <CLI_Proc+0x6a>
			CLI_GetMenuItemByCommandName(commandBuffer)->callback(commandBuffer+count+1);
 800226c:	4807      	ldr	r0, [pc, #28]	; (800228c <CLI_Proc+0x74>)
 800226e:	f000 f82b 	bl	80022c8 <CLI_GetMenuItemByCommandName>
 8002272:	4603      	mov	r3, r0
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	79fa      	ldrb	r2, [r7, #7]
 8002278:	3201      	adds	r2, #1
 800227a:	4904      	ldr	r1, [pc, #16]	; (800228c <CLI_Proc+0x74>)
 800227c:	440a      	add	r2, r1
 800227e:	4610      	mov	r0, r2
 8002280:	4798      	blx	r3
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000240 	.word	0x20000240
 8002290:	08004c90 	.word	0x08004c90

08002294 <CLI_AddCommand>:

bool CLI_AddCommand(CLI_CommandItem *item){
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	
	if(!(item->callback==NULL /*&& *item->commandName==0*/)){
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <CLI_AddCommand+0x22>
		
	item->next=head;
 80022a4:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <CLI_AddCommand+0x30>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	60da      	str	r2, [r3, #12]
	head=item;
 80022ac:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <CLI_AddCommand+0x30>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6013      	str	r3, [r2, #0]
		
	}else{
		return false;
	}
	return true;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <CLI_AddCommand+0x24>
		return false;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	2000023c 	.word	0x2000023c

080022c8 <CLI_GetMenuItemByCommandName>:
		USART_WriteString(tmp->commandName);
		tmp=tmp->next;
	}
}

CLI_CommandItem* CLI_GetMenuItemByCommandName(char *command){
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	
	CLI_CommandItem *tmp = head;
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <CLI_GetMenuItemByCommandName+0x3c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60fb      	str	r3, [r7, #12]
	
	while(tmp){
 80022d6:	e00d      	b.n	80022f4 <CLI_GetMenuItemByCommandName+0x2c>
		if(!(strcmp(tmp->commandName,command))){
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fd ff7e 	bl	80001e0 <strcmp>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <CLI_GetMenuItemByCommandName+0x26>
			return tmp;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	e006      	b.n	80022fc <CLI_GetMenuItemByCommandName+0x34>
		}
		tmp=tmp->next;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	60fb      	str	r3, [r7, #12]
	while(tmp){
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1ee      	bne.n	80022d8 <CLI_GetMenuItemByCommandName+0x10>
	}
	
	return NULL;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	2000023c 	.word	0x2000023c

08002308 <CLI_StringToLower>:

void CLI_StringToLower(char *dst, const char *src){
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
	
	uint8_t i = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	73fb      	strb	r3, [r7, #15]
	 while( src[i] ) {
 8002316:	e01b      	b.n	8002350 <CLI_StringToLower+0x48>
      dst[i]=(tolower(src[i]));
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	4413      	add	r3, r2
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	73bb      	strb	r3, [r7, #14]
 8002322:	f000 fee3 	bl	80030ec <__locale_ctype_ptr>
 8002326:	4602      	mov	r2, r0
 8002328:	7bbb      	ldrb	r3, [r7, #14]
 800232a:	3301      	adds	r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	2b01      	cmp	r3, #1
 8002336:	d102      	bne.n	800233e <CLI_StringToLower+0x36>
 8002338:	7bbb      	ldrb	r3, [r7, #14]
 800233a:	3320      	adds	r3, #32
 800233c:	e000      	b.n	8002340 <CLI_StringToLower+0x38>
 800233e:	7bbb      	ldrb	r3, [r7, #14]
 8002340:	7bfa      	ldrb	r2, [r7, #15]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	440a      	add	r2, r1
 8002346:	b2db      	uxtb	r3, r3
 8002348:	7013      	strb	r3, [r2, #0]
      i++;
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	3301      	adds	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
	 while( src[i] ) {
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	4413      	add	r3, r2
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1dd      	bne.n	8002318 <CLI_StringToLower+0x10>
   }
	
}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <CLI_StoreCommand>:

bool CLI_StoreCommand(){
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
	char c;
	static uint8_t count=0;

	if(USART_GetChar(&c)){
 800236a:	1dfb      	adds	r3, r7, #7
 800236c:	4618      	mov	r0, r3
 800236e:	f000 fb0b 	bl	8002988 <USART_GetChar>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d036      	beq.n	80023e6 <CLI_StoreCommand+0x82>
		if(!(c=='\r')){
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	2b0d      	cmp	r3, #13
 800237c:	d024      	beq.n	80023c8 <CLI_StoreCommand+0x64>
			if(c==0x7F){
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	2b7f      	cmp	r3, #127	; 0x7f
 8002382:	d10f      	bne.n	80023a4 <CLI_StoreCommand+0x40>
				if(count>0){
 8002384:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <CLI_StoreCommand+0x8c>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d02c      	beq.n	80023e6 <CLI_StoreCommand+0x82>
				USART_WriteData(&c,1);
 800238c:	1dfb      	adds	r3, r7, #7
 800238e:	2101      	movs	r1, #1
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fa9f 	bl	80028d4 <USART_WriteData>
				count--;
 8002396:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <CLI_StoreCommand+0x8c>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	3b01      	subs	r3, #1
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <CLI_StoreCommand+0x8c>)
 80023a0:	701a      	strb	r2, [r3, #0]
 80023a2:	e020      	b.n	80023e6 <CLI_StoreCommand+0x82>
				}
			}else{
				USART_WriteData(&c,1);
 80023a4:	1dfb      	adds	r3, r7, #7
 80023a6:	2101      	movs	r1, #1
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fa93 	bl	80028d4 <USART_WriteData>
				commandBuffer[count]=c;
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <CLI_StoreCommand+0x8c>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	79f9      	ldrb	r1, [r7, #7]
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <CLI_StoreCommand+0x90>)
 80023b8:	5499      	strb	r1, [r3, r2]
				count++;
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <CLI_StoreCommand+0x8c>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	3301      	adds	r3, #1
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <CLI_StoreCommand+0x8c>)
 80023c4:	701a      	strb	r2, [r3, #0]
 80023c6:	e00e      	b.n	80023e6 <CLI_StoreCommand+0x82>
			}
		}else{
			USART_WriteData("\r\n",2);
 80023c8:	2102      	movs	r1, #2
 80023ca:	480b      	ldr	r0, [pc, #44]	; (80023f8 <CLI_StoreCommand+0x94>)
 80023cc:	f000 fa82 	bl	80028d4 <USART_WriteData>
			commandBuffer[count]=0;
 80023d0:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <CLI_StoreCommand+0x8c>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <CLI_StoreCommand+0x90>)
 80023d8:	2100      	movs	r1, #0
 80023da:	5499      	strb	r1, [r3, r2]
			count=0;
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <CLI_StoreCommand+0x8c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
			return true;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <CLI_StoreCommand+0x84>
		}
	}
	
	return false;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200002a4 	.word	0x200002a4
 80023f4:	20000240 	.word	0x20000240
 80023f8:	08004ca0 	.word	0x08004ca0

080023fc <Camera>:





void Camera(char *args){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
    if(strcmp(args, "on") == 0){
 8002404:	491c      	ldr	r1, [pc, #112]	; (8002478 <Camera+0x7c>)
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fd feea 	bl	80001e0 <strcmp>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d11e      	bne.n	8002450 <Camera+0x54>
        // turn the camera on
  	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002418:	4818      	ldr	r0, [pc, #96]	; (800247c <Camera+0x80>)
 800241a:	f7fe fbf1 	bl	8000c00 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002424:	4815      	ldr	r0, [pc, #84]	; (800247c <Camera+0x80>)
 8002426:	f7fe fbeb 	bl	8000c00 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002430:	4812      	ldr	r0, [pc, #72]	; (800247c <Camera+0x80>)
 8002432:	f7fe fbe5 	bl	8000c00 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8002436:	2200      	movs	r2, #0
 8002438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800243c:	480f      	ldr	r0, [pc, #60]	; (800247c <Camera+0x80>)
 800243e:	f7fe fbdf 	bl	8000c00 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 8002442:	2200      	movs	r2, #0
 8002444:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002448:	480c      	ldr	r0, [pc, #48]	; (800247c <Camera+0x80>)
 800244a:	f7fe fbd9 	bl	8000c00 <HAL_GPIO_WritePin>
        // turn the camera off
    	GPIOC->ODR = 0x7b00;
    } else {
        USART_WriteString("Unrecognized argument. Available arguments are \"on\" and \"off\"\n\r");
    }
}
 800244e:	e00e      	b.n	800246e <Camera+0x72>
    } else if(strcmp(args, "off") == 0){
 8002450:	490b      	ldr	r1, [pc, #44]	; (8002480 <Camera+0x84>)
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7fd fec4 	bl	80001e0 <strcmp>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d104      	bne.n	8002468 <Camera+0x6c>
    	GPIOC->ODR = 0x7b00;
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <Camera+0x80>)
 8002460:	f44f 42f6 	mov.w	r2, #31488	; 0x7b00
 8002464:	615a      	str	r2, [r3, #20]
}
 8002466:	e002      	b.n	800246e <Camera+0x72>
        USART_WriteString("Unrecognized argument. Available arguments are \"on\" and \"off\"\n\r");
 8002468:	4806      	ldr	r0, [pc, #24]	; (8002484 <Camera+0x88>)
 800246a:	f000 fa7b 	bl	8002964 <USART_WriteString>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	08004ca4 	.word	0x08004ca4
 800247c:	40020800 	.word	0x40020800
 8002480:	08004ca8 	.word	0x08004ca8
 8002484:	08004cac 	.word	0x08004cac

08002488 <Write>:

void Write(char *args){
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	//USART_WriteString(args);

    	int address=0;
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]
    	int data=0;
 8002494:	2300      	movs	r3, #0
 8002496:	60bb      	str	r3, [r7, #8]
    	sscanf(args, "%x%*c%x", &address, &data);
 8002498:	f107 0308 	add.w	r3, r7, #8
 800249c:	f107 020c 	add.w	r2, r7, #12
 80024a0:	4907      	ldr	r1, [pc, #28]	; (80024c0 <Write+0x38>)
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f001 f932 	bl	800370c <siscanf>
    	write((uint32_t)address,(uint8_t)data);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	461a      	mov	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	4619      	mov	r1, r3
 80024b2:	4610      	mov	r0, r2
 80024b4:	f000 f8c2 	bl	800263c <write>

}
 80024b8:	bf00      	nop
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	08004cec 	.word	0x08004cec

080024c4 <Read>:

void Read(char *args){
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b09e      	sub	sp, #120	; 0x78
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
//	USART_WriteString(args);

	    	int address=0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	673b      	str	r3, [r7, #112]	; 0x70
	     	uint8_t data;
	     	char str[100];
	     	sscanf(args, "%x", &address);
 80024d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024d4:	461a      	mov	r2, r3
 80024d6:	490e      	ldr	r1, [pc, #56]	; (8002510 <Read+0x4c>)
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f001 f917 	bl	800370c <siscanf>
	     	data = read((uint32_t)address);
 80024de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 f8dd 	bl	80026a0 <read>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	     	sprintf(str, "0x%02x\r\n", data);
 80024ec:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80024f0:	f107 030c 	add.w	r3, r7, #12
 80024f4:	4907      	ldr	r1, [pc, #28]	; (8002514 <Read+0x50>)
 80024f6:	4618      	mov	r0, r3
 80024f8:	f001 f8e8 	bl	80036cc <siprintf>
	     	USART_WriteString(str);
 80024fc:	f107 030c 	add.w	r3, r7, #12
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fa2f 	bl	8002964 <USART_WriteString>
}
 8002506:	bf00      	nop
 8002508:	3778      	adds	r7, #120	; 0x78
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	08004cf4 	.word	0x08004cf4
 8002514:	08004cf8 	.word	0x08004cf8

08002518 <init_commands>:


void init_commands(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
//***********************************************************************
	static CLI_CommandItem item_CAMERA = {.callback = Camera,
											.commandName = "camera",
											.description = NULL};
	if(CLI_AddCommand(&item_CAMERA) == false){
 800251c:	4812      	ldr	r0, [pc, #72]	; (8002568 <init_commands+0x50>)
 800251e:	f7ff feb9 	bl	8002294 <CLI_AddCommand>
 8002522:	4603      	mov	r3, r0
 8002524:	f083 0301 	eor.w	r3, r3, #1
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <init_commands+0x1c>
		USART_WriteString("ERROR in adding new item.\n\r");
 800252e:	480f      	ldr	r0, [pc, #60]	; (800256c <init_commands+0x54>)
 8002530:	f000 fa18 	bl	8002964 <USART_WriteString>
	}
//***********************************************************************
	static CLI_CommandItem item_write = {.callback = Write,
											.commandName = "write",
											.description = NULL};
	if(CLI_AddCommand(&item_write) == false){
 8002534:	480e      	ldr	r0, [pc, #56]	; (8002570 <init_commands+0x58>)
 8002536:	f7ff fead 	bl	8002294 <CLI_AddCommand>
 800253a:	4603      	mov	r3, r0
 800253c:	f083 0301 	eor.w	r3, r3, #1
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <init_commands+0x34>
		USART_WriteString("ERROR in adding new item.\n\r");
 8002546:	4809      	ldr	r0, [pc, #36]	; (800256c <init_commands+0x54>)
 8002548:	f000 fa0c 	bl	8002964 <USART_WriteString>
	}
//***********************************************************************
	static CLI_CommandItem item_read = {.callback = Read,
											.commandName = "read",
											.description = NULL};
	if(CLI_AddCommand(&item_read) == false){
 800254c:	4809      	ldr	r0, [pc, #36]	; (8002574 <init_commands+0x5c>)
 800254e:	f7ff fea1 	bl	8002294 <CLI_AddCommand>
 8002552:	4603      	mov	r3, r0
 8002554:	f083 0301 	eor.w	r3, r3, #1
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <init_commands+0x4c>
		USART_WriteString("ERROR in adding new item.\n\r");
 800255e:	4803      	ldr	r0, [pc, #12]	; (800256c <init_commands+0x54>)
 8002560:	f000 fa00 	bl	8002964 <USART_WriteString>
	}
//***********************************************************************


}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000008 	.word	0x20000008
 800256c:	08004d04 	.word	0x08004d04
 8002570:	20000018 	.word	0x20000018
 8002574:	20000028 	.word	0x20000028

08002578 <CORE_EnterCriticalSection>:
/* Includes ------------------------------------------------------------------*/
#include "core.h"
#include "main.h"


void CORE_EnterCriticalSection(void){	
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800257c:	b672      	cpsid	i
	__disable_irq();
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <CORE_ExitCriticalSection>:

void CORE_ExitCriticalSection(void) {
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800258c:	b662      	cpsie	i
	__enable_irq();
}
 800258e:	bf00      	nop
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <write_address>:
		.Mode = GPIO_MODE_OUTPUT_PP,
		.Pull = GPIO_NOPULL,
		.Speed = GPIO_SPEED_FREQ_LOW
};

void write_address(uint32_t address){
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]

	GPIOA->ODR = address&0xffff;
 80025a0:	4a09      	ldr	r2, [pc, #36]	; (80025c8 <write_address+0x30>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	6153      	str	r3, [r2, #20]
	HAL_GPIO_WritePin(A16_GPIO_Port, A16_Pin, (GPIO_PinState)((address>>16)&0x0001));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	0c1b      	lsrs	r3, r3, #16
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	2101      	movs	r1, #1
 80025b8:	4804      	ldr	r0, [pc, #16]	; (80025cc <write_address+0x34>)
 80025ba:	f7fe fb21 	bl	8000c00 <HAL_GPIO_WritePin>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40020000 	.word	0x40020000
 80025cc:	40020800 	.word	0x40020800

080025d0 <write_data>:

void write_data(uint8_t data){
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]


	if( DATA_InitStruct.Mode != GPIO_MODE_OUTPUT_PP){
 80025da:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <write_data+0x38>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d006      	beq.n	80025f0 <write_data+0x20>
		DATA_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <write_data+0x38>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	605a      	str	r2, [r3, #4]
		HAL_GPIO_Init(GPIOB, &DATA_InitStruct);
 80025e8:	4907      	ldr	r1, [pc, #28]	; (8002608 <write_data+0x38>)
 80025ea:	4808      	ldr	r0, [pc, #32]	; (800260c <write_data+0x3c>)
 80025ec:	f7fe f986 	bl	80008fc <HAL_GPIO_Init>
	}

	GPIOB->ODR = (GPIOB->ODR&0xff00)|data;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <write_data+0x3c>)
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	4904      	ldr	r1, [pc, #16]	; (800260c <write_data+0x3c>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	614b      	str	r3, [r1, #20]
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000038 	.word	0x20000038
 800260c:	40020400 	.word	0x40020400

08002610 <read_data>:

uint8_t read_data(void){
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0


	if( DATA_InitStruct.Mode != GPIO_MODE_INPUT){
 8002614:	4b07      	ldr	r3, [pc, #28]	; (8002634 <read_data+0x24>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d006      	beq.n	800262a <read_data+0x1a>
		DATA_InitStruct.Mode = GPIO_MODE_INPUT;
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <read_data+0x24>)
 800261e:	2200      	movs	r2, #0
 8002620:	605a      	str	r2, [r3, #4]
		HAL_GPIO_Init(GPIOB, &DATA_InitStruct);
 8002622:	4904      	ldr	r1, [pc, #16]	; (8002634 <read_data+0x24>)
 8002624:	4804      	ldr	r0, [pc, #16]	; (8002638 <read_data+0x28>)
 8002626:	f7fe f969 	bl	80008fc <HAL_GPIO_Init>
	}

	return (uint8_t)(GPIOB->IDR&0xff);
 800262a:	4b03      	ldr	r3, [pc, #12]	; (8002638 <read_data+0x28>)
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	b2db      	uxtb	r3, r3
}
 8002630:	4618      	mov	r0, r3
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000038 	.word	0x20000038
 8002638:	40020400 	.word	0x40020400

0800263c <write>:

void write(uint32_t address, uint8_t data){
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	70fb      	strb	r3, [r7, #3]
	write_address(address);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff ffa5 	bl	8002598 <write_address>
	//HAL_Delay(1);
	HAL_GPIO_WritePin(CE__GPIO_Port,CE__Pin, 0);
 800264e:	2200      	movs	r2, #0
 8002650:	2102      	movs	r1, #2
 8002652:	4812      	ldr	r0, [pc, #72]	; (800269c <write+0x60>)
 8002654:	f7fe fad4 	bl	8000c00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CE2_GPIO_Port,CE2_Pin, 1);
 8002658:	2201      	movs	r2, #1
 800265a:	2110      	movs	r1, #16
 800265c:	480f      	ldr	r0, [pc, #60]	; (800269c <write+0x60>)
 800265e:	f7fe facf 	bl	8000c00 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	HAL_GPIO_WritePin(WE__GPIO_Port,WE__Pin, 0);
 8002662:	2200      	movs	r2, #0
 8002664:	2108      	movs	r1, #8
 8002666:	480d      	ldr	r0, [pc, #52]	; (800269c <write+0x60>)
 8002668:	f7fe faca 	bl	8000c00 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	write_data(data);
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff ffae 	bl	80025d0 <write_data>
	//HAL_Delay(1);
	HAL_GPIO_WritePin(WE__GPIO_Port,WE__Pin, 1);
 8002674:	2201      	movs	r2, #1
 8002676:	2108      	movs	r1, #8
 8002678:	4808      	ldr	r0, [pc, #32]	; (800269c <write+0x60>)
 800267a:	f7fe fac1 	bl	8000c00 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	HAL_GPIO_WritePin(CE__GPIO_Port,CE__Pin, 1);
 800267e:	2201      	movs	r2, #1
 8002680:	2102      	movs	r1, #2
 8002682:	4806      	ldr	r0, [pc, #24]	; (800269c <write+0x60>)
 8002684:	f7fe fabc 	bl	8000c00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CE2_GPIO_Port,CE2_Pin, 0);
 8002688:	2200      	movs	r2, #0
 800268a:	2110      	movs	r1, #16
 800268c:	4803      	ldr	r0, [pc, #12]	; (800269c <write+0x60>)
 800268e:	f7fe fab7 	bl	8000c00 <HAL_GPIO_WritePin>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40020800 	.word	0x40020800

080026a0 <read>:

uint8_t read(uint32_t address){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	write_address(address);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff ff75 	bl	8002598 <write_address>
	//HAL_Delay(1);
	HAL_GPIO_WritePin(CE__GPIO_Port,CE__Pin, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2102      	movs	r1, #2
 80026b2:	4812      	ldr	r0, [pc, #72]	; (80026fc <read+0x5c>)
 80026b4:	f7fe faa4 	bl	8000c00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CE2_GPIO_Port,CE2_Pin, 1);
 80026b8:	2201      	movs	r2, #1
 80026ba:	2110      	movs	r1, #16
 80026bc:	480f      	ldr	r0, [pc, #60]	; (80026fc <read+0x5c>)
 80026be:	f7fe fa9f 	bl	8000c00 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	HAL_GPIO_WritePin(OE__GPIO_Port,OE__Pin, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2104      	movs	r1, #4
 80026c6:	480d      	ldr	r0, [pc, #52]	; (80026fc <read+0x5c>)
 80026c8:	f7fe fa9a 	bl	8000c00 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	uint8_t read = read_data();
 80026cc:	f7ff ffa0 	bl	8002610 <read_data>
 80026d0:	4603      	mov	r3, r0
 80026d2:	73fb      	strb	r3, [r7, #15]
	//HAL_Delay(1);
	HAL_GPIO_WritePin(CE__GPIO_Port,CE__Pin, 1);
 80026d4:	2201      	movs	r2, #1
 80026d6:	2102      	movs	r1, #2
 80026d8:	4808      	ldr	r0, [pc, #32]	; (80026fc <read+0x5c>)
 80026da:	f7fe fa91 	bl	8000c00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CE2_GPIO_Port,CE2_Pin, 0);
 80026de:	2200      	movs	r2, #0
 80026e0:	2110      	movs	r1, #16
 80026e2:	4806      	ldr	r0, [pc, #24]	; (80026fc <read+0x5c>)
 80026e4:	f7fe fa8c 	bl	8000c00 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	HAL_GPIO_WritePin(OE__GPIO_Port,OE__Pin, 1);
 80026e8:	2201      	movs	r2, #1
 80026ea:	2104      	movs	r1, #4
 80026ec:	4803      	ldr	r0, [pc, #12]	; (80026fc <read+0x5c>)
 80026ee:	f7fe fa87 	bl	8000c00 <HAL_GPIO_WritePin>

	return read;
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40020800 	.word	0x40020800

08002700 <RingBuffer_Init>:
        ;
    }
}

bool RingBuffer_Init(RingBuffer *ringBuffer, char *dataBuffer, size_t dataBufferSize) 
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
	assert(ringBuffer);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d105      	bne.n	800271e <RingBuffer_Init+0x1e>
 8002712:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <RingBuffer_Init+0x80>)
 8002714:	4a1b      	ldr	r2, [pc, #108]	; (8002784 <RingBuffer_Init+0x84>)
 8002716:	210f      	movs	r1, #15
 8002718:	481b      	ldr	r0, [pc, #108]	; (8002788 <RingBuffer_Init+0x88>)
 800271a:	f000 fc89 	bl	8003030 <__assert_func>
	assert(dataBuffer);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d105      	bne.n	8002730 <RingBuffer_Init+0x30>
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <RingBuffer_Init+0x8c>)
 8002726:	4a17      	ldr	r2, [pc, #92]	; (8002784 <RingBuffer_Init+0x84>)
 8002728:	2110      	movs	r1, #16
 800272a:	4817      	ldr	r0, [pc, #92]	; (8002788 <RingBuffer_Init+0x88>)
 800272c:	f000 fc80 	bl	8003030 <__assert_func>
	assert(dataBufferSize > 0);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d105      	bne.n	8002742 <RingBuffer_Init+0x42>
 8002736:	4b16      	ldr	r3, [pc, #88]	; (8002790 <RingBuffer_Init+0x90>)
 8002738:	4a12      	ldr	r2, [pc, #72]	; (8002784 <RingBuffer_Init+0x84>)
 800273a:	2111      	movs	r1, #17
 800273c:	4812      	ldr	r0, [pc, #72]	; (8002788 <RingBuffer_Init+0x88>)
 800273e:	f000 fc77 	bl	8003030 <__assert_func>
	
	if ((ringBuffer) && (dataBuffer) && (dataBufferSize > 0)) {
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d016      	beq.n	8002776 <RingBuffer_Init+0x76>
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d013      	beq.n	8002776 <RingBuffer_Init+0x76>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d010      	beq.n	8002776 <RingBuffer_Init+0x76>
	  
	  ringBuffer->ptr=dataBuffer;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	605a      	str	r2, [r3, #4]
	  ringBuffer->size=dataBufferSize;
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	601a      	str	r2, [r3, #0]
	  ringBuffer->head=0;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
	  ringBuffer->tail=0;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	60da      	str	r2, [r3, #12]
	  ringBuffer->count=0;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
	  return true;
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <RingBuffer_Init+0x78>
	}
	
	return false;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	08004d88 	.word	0x08004d88
 8002784:	08004de0 	.word	0x08004de0
 8002788:	08004d94 	.word	0x08004d94
 800278c:	08004db0 	.word	0x08004db0
 8002790:	08004dbc 	.word	0x08004dbc

08002794 <RingBuffer_PutChar>:
	return 0;	
}


bool RingBuffer_PutChar(RingBuffer *ringBuffer, char c)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	70fb      	strb	r3, [r7, #3]
	assert(ringBuffer);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <RingBuffer_PutChar+0x1e>
 80027a6:	4b19      	ldr	r3, [pc, #100]	; (800280c <RingBuffer_PutChar+0x78>)
 80027a8:	4a19      	ldr	r2, [pc, #100]	; (8002810 <RingBuffer_PutChar+0x7c>)
 80027aa:	214f      	movs	r1, #79	; 0x4f
 80027ac:	4819      	ldr	r0, [pc, #100]	; (8002814 <RingBuffer_PutChar+0x80>)
 80027ae:	f000 fc3f 	bl	8003030 <__assert_func>
	
	if (ringBuffer) {
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d023      	beq.n	8002800 <RingBuffer_PutChar+0x6c>
		if (ringBuffer->count < ringBuffer->size)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	da1d      	bge.n	8002800 <RingBuffer_PutChar+0x6c>
        {
          ringBuffer->ptr[ringBuffer->head] = c;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6892      	ldr	r2, [r2, #8]
 80027cc:	4413      	add	r3, r2
 80027ce:	78fa      	ldrb	r2, [r7, #3]
 80027d0:	701a      	strb	r2, [r3, #0]
          if(ringBuffer->head==ringBuffer->size-1) {
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3b01      	subs	r3, #1
 80027dc:	429a      	cmp	r2, r3
 80027de:	d103      	bne.n	80027e8 <RingBuffer_PutChar+0x54>
						ringBuffer->head=0;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	e004      	b.n	80027f2 <RingBuffer_PutChar+0x5e>
					} else {
						ringBuffer->head++;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	609a      	str	r2, [r3, #8]
					}          
          ++ringBuffer->count;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	611a      	str	r2, [r3, #16]
          return true;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <RingBuffer_PutChar+0x6e>
        }
	}
	return false;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	08004d88 	.word	0x08004d88
 8002810:	08004df0 	.word	0x08004df0
 8002814:	08004d94 	.word	0x08004d94

08002818 <RingBuffer_GetChar>:

bool RingBuffer_GetChar(RingBuffer *ringBuffer, char *c)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
	assert(ringBuffer);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <RingBuffer_GetChar+0x1c>
 8002828:	4b1e      	ldr	r3, [pc, #120]	; (80028a4 <RingBuffer_GetChar+0x8c>)
 800282a:	4a1f      	ldr	r2, [pc, #124]	; (80028a8 <RingBuffer_GetChar+0x90>)
 800282c:	2163      	movs	r1, #99	; 0x63
 800282e:	481f      	ldr	r0, [pc, #124]	; (80028ac <RingBuffer_GetChar+0x94>)
 8002830:	f000 fbfe 	bl	8003030 <__assert_func>
	assert(c);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d105      	bne.n	8002846 <RingBuffer_GetChar+0x2e>
 800283a:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <RingBuffer_GetChar+0x98>)
 800283c:	4a1a      	ldr	r2, [pc, #104]	; (80028a8 <RingBuffer_GetChar+0x90>)
 800283e:	2164      	movs	r1, #100	; 0x64
 8002840:	481a      	ldr	r0, [pc, #104]	; (80028ac <RingBuffer_GetChar+0x94>)
 8002842:	f000 fbf5 	bl	8003030 <__assert_func>
	
  if ((ringBuffer) && (c)) {
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d025      	beq.n	8002898 <RingBuffer_GetChar+0x80>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d022      	beq.n	8002898 <RingBuffer_GetChar+0x80>
    if (ringBuffer->count>0)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2b00      	cmp	r3, #0
 8002858:	dd1e      	ble.n	8002898 <RingBuffer_GetChar+0x80>
    {
      *c = ringBuffer->ptr[ringBuffer->tail];
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68d2      	ldr	r2, [r2, #12]
 8002862:	4413      	add	r3, r2
 8002864:	781a      	ldrb	r2, [r3, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	701a      	strb	r2, [r3, #0]
       if(ringBuffer->tail==ringBuffer->size-1) {
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3b01      	subs	r3, #1
 8002874:	429a      	cmp	r2, r3
 8002876:	d103      	bne.n	8002880 <RingBuffer_GetChar+0x68>
				 ringBuffer->tail=0;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	e004      	b.n	800288a <RingBuffer_GetChar+0x72>
			 } else {
				 ringBuffer->tail++;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	60da      	str	r2, [r3, #12]
			 }
      --ringBuffer->count;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	1e5a      	subs	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	611a      	str	r2, [r3, #16]
			return true;
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <RingBuffer_GetChar+0x82>
    }		
	}
	return false;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	08004d88 	.word	0x08004d88
 80028a8:	08004e04 	.word	0x08004e04
 80028ac:	08004d94 	.word	0x08004d94
 80028b0:	08004dd0 	.word	0x08004dd0

080028b4 <_write>:
// UART receive buffer descriptor
static RingBuffer USART_RingBuffer_Rx;
// UART receive buffer memory pool
static char RingBufferData_Rx[1024];

int _write(int file, char *ptr, int len) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
	USART_WriteData(ptr,len);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4619      	mov	r1, r3
 80028c4:	68b8      	ldr	r0, [r7, #8]
 80028c6:	f000 f805 	bl	80028d4 <USART_WriteData>
	return len;
 80028ca:	687b      	ldr	r3, [r7, #4]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <USART_WriteData>:

size_t USART_WriteData(const void *data, size_t dataSize){
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
	size_t i = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
	
	static char c;


	for(;i<dataSize;i++)
 80028e2:	e018      	b.n	8002916 <USART_WriteData+0x42>
	{
		
		CORE_EnterCriticalSection();
 80028e4:	f7ff fe48 	bl	8002578 <CORE_EnterCriticalSection>
		if(!RingBuffer_PutChar(&USART_RingBuffer_Tx, *((char*)data+i)) ) {
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4413      	add	r3, r2
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	4619      	mov	r1, r3
 80028f2:	4818      	ldr	r0, [pc, #96]	; (8002954 <USART_WriteData+0x80>)
 80028f4:	f7ff ff4e 	bl	8002794 <RingBuffer_PutChar>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f083 0301 	eor.w	r3, r3, #1
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <USART_WriteData+0x38>
			CORE_ExitCriticalSection();
 8002904:	f7ff fe40 	bl	8002588 <CORE_ExitCriticalSection>
			return false;
 8002908:	2300      	movs	r3, #0
 800290a:	e01e      	b.n	800294a <USART_WriteData+0x76>
		}
		CORE_ExitCriticalSection();
 800290c:	f7ff fe3c 	bl	8002588 <CORE_ExitCriticalSection>
	for(;i<dataSize;i++)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	3301      	adds	r3, #1
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d3e2      	bcc.n	80028e4 <USART_WriteData+0x10>
	}
	CORE_EnterCriticalSection();
 800291e:	f7ff fe2b 	bl	8002578 <CORE_EnterCriticalSection>
	if(!flag){
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <USART_WriteData+0x84>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10b      	bne.n	8002944 <USART_WriteData+0x70>
		RingBuffer_GetChar(&USART_RingBuffer_Tx, &c );
 800292c:	490b      	ldr	r1, [pc, #44]	; (800295c <USART_WriteData+0x88>)
 800292e:	4809      	ldr	r0, [pc, #36]	; (8002954 <USART_WriteData+0x80>)
 8002930:	f7ff ff72 	bl	8002818 <RingBuffer_GetChar>
		HAL_UART_Transmit_IT(&HUARTx, &c,1);
 8002934:	2201      	movs	r2, #1
 8002936:	4909      	ldr	r1, [pc, #36]	; (800295c <USART_WriteData+0x88>)
 8002938:	4809      	ldr	r0, [pc, #36]	; (8002960 <USART_WriteData+0x8c>)
 800293a:	f7fe fe2a 	bl	8001592 <HAL_UART_Transmit_IT>
		flag=1;
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <USART_WriteData+0x84>)
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]
	}
	CORE_ExitCriticalSection();
 8002944:	f7ff fe20 	bl	8002588 <CORE_ExitCriticalSection>
	return i;
 8002948:	68fb      	ldr	r3, [r7, #12]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	200002a8 	.word	0x200002a8
 8002958:	200002a6 	.word	0x200002a6
 800295c:	20000ad0 	.word	0x20000ad0
 8002960:	20000ae4 	.word	0x20000ae4

08002964 <USART_WriteString>:


size_t USART_WriteString(const char *string){
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	return USART_WriteData(string, strlen(string));
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7fd fc41 	bl	80001f4 <strlen>
 8002972:	4603      	mov	r3, r0
 8002974:	4619      	mov	r1, r3
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff ffac 	bl	80028d4 <USART_WriteData>
 800297c:	4603      	mov	r3, r0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <USART_GetChar>:


bool USART_GetChar(char *c){
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	
	CORE_EnterCriticalSection();
 8002990:	f7ff fdf2 	bl	8002578 <CORE_EnterCriticalSection>
	if(!RingBuffer_GetChar(&USART_RingBuffer_Rx, c )) {
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	480a      	ldr	r0, [pc, #40]	; (80029c0 <USART_GetChar+0x38>)
 8002998:	f7ff ff3e 	bl	8002818 <RingBuffer_GetChar>
 800299c:	4603      	mov	r3, r0
 800299e:	f083 0301 	eor.w	r3, r3, #1
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <USART_GetChar+0x28>
		CORE_ExitCriticalSection();
 80029a8:	f7ff fdee 	bl	8002588 <CORE_ExitCriticalSection>
		return false;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e002      	b.n	80029b6 <USART_GetChar+0x2e>
	}
	CORE_ExitCriticalSection();
 80029b0:	f7ff fdea 	bl	8002588 <CORE_ExitCriticalSection>
	
	return true;
 80029b4:	2301      	movs	r3, #1
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	200006bc 	.word	0x200006bc

080029c4 <HAL_UART_RxCpltCallback>:
		CORE_ExitCriticalSection();	
	}
	return i;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

	if(huart->Instance==HUARTx.Instance){
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_UART_RxCpltCallback+0x34>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d10b      	bne.n	80029f0 <HAL_UART_RxCpltCallback+0x2c>

		RingBuffer_PutChar(&USART_RingBuffer_Rx, rcv_char);
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <HAL_UART_RxCpltCallback+0x38>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	4619      	mov	r1, r3
 80029e0:	4807      	ldr	r0, [pc, #28]	; (8002a00 <HAL_UART_RxCpltCallback+0x3c>)
 80029e2:	f7ff fed7 	bl	8002794 <RingBuffer_PutChar>
		HAL_UART_Receive_IT(&HUARTx,&rcv_char,1);
 80029e6:	2201      	movs	r2, #1
 80029e8:	4904      	ldr	r1, [pc, #16]	; (80029fc <HAL_UART_RxCpltCallback+0x38>)
 80029ea:	4803      	ldr	r0, [pc, #12]	; (80029f8 <HAL_UART_RxCpltCallback+0x34>)
 80029ec:	f7fe fe16 	bl	800161c <HAL_UART_Receive_IT>

	}

}
 80029f0:	bf00      	nop
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20000ae4 	.word	0x20000ae4
 80029fc:	200002a5 	.word	0x200002a5
 8002a00:	200006bc 	.word	0x200006bc

08002a04 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

	if(huart->Instance==HUARTx.Instance){
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b0d      	ldr	r3, [pc, #52]	; (8002a48 <HAL_UART_TxCpltCallback+0x44>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d112      	bne.n	8002a3e <HAL_UART_TxCpltCallback+0x3a>
		static char c;

		if(RingBuffer_GetChar(&USART_RingBuffer_Tx, &c) == true)
 8002a18:	490c      	ldr	r1, [pc, #48]	; (8002a4c <HAL_UART_TxCpltCallback+0x48>)
 8002a1a:	480d      	ldr	r0, [pc, #52]	; (8002a50 <HAL_UART_TxCpltCallback+0x4c>)
 8002a1c:	f7ff fefc 	bl	8002818 <RingBuffer_GetChar>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_UART_TxCpltCallback+0x34>
		{
			//c=*"a";
			HAL_UART_Transmit_IT(&HUARTx, &c,1);
 8002a26:	2201      	movs	r2, #1
 8002a28:	4908      	ldr	r1, [pc, #32]	; (8002a4c <HAL_UART_TxCpltCallback+0x48>)
 8002a2a:	4807      	ldr	r0, [pc, #28]	; (8002a48 <HAL_UART_TxCpltCallback+0x44>)
 8002a2c:	f7fe fdb1 	bl	8001592 <HAL_UART_Transmit_IT>
			flag=1;
 8002a30:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <HAL_UART_TxCpltCallback+0x50>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]
		}else flag=0;

	}

}
 8002a36:	e002      	b.n	8002a3e <HAL_UART_TxCpltCallback+0x3a>
		}else flag=0;
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_UART_TxCpltCallback+0x50>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000ae4 	.word	0x20000ae4
 8002a4c:	20000ad1 	.word	0x20000ad1
 8002a50:	200002a8 	.word	0x200002a8
 8002a54:	200002a6 	.word	0x200002a6

08002a58 <USART_Init>:


/**
  * This function initialize ring buffers, USART device and enable receive interrupt.  
  */
void USART_Init(void){
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
	// initialize ring buffers
	RingBuffer_Init(&USART_RingBuffer_Tx, RingBufferData_Tx, sizeof(RingBufferData_Tx));
 8002a5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a60:	4908      	ldr	r1, [pc, #32]	; (8002a84 <USART_Init+0x2c>)
 8002a62:	4809      	ldr	r0, [pc, #36]	; (8002a88 <USART_Init+0x30>)
 8002a64:	f7ff fe4c 	bl	8002700 <RingBuffer_Init>
	RingBuffer_Init(&USART_RingBuffer_Rx, RingBufferData_Rx, sizeof(RingBufferData_Rx));
 8002a68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a6c:	4907      	ldr	r1, [pc, #28]	; (8002a8c <USART_Init+0x34>)
 8002a6e:	4808      	ldr	r0, [pc, #32]	; (8002a90 <USART_Init+0x38>)
 8002a70:	f7ff fe46 	bl	8002700 <RingBuffer_Init>
	
	HAL_UART_Receive_IT(&HUARTx,&rcv_char,1);
 8002a74:	2201      	movs	r2, #1
 8002a76:	4907      	ldr	r1, [pc, #28]	; (8002a94 <USART_Init+0x3c>)
 8002a78:	4807      	ldr	r0, [pc, #28]	; (8002a98 <USART_Init+0x40>)
 8002a7a:	f7fe fdcf 	bl	800161c <HAL_UART_Receive_IT>


}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	200002bc 	.word	0x200002bc
 8002a88:	200002a8 	.word	0x200002a8
 8002a8c:	200006d0 	.word	0x200006d0
 8002a90:	200006bc 	.word	0x200006bc
 8002a94:	200002a5 	.word	0x200002a5
 8002a98:	20000ae4 	.word	0x20000ae4

08002a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aa0:	f7fd fd86 	bl	80005b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002aa4:	f000 f80c 	bl	8002ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002aa8:	f000 f89e 	bl	8002be8 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8002aac:	f000 f872 	bl	8002b94 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  USART_Init();
 8002ab0:	f7ff ffd2 	bl	8002a58 <USART_Init>
  init_commands();
 8002ab4:	f7ff fd30 	bl	8002518 <init_commands>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  CLI_Proc();
 8002ab8:	f7ff fbae 	bl	8002218 <CLI_Proc>
 8002abc:	e7fc      	b.n	8002ab8 <main+0x1c>
	...

08002ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b094      	sub	sp, #80	; 0x50
 8002ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ac6:	f107 0320 	add.w	r3, r7, #32
 8002aca:	2230      	movs	r2, #48	; 0x30
 8002acc:	2100      	movs	r1, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 fb2c 	bl	800312c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ad4:	f107 030c 	add.w	r3, r7, #12
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	4b28      	ldr	r3, [pc, #160]	; (8002b8c <SystemClock_Config+0xcc>)
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	4a27      	ldr	r2, [pc, #156]	; (8002b8c <SystemClock_Config+0xcc>)
 8002aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af2:	6413      	str	r3, [r2, #64]	; 0x40
 8002af4:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <SystemClock_Config+0xcc>)
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b00:	2300      	movs	r3, #0
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	4b22      	ldr	r3, [pc, #136]	; (8002b90 <SystemClock_Config+0xd0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a21      	ldr	r2, [pc, #132]	; (8002b90 <SystemClock_Config+0xd0>)
 8002b0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <SystemClock_Config+0xd0>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b20:	2301      	movs	r3, #1
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b24:	2310      	movs	r3, #16
 8002b26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002b30:	2310      	movs	r3, #16
 8002b32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002b34:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002b38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b3e:	2304      	movs	r3, #4
 8002b40:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b42:	f107 0320 	add.w	r3, r7, #32
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe f874 	bl	8000c34 <HAL_RCC_OscConfig>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002b52:	f000 f8d5 	bl	8002d00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b56:	230f      	movs	r3, #15
 8002b58:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b6c:	f107 030c 	add.w	r3, r7, #12
 8002b70:	2102      	movs	r1, #2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe face 	bl	8001114 <HAL_RCC_ClockConfig>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002b7e:	f000 f8bf 	bl	8002d00 <Error_Handler>
  }
}
 8002b82:	bf00      	nop
 8002b84:	3750      	adds	r7, #80	; 0x50
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40007000 	.word	0x40007000

08002b94 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <MX_USART6_UART_Init+0x4c>)
 8002b9a:	4a12      	ldr	r2, [pc, #72]	; (8002be4 <MX_USART6_UART_Init+0x50>)
 8002b9c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002b9e:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <MX_USART6_UART_Init+0x4c>)
 8002ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ba4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <MX_USART6_UART_Init+0x4c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <MX_USART6_UART_Init+0x4c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <MX_USART6_UART_Init+0x4c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <MX_USART6_UART_Init+0x4c>)
 8002bba:	220c      	movs	r2, #12
 8002bbc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bbe:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <MX_USART6_UART_Init+0x4c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <MX_USART6_UART_Init+0x4c>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002bca:	4805      	ldr	r0, [pc, #20]	; (8002be0 <MX_USART6_UART_Init+0x4c>)
 8002bcc:	f7fe fc94 	bl	80014f8 <HAL_UART_Init>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002bd6:	f000 f893 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000ae4 	.word	0x20000ae4
 8002be4:	40011400 	.word	0x40011400

08002be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bee:	f107 030c 	add.w	r3, r7, #12
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	609a      	str	r2, [r3, #8]
 8002bfa:	60da      	str	r2, [r3, #12]
 8002bfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	4b3b      	ldr	r3, [pc, #236]	; (8002cf0 <MX_GPIO_Init+0x108>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	4a3a      	ldr	r2, [pc, #232]	; (8002cf0 <MX_GPIO_Init+0x108>)
 8002c08:	f043 0304 	orr.w	r3, r3, #4
 8002c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0e:	4b38      	ldr	r3, [pc, #224]	; (8002cf0 <MX_GPIO_Init+0x108>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	4b34      	ldr	r3, [pc, #208]	; (8002cf0 <MX_GPIO_Init+0x108>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a33      	ldr	r2, [pc, #204]	; (8002cf0 <MX_GPIO_Init+0x108>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b31      	ldr	r3, [pc, #196]	; (8002cf0 <MX_GPIO_Init+0x108>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	603b      	str	r3, [r7, #0]
 8002c3a:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <MX_GPIO_Init+0x108>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a2c      	ldr	r2, [pc, #176]	; (8002cf0 <MX_GPIO_Init+0x108>)
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b2a      	ldr	r3, [pc, #168]	; (8002cf0 <MX_GPIO_Init+0x108>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED4_Pin|LED5_Pin|A16_Pin|CE__Pin 
 8002c52:	2200      	movs	r2, #0
 8002c54:	f647 411f 	movw	r1, #31775	; 0x7c1f
 8002c58:	4826      	ldr	r0, [pc, #152]	; (8002cf4 <MX_GPIO_Init+0x10c>)
 8002c5a:	f7fd ffd1 	bl	8000c00 <HAL_GPIO_WritePin>
                          |OE__Pin|WE__Pin|CE2_Pin|LED1_Pin 
                          |LED2_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c64:	4824      	ldr	r0, [pc, #144]	; (8002cf8 <MX_GPIO_Init+0x110>)
 8002c66:	f7fd ffcb 	bl	8000c00 <HAL_GPIO_WritePin>
                          |A4_Pin|A5_Pin|A6_Pin|A7_Pin 
                          |A8_Pin|A9_Pin|A10_Pin|A11_Pin 
                          |A12_Pin|A13_Pin|A14_Pin|A15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DQ0_Pin|DQ1_Pin|DQ2_Pin|DQ3_Pin 
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	21ff      	movs	r1, #255	; 0xff
 8002c6e:	4823      	ldr	r0, [pc, #140]	; (8002cfc <MX_GPIO_Init+0x114>)
 8002c70:	f7fd ffc6 	bl	8000c00 <HAL_GPIO_WritePin>
                          |DQ4_Pin|DQ5_Pin|DQ6_Pin|DQ7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED4_Pin LED5_Pin A16_Pin CE__Pin 
                           OE__Pin WE__Pin CE2_Pin LED1_Pin 
                           LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin|A16_Pin|CE__Pin 
 8002c74:	f647 431f 	movw	r3, #31775	; 0x7c1f
 8002c78:	60fb      	str	r3, [r7, #12]
                          |OE__Pin|WE__Pin|CE2_Pin|LED1_Pin 
                          |LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c86:	f107 030c 	add.w	r3, r7, #12
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4819      	ldr	r0, [pc, #100]	; (8002cf4 <MX_GPIO_Init+0x10c>)
 8002c8e:	f7fd fe35 	bl	80008fc <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin 
                           A4_Pin A5_Pin A6_Pin A7_Pin 
                           A8_Pin A9_Pin A10_Pin A11_Pin 
                           A12_Pin A13_Pin A14_Pin A15_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8002c92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c96:	60fb      	str	r3, [r7, #12]
                          |A4_Pin|A5_Pin|A6_Pin|A7_Pin 
                          |A8_Pin|A9_Pin|A10_Pin|A11_Pin 
                          |A12_Pin|A13_Pin|A14_Pin|A15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca4:	f107 030c 	add.w	r3, r7, #12
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4813      	ldr	r0, [pc, #76]	; (8002cf8 <MX_GPIO_Init+0x110>)
 8002cac:	f7fd fe26 	bl	80008fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW4_Pin SW5_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW4_Pin|SW5_Pin;
 8002cb0:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002cb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cbe:	f107 030c 	add.w	r3, r7, #12
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	480b      	ldr	r0, [pc, #44]	; (8002cf4 <MX_GPIO_Init+0x10c>)
 8002cc6:	f7fd fe19 	bl	80008fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DQ0_Pin DQ1_Pin DQ2_Pin DQ3_Pin 
                           DQ4_Pin DQ5_Pin DQ6_Pin DQ7_Pin */
  GPIO_InitStruct.Pin = DQ0_Pin|DQ1_Pin|DQ2_Pin|DQ3_Pin 
 8002cca:	23ff      	movs	r3, #255	; 0xff
 8002ccc:	60fb      	str	r3, [r7, #12]
                          |DQ4_Pin|DQ5_Pin|DQ6_Pin|DQ7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cda:	f107 030c 	add.w	r3, r7, #12
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4806      	ldr	r0, [pc, #24]	; (8002cfc <MX_GPIO_Init+0x114>)
 8002ce2:	f7fd fe0b 	bl	80008fc <HAL_GPIO_Init>

}
 8002ce6:	bf00      	nop
 8002ce8:	3720      	adds	r7, #32
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40020800 	.word	0x40020800
 8002cf8:	40020000 	.word	0x40020000
 8002cfc:	40020400 	.word	0x40020400

08002d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	607b      	str	r3, [r7, #4]
 8002d1a:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <HAL_MspInit+0x4c>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	4a0f      	ldr	r2, [pc, #60]	; (8002d5c <HAL_MspInit+0x4c>)
 8002d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d24:	6453      	str	r3, [r2, #68]	; 0x44
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HAL_MspInit+0x4c>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_MspInit+0x4c>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a08      	ldr	r2, [pc, #32]	; (8002d5c <HAL_MspInit+0x4c>)
 8002d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <HAL_MspInit+0x4c>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d4e:	2007      	movs	r0, #7
 8002d50:	f7fd fd70 	bl	8000834 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40023800 	.word	0x40023800

08002d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0314 	add.w	r3, r7, #20
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1d      	ldr	r2, [pc, #116]	; (8002df4 <HAL_UART_MspInit+0x94>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d133      	bne.n	8002dea <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	4b1c      	ldr	r3, [pc, #112]	; (8002df8 <HAL_UART_MspInit+0x98>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	4a1b      	ldr	r2, [pc, #108]	; (8002df8 <HAL_UART_MspInit+0x98>)
 8002d8c:	f043 0320 	orr.w	r3, r3, #32
 8002d90:	6453      	str	r3, [r2, #68]	; 0x44
 8002d92:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <HAL_UART_MspInit+0x98>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <HAL_UART_MspInit+0x98>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a14      	ldr	r2, [pc, #80]	; (8002df8 <HAL_UART_MspInit+0x98>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <HAL_UART_MspInit+0x98>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dba:	23c0      	movs	r3, #192	; 0xc0
 8002dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002dca:	2308      	movs	r3, #8
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dce:	f107 0314 	add.w	r3, r7, #20
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4809      	ldr	r0, [pc, #36]	; (8002dfc <HAL_UART_MspInit+0x9c>)
 8002dd6:	f7fd fd91 	bl	80008fc <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2100      	movs	r1, #0
 8002dde:	2047      	movs	r0, #71	; 0x47
 8002de0:	f7fd fd33 	bl	800084a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002de4:	2047      	movs	r0, #71	; 0x47
 8002de6:	f7fd fd4c 	bl	8000882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002dea:	bf00      	nop
 8002dec:	3728      	adds	r7, #40	; 0x28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40011400 	.word	0x40011400
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40020800 	.word	0x40020800

08002e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e12:	e7fe      	b.n	8002e12 <HardFault_Handler+0x4>

08002e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e18:	e7fe      	b.n	8002e18 <MemManage_Handler+0x4>

08002e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e1e:	e7fe      	b.n	8002e1e <BusFault_Handler+0x4>

08002e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e24:	e7fe      	b.n	8002e24 <UsageFault_Handler+0x4>

08002e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e54:	f7fd fbfe 	bl	8000654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002e60:	4802      	ldr	r0, [pc, #8]	; (8002e6c <USART6_IRQHandler+0x10>)
 8002e62:	f7fe fc31 	bl	80016c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000ae4 	.word	0x20000ae4

08002e70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
	return 1;
 8002e74:	2301      	movs	r3, #1
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <_kill>:

int _kill(int pid, int sig)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e8a:	f000 f8ef 	bl	800306c <__errno>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	2316      	movs	r3, #22
 8002e92:	6013      	str	r3, [r2, #0]
	return -1;
 8002e94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <_exit>:

void _exit (int status)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff ffe7 	bl	8002e80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002eb2:	e7fe      	b.n	8002eb2 <_exit+0x12>

08002eb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	e00a      	b.n	8002edc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ec6:	f3af 8000 	nop.w
 8002eca:	4601      	mov	r1, r0
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	60ba      	str	r2, [r7, #8]
 8002ed2:	b2ca      	uxtb	r2, r1
 8002ed4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	dbf0      	blt.n	8002ec6 <_read+0x12>
	}

return len;
 8002ee4:	687b      	ldr	r3, [r7, #4]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <_close>:
	}
	return len;
}

int _close(int file)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
	return -1;
 8002ef6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f16:	605a      	str	r2, [r3, #4]
	return 0;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <_isatty>:

int _isatty(int file)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
	return 1;
 8002f2e:	2301      	movs	r3, #1
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
	return 0;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
	...

08002f58 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <_sbrk+0x50>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <_sbrk+0x16>
		heap_end = &end;
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <_sbrk+0x50>)
 8002f6a:	4a10      	ldr	r2, [pc, #64]	; (8002fac <_sbrk+0x54>)
 8002f6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <_sbrk+0x50>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <_sbrk+0x50>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	466a      	mov	r2, sp
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d907      	bls.n	8002f92 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002f82:	f000 f873 	bl	800306c <__errno>
 8002f86:	4602      	mov	r2, r0
 8002f88:	230c      	movs	r3, #12
 8002f8a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f90:	e006      	b.n	8002fa0 <_sbrk+0x48>
	}

	heap_end += incr;
 8002f92:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <_sbrk+0x50>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	4a03      	ldr	r2, [pc, #12]	; (8002fa8 <_sbrk+0x50>)
 8002f9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000ad4 	.word	0x20000ad4
 8002fac:	20000b28 	.word	0x20000b28

08002fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fb4:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <SystemInit+0x28>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fba:	4a07      	ldr	r2, [pc, #28]	; (8002fd8 <SystemInit+0x28>)
 8002fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <SystemInit+0x28>)
 8002fc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fca:	609a      	str	r2, [r3, #8]
#endif
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003014 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002fe0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002fe2:	e003      	b.n	8002fec <LoopCopyDataInit>

08002fe4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002fe6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002fe8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002fea:	3104      	adds	r1, #4

08002fec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002fec:	480b      	ldr	r0, [pc, #44]	; (800301c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002fee:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ff0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ff2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ff4:	d3f6      	bcc.n	8002fe4 <CopyDataInit>
  ldr  r2, =_sbss
 8002ff6:	4a0b      	ldr	r2, [pc, #44]	; (8003024 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ff8:	e002      	b.n	8003000 <LoopFillZerobss>

08002ffa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ffa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ffc:	f842 3b04 	str.w	r3, [r2], #4

08003000 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003002:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003004:	d3f9      	bcc.n	8002ffa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003006:	f7ff ffd3 	bl	8002fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800300a:	f000 f847 	bl	800309c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800300e:	f7ff fd45 	bl	8002a9c <main>
  bx  lr    
 8003012:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003014:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003018:	0800503c 	.word	0x0800503c
  ldr  r0, =_sdata
 800301c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003020:	20000220 	.word	0x20000220
  ldr  r2, =_sbss
 8003024:	20000220 	.word	0x20000220
  ldr  r3, = _ebss
 8003028:	20000b28 	.word	0x20000b28

0800302c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800302c:	e7fe      	b.n	800302c <ADC_IRQHandler>
	...

08003030 <__assert_func>:
 8003030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003032:	461c      	mov	r4, r3
 8003034:	4b09      	ldr	r3, [pc, #36]	; (800305c <__assert_func+0x2c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4605      	mov	r5, r0
 800303a:	68d8      	ldr	r0, [r3, #12]
 800303c:	b152      	cbz	r2, 8003054 <__assert_func+0x24>
 800303e:	4b08      	ldr	r3, [pc, #32]	; (8003060 <__assert_func+0x30>)
 8003040:	9100      	str	r1, [sp, #0]
 8003042:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003046:	4907      	ldr	r1, [pc, #28]	; (8003064 <__assert_func+0x34>)
 8003048:	462b      	mov	r3, r5
 800304a:	4622      	mov	r2, r4
 800304c:	f000 f814 	bl	8003078 <fiprintf>
 8003050:	f000 fcac 	bl	80039ac <abort>
 8003054:	4b04      	ldr	r3, [pc, #16]	; (8003068 <__assert_func+0x38>)
 8003056:	461a      	mov	r2, r3
 8003058:	e7f2      	b.n	8003040 <__assert_func+0x10>
 800305a:	bf00      	nop
 800305c:	20000050 	.word	0x20000050
 8003060:	08004e30 	.word	0x08004e30
 8003064:	08004e3d 	.word	0x08004e3d
 8003068:	08004e6b 	.word	0x08004e6b

0800306c <__errno>:
 800306c:	4b01      	ldr	r3, [pc, #4]	; (8003074 <__errno+0x8>)
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	20000050 	.word	0x20000050

08003078 <fiprintf>:
 8003078:	b40e      	push	{r1, r2, r3}
 800307a:	b503      	push	{r0, r1, lr}
 800307c:	4601      	mov	r1, r0
 800307e:	ab03      	add	r3, sp, #12
 8003080:	4805      	ldr	r0, [pc, #20]	; (8003098 <fiprintf+0x20>)
 8003082:	f853 2b04 	ldr.w	r2, [r3], #4
 8003086:	6800      	ldr	r0, [r0, #0]
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	f000 f881 	bl	8003190 <_vfiprintf_r>
 800308e:	b002      	add	sp, #8
 8003090:	f85d eb04 	ldr.w	lr, [sp], #4
 8003094:	b003      	add	sp, #12
 8003096:	4770      	bx	lr
 8003098:	20000050 	.word	0x20000050

0800309c <__libc_init_array>:
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	4e0d      	ldr	r6, [pc, #52]	; (80030d4 <__libc_init_array+0x38>)
 80030a0:	4c0d      	ldr	r4, [pc, #52]	; (80030d8 <__libc_init_array+0x3c>)
 80030a2:	1ba4      	subs	r4, r4, r6
 80030a4:	10a4      	asrs	r4, r4, #2
 80030a6:	2500      	movs	r5, #0
 80030a8:	42a5      	cmp	r5, r4
 80030aa:	d109      	bne.n	80030c0 <__libc_init_array+0x24>
 80030ac:	4e0b      	ldr	r6, [pc, #44]	; (80030dc <__libc_init_array+0x40>)
 80030ae:	4c0c      	ldr	r4, [pc, #48]	; (80030e0 <__libc_init_array+0x44>)
 80030b0:	f001 fde2 	bl	8004c78 <_init>
 80030b4:	1ba4      	subs	r4, r4, r6
 80030b6:	10a4      	asrs	r4, r4, #2
 80030b8:	2500      	movs	r5, #0
 80030ba:	42a5      	cmp	r5, r4
 80030bc:	d105      	bne.n	80030ca <__libc_init_array+0x2e>
 80030be:	bd70      	pop	{r4, r5, r6, pc}
 80030c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030c4:	4798      	blx	r3
 80030c6:	3501      	adds	r5, #1
 80030c8:	e7ee      	b.n	80030a8 <__libc_init_array+0xc>
 80030ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030ce:	4798      	blx	r3
 80030d0:	3501      	adds	r5, #1
 80030d2:	e7f2      	b.n	80030ba <__libc_init_array+0x1e>
 80030d4:	08005034 	.word	0x08005034
 80030d8:	08005034 	.word	0x08005034
 80030dc:	08005034 	.word	0x08005034
 80030e0:	08005038 	.word	0x08005038

080030e4 <__locale_ctype_ptr_l>:
 80030e4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80030e8:	4770      	bx	lr
	...

080030ec <__locale_ctype_ptr>:
 80030ec:	4b04      	ldr	r3, [pc, #16]	; (8003100 <__locale_ctype_ptr+0x14>)
 80030ee:	4a05      	ldr	r2, [pc, #20]	; (8003104 <__locale_ctype_ptr+0x18>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf08      	it	eq
 80030f8:	4613      	moveq	r3, r2
 80030fa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80030fe:	4770      	bx	lr
 8003100:	20000050 	.word	0x20000050
 8003104:	200000b4 	.word	0x200000b4

08003108 <__ascii_mbtowc>:
 8003108:	b082      	sub	sp, #8
 800310a:	b901      	cbnz	r1, 800310e <__ascii_mbtowc+0x6>
 800310c:	a901      	add	r1, sp, #4
 800310e:	b142      	cbz	r2, 8003122 <__ascii_mbtowc+0x1a>
 8003110:	b14b      	cbz	r3, 8003126 <__ascii_mbtowc+0x1e>
 8003112:	7813      	ldrb	r3, [r2, #0]
 8003114:	600b      	str	r3, [r1, #0]
 8003116:	7812      	ldrb	r2, [r2, #0]
 8003118:	1c10      	adds	r0, r2, #0
 800311a:	bf18      	it	ne
 800311c:	2001      	movne	r0, #1
 800311e:	b002      	add	sp, #8
 8003120:	4770      	bx	lr
 8003122:	4610      	mov	r0, r2
 8003124:	e7fb      	b.n	800311e <__ascii_mbtowc+0x16>
 8003126:	f06f 0001 	mvn.w	r0, #1
 800312a:	e7f8      	b.n	800311e <__ascii_mbtowc+0x16>

0800312c <memset>:
 800312c:	4402      	add	r2, r0
 800312e:	4603      	mov	r3, r0
 8003130:	4293      	cmp	r3, r2
 8003132:	d100      	bne.n	8003136 <memset+0xa>
 8003134:	4770      	bx	lr
 8003136:	f803 1b01 	strb.w	r1, [r3], #1
 800313a:	e7f9      	b.n	8003130 <memset+0x4>

0800313c <__sfputc_r>:
 800313c:	6893      	ldr	r3, [r2, #8]
 800313e:	3b01      	subs	r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	b410      	push	{r4}
 8003144:	6093      	str	r3, [r2, #8]
 8003146:	da08      	bge.n	800315a <__sfputc_r+0x1e>
 8003148:	6994      	ldr	r4, [r2, #24]
 800314a:	42a3      	cmp	r3, r4
 800314c:	db01      	blt.n	8003152 <__sfputc_r+0x16>
 800314e:	290a      	cmp	r1, #10
 8003150:	d103      	bne.n	800315a <__sfputc_r+0x1e>
 8003152:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003156:	f000 bb49 	b.w	80037ec <__swbuf_r>
 800315a:	6813      	ldr	r3, [r2, #0]
 800315c:	1c58      	adds	r0, r3, #1
 800315e:	6010      	str	r0, [r2, #0]
 8003160:	7019      	strb	r1, [r3, #0]
 8003162:	4608      	mov	r0, r1
 8003164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003168:	4770      	bx	lr

0800316a <__sfputs_r>:
 800316a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316c:	4606      	mov	r6, r0
 800316e:	460f      	mov	r7, r1
 8003170:	4614      	mov	r4, r2
 8003172:	18d5      	adds	r5, r2, r3
 8003174:	42ac      	cmp	r4, r5
 8003176:	d101      	bne.n	800317c <__sfputs_r+0x12>
 8003178:	2000      	movs	r0, #0
 800317a:	e007      	b.n	800318c <__sfputs_r+0x22>
 800317c:	463a      	mov	r2, r7
 800317e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003182:	4630      	mov	r0, r6
 8003184:	f7ff ffda 	bl	800313c <__sfputc_r>
 8003188:	1c43      	adds	r3, r0, #1
 800318a:	d1f3      	bne.n	8003174 <__sfputs_r+0xa>
 800318c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003190 <_vfiprintf_r>:
 8003190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003194:	460c      	mov	r4, r1
 8003196:	b09d      	sub	sp, #116	; 0x74
 8003198:	4617      	mov	r7, r2
 800319a:	461d      	mov	r5, r3
 800319c:	4606      	mov	r6, r0
 800319e:	b118      	cbz	r0, 80031a8 <_vfiprintf_r+0x18>
 80031a0:	6983      	ldr	r3, [r0, #24]
 80031a2:	b90b      	cbnz	r3, 80031a8 <_vfiprintf_r+0x18>
 80031a4:	f000 fd0a 	bl	8003bbc <__sinit>
 80031a8:	4b7c      	ldr	r3, [pc, #496]	; (800339c <_vfiprintf_r+0x20c>)
 80031aa:	429c      	cmp	r4, r3
 80031ac:	d158      	bne.n	8003260 <_vfiprintf_r+0xd0>
 80031ae:	6874      	ldr	r4, [r6, #4]
 80031b0:	89a3      	ldrh	r3, [r4, #12]
 80031b2:	0718      	lsls	r0, r3, #28
 80031b4:	d55e      	bpl.n	8003274 <_vfiprintf_r+0xe4>
 80031b6:	6923      	ldr	r3, [r4, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d05b      	beq.n	8003274 <_vfiprintf_r+0xe4>
 80031bc:	2300      	movs	r3, #0
 80031be:	9309      	str	r3, [sp, #36]	; 0x24
 80031c0:	2320      	movs	r3, #32
 80031c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031c6:	2330      	movs	r3, #48	; 0x30
 80031c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031cc:	9503      	str	r5, [sp, #12]
 80031ce:	f04f 0b01 	mov.w	fp, #1
 80031d2:	46b8      	mov	r8, r7
 80031d4:	4645      	mov	r5, r8
 80031d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80031da:	b10b      	cbz	r3, 80031e0 <_vfiprintf_r+0x50>
 80031dc:	2b25      	cmp	r3, #37	; 0x25
 80031de:	d154      	bne.n	800328a <_vfiprintf_r+0xfa>
 80031e0:	ebb8 0a07 	subs.w	sl, r8, r7
 80031e4:	d00b      	beq.n	80031fe <_vfiprintf_r+0x6e>
 80031e6:	4653      	mov	r3, sl
 80031e8:	463a      	mov	r2, r7
 80031ea:	4621      	mov	r1, r4
 80031ec:	4630      	mov	r0, r6
 80031ee:	f7ff ffbc 	bl	800316a <__sfputs_r>
 80031f2:	3001      	adds	r0, #1
 80031f4:	f000 80c2 	beq.w	800337c <_vfiprintf_r+0x1ec>
 80031f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031fa:	4453      	add	r3, sl
 80031fc:	9309      	str	r3, [sp, #36]	; 0x24
 80031fe:	f898 3000 	ldrb.w	r3, [r8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 80ba 	beq.w	800337c <_vfiprintf_r+0x1ec>
 8003208:	2300      	movs	r3, #0
 800320a:	f04f 32ff 	mov.w	r2, #4294967295
 800320e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003212:	9304      	str	r3, [sp, #16]
 8003214:	9307      	str	r3, [sp, #28]
 8003216:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800321a:	931a      	str	r3, [sp, #104]	; 0x68
 800321c:	46a8      	mov	r8, r5
 800321e:	2205      	movs	r2, #5
 8003220:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003224:	485e      	ldr	r0, [pc, #376]	; (80033a0 <_vfiprintf_r+0x210>)
 8003226:	f7fc fff3 	bl	8000210 <memchr>
 800322a:	9b04      	ldr	r3, [sp, #16]
 800322c:	bb78      	cbnz	r0, 800328e <_vfiprintf_r+0xfe>
 800322e:	06d9      	lsls	r1, r3, #27
 8003230:	bf44      	itt	mi
 8003232:	2220      	movmi	r2, #32
 8003234:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003238:	071a      	lsls	r2, r3, #28
 800323a:	bf44      	itt	mi
 800323c:	222b      	movmi	r2, #43	; 0x2b
 800323e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003242:	782a      	ldrb	r2, [r5, #0]
 8003244:	2a2a      	cmp	r2, #42	; 0x2a
 8003246:	d02a      	beq.n	800329e <_vfiprintf_r+0x10e>
 8003248:	9a07      	ldr	r2, [sp, #28]
 800324a:	46a8      	mov	r8, r5
 800324c:	2000      	movs	r0, #0
 800324e:	250a      	movs	r5, #10
 8003250:	4641      	mov	r1, r8
 8003252:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003256:	3b30      	subs	r3, #48	; 0x30
 8003258:	2b09      	cmp	r3, #9
 800325a:	d969      	bls.n	8003330 <_vfiprintf_r+0x1a0>
 800325c:	b360      	cbz	r0, 80032b8 <_vfiprintf_r+0x128>
 800325e:	e024      	b.n	80032aa <_vfiprintf_r+0x11a>
 8003260:	4b50      	ldr	r3, [pc, #320]	; (80033a4 <_vfiprintf_r+0x214>)
 8003262:	429c      	cmp	r4, r3
 8003264:	d101      	bne.n	800326a <_vfiprintf_r+0xda>
 8003266:	68b4      	ldr	r4, [r6, #8]
 8003268:	e7a2      	b.n	80031b0 <_vfiprintf_r+0x20>
 800326a:	4b4f      	ldr	r3, [pc, #316]	; (80033a8 <_vfiprintf_r+0x218>)
 800326c:	429c      	cmp	r4, r3
 800326e:	bf08      	it	eq
 8003270:	68f4      	ldreq	r4, [r6, #12]
 8003272:	e79d      	b.n	80031b0 <_vfiprintf_r+0x20>
 8003274:	4621      	mov	r1, r4
 8003276:	4630      	mov	r0, r6
 8003278:	f000 fb2a 	bl	80038d0 <__swsetup_r>
 800327c:	2800      	cmp	r0, #0
 800327e:	d09d      	beq.n	80031bc <_vfiprintf_r+0x2c>
 8003280:	f04f 30ff 	mov.w	r0, #4294967295
 8003284:	b01d      	add	sp, #116	; 0x74
 8003286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800328a:	46a8      	mov	r8, r5
 800328c:	e7a2      	b.n	80031d4 <_vfiprintf_r+0x44>
 800328e:	4a44      	ldr	r2, [pc, #272]	; (80033a0 <_vfiprintf_r+0x210>)
 8003290:	1a80      	subs	r0, r0, r2
 8003292:	fa0b f000 	lsl.w	r0, fp, r0
 8003296:	4318      	orrs	r0, r3
 8003298:	9004      	str	r0, [sp, #16]
 800329a:	4645      	mov	r5, r8
 800329c:	e7be      	b.n	800321c <_vfiprintf_r+0x8c>
 800329e:	9a03      	ldr	r2, [sp, #12]
 80032a0:	1d11      	adds	r1, r2, #4
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	9103      	str	r1, [sp, #12]
 80032a6:	2a00      	cmp	r2, #0
 80032a8:	db01      	blt.n	80032ae <_vfiprintf_r+0x11e>
 80032aa:	9207      	str	r2, [sp, #28]
 80032ac:	e004      	b.n	80032b8 <_vfiprintf_r+0x128>
 80032ae:	4252      	negs	r2, r2
 80032b0:	f043 0302 	orr.w	r3, r3, #2
 80032b4:	9207      	str	r2, [sp, #28]
 80032b6:	9304      	str	r3, [sp, #16]
 80032b8:	f898 3000 	ldrb.w	r3, [r8]
 80032bc:	2b2e      	cmp	r3, #46	; 0x2e
 80032be:	d10e      	bne.n	80032de <_vfiprintf_r+0x14e>
 80032c0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80032c4:	2b2a      	cmp	r3, #42	; 0x2a
 80032c6:	d138      	bne.n	800333a <_vfiprintf_r+0x1aa>
 80032c8:	9b03      	ldr	r3, [sp, #12]
 80032ca:	1d1a      	adds	r2, r3, #4
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	9203      	str	r2, [sp, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bfb8      	it	lt
 80032d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80032d8:	f108 0802 	add.w	r8, r8, #2
 80032dc:	9305      	str	r3, [sp, #20]
 80032de:	4d33      	ldr	r5, [pc, #204]	; (80033ac <_vfiprintf_r+0x21c>)
 80032e0:	f898 1000 	ldrb.w	r1, [r8]
 80032e4:	2203      	movs	r2, #3
 80032e6:	4628      	mov	r0, r5
 80032e8:	f7fc ff92 	bl	8000210 <memchr>
 80032ec:	b140      	cbz	r0, 8003300 <_vfiprintf_r+0x170>
 80032ee:	2340      	movs	r3, #64	; 0x40
 80032f0:	1b40      	subs	r0, r0, r5
 80032f2:	fa03 f000 	lsl.w	r0, r3, r0
 80032f6:	9b04      	ldr	r3, [sp, #16]
 80032f8:	4303      	orrs	r3, r0
 80032fa:	f108 0801 	add.w	r8, r8, #1
 80032fe:	9304      	str	r3, [sp, #16]
 8003300:	f898 1000 	ldrb.w	r1, [r8]
 8003304:	482a      	ldr	r0, [pc, #168]	; (80033b0 <_vfiprintf_r+0x220>)
 8003306:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800330a:	2206      	movs	r2, #6
 800330c:	f108 0701 	add.w	r7, r8, #1
 8003310:	f7fc ff7e 	bl	8000210 <memchr>
 8003314:	2800      	cmp	r0, #0
 8003316:	d037      	beq.n	8003388 <_vfiprintf_r+0x1f8>
 8003318:	4b26      	ldr	r3, [pc, #152]	; (80033b4 <_vfiprintf_r+0x224>)
 800331a:	bb1b      	cbnz	r3, 8003364 <_vfiprintf_r+0x1d4>
 800331c:	9b03      	ldr	r3, [sp, #12]
 800331e:	3307      	adds	r3, #7
 8003320:	f023 0307 	bic.w	r3, r3, #7
 8003324:	3308      	adds	r3, #8
 8003326:	9303      	str	r3, [sp, #12]
 8003328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800332a:	444b      	add	r3, r9
 800332c:	9309      	str	r3, [sp, #36]	; 0x24
 800332e:	e750      	b.n	80031d2 <_vfiprintf_r+0x42>
 8003330:	fb05 3202 	mla	r2, r5, r2, r3
 8003334:	2001      	movs	r0, #1
 8003336:	4688      	mov	r8, r1
 8003338:	e78a      	b.n	8003250 <_vfiprintf_r+0xc0>
 800333a:	2300      	movs	r3, #0
 800333c:	f108 0801 	add.w	r8, r8, #1
 8003340:	9305      	str	r3, [sp, #20]
 8003342:	4619      	mov	r1, r3
 8003344:	250a      	movs	r5, #10
 8003346:	4640      	mov	r0, r8
 8003348:	f810 2b01 	ldrb.w	r2, [r0], #1
 800334c:	3a30      	subs	r2, #48	; 0x30
 800334e:	2a09      	cmp	r2, #9
 8003350:	d903      	bls.n	800335a <_vfiprintf_r+0x1ca>
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0c3      	beq.n	80032de <_vfiprintf_r+0x14e>
 8003356:	9105      	str	r1, [sp, #20]
 8003358:	e7c1      	b.n	80032de <_vfiprintf_r+0x14e>
 800335a:	fb05 2101 	mla	r1, r5, r1, r2
 800335e:	2301      	movs	r3, #1
 8003360:	4680      	mov	r8, r0
 8003362:	e7f0      	b.n	8003346 <_vfiprintf_r+0x1b6>
 8003364:	ab03      	add	r3, sp, #12
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	4622      	mov	r2, r4
 800336a:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <_vfiprintf_r+0x228>)
 800336c:	a904      	add	r1, sp, #16
 800336e:	4630      	mov	r0, r6
 8003370:	f3af 8000 	nop.w
 8003374:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003378:	4681      	mov	r9, r0
 800337a:	d1d5      	bne.n	8003328 <_vfiprintf_r+0x198>
 800337c:	89a3      	ldrh	r3, [r4, #12]
 800337e:	065b      	lsls	r3, r3, #25
 8003380:	f53f af7e 	bmi.w	8003280 <_vfiprintf_r+0xf0>
 8003384:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003386:	e77d      	b.n	8003284 <_vfiprintf_r+0xf4>
 8003388:	ab03      	add	r3, sp, #12
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	4622      	mov	r2, r4
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <_vfiprintf_r+0x228>)
 8003390:	a904      	add	r1, sp, #16
 8003392:	4630      	mov	r0, r6
 8003394:	f000 f888 	bl	80034a8 <_printf_i>
 8003398:	e7ec      	b.n	8003374 <_vfiprintf_r+0x1e4>
 800339a:	bf00      	nop
 800339c:	08004fd0 	.word	0x08004fd0
 80033a0:	08004e7a 	.word	0x08004e7a
 80033a4:	08004ff0 	.word	0x08004ff0
 80033a8:	08004fb0 	.word	0x08004fb0
 80033ac:	08004e80 	.word	0x08004e80
 80033b0:	08004e84 	.word	0x08004e84
 80033b4:	00000000 	.word	0x00000000
 80033b8:	0800316b 	.word	0x0800316b

080033bc <_printf_common>:
 80033bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033c0:	4691      	mov	r9, r2
 80033c2:	461f      	mov	r7, r3
 80033c4:	688a      	ldr	r2, [r1, #8]
 80033c6:	690b      	ldr	r3, [r1, #16]
 80033c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033cc:	4293      	cmp	r3, r2
 80033ce:	bfb8      	it	lt
 80033d0:	4613      	movlt	r3, r2
 80033d2:	f8c9 3000 	str.w	r3, [r9]
 80033d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033da:	4606      	mov	r6, r0
 80033dc:	460c      	mov	r4, r1
 80033de:	b112      	cbz	r2, 80033e6 <_printf_common+0x2a>
 80033e0:	3301      	adds	r3, #1
 80033e2:	f8c9 3000 	str.w	r3, [r9]
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	0699      	lsls	r1, r3, #26
 80033ea:	bf42      	ittt	mi
 80033ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80033f0:	3302      	addmi	r3, #2
 80033f2:	f8c9 3000 	strmi.w	r3, [r9]
 80033f6:	6825      	ldr	r5, [r4, #0]
 80033f8:	f015 0506 	ands.w	r5, r5, #6
 80033fc:	d107      	bne.n	800340e <_printf_common+0x52>
 80033fe:	f104 0a19 	add.w	sl, r4, #25
 8003402:	68e3      	ldr	r3, [r4, #12]
 8003404:	f8d9 2000 	ldr.w	r2, [r9]
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	42ab      	cmp	r3, r5
 800340c:	dc28      	bgt.n	8003460 <_printf_common+0xa4>
 800340e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003412:	6822      	ldr	r2, [r4, #0]
 8003414:	3300      	adds	r3, #0
 8003416:	bf18      	it	ne
 8003418:	2301      	movne	r3, #1
 800341a:	0692      	lsls	r2, r2, #26
 800341c:	d42d      	bmi.n	800347a <_printf_common+0xbe>
 800341e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003422:	4639      	mov	r1, r7
 8003424:	4630      	mov	r0, r6
 8003426:	47c0      	blx	r8
 8003428:	3001      	adds	r0, #1
 800342a:	d020      	beq.n	800346e <_printf_common+0xb2>
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	68e5      	ldr	r5, [r4, #12]
 8003430:	f8d9 2000 	ldr.w	r2, [r9]
 8003434:	f003 0306 	and.w	r3, r3, #6
 8003438:	2b04      	cmp	r3, #4
 800343a:	bf08      	it	eq
 800343c:	1aad      	subeq	r5, r5, r2
 800343e:	68a3      	ldr	r3, [r4, #8]
 8003440:	6922      	ldr	r2, [r4, #16]
 8003442:	bf0c      	ite	eq
 8003444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003448:	2500      	movne	r5, #0
 800344a:	4293      	cmp	r3, r2
 800344c:	bfc4      	itt	gt
 800344e:	1a9b      	subgt	r3, r3, r2
 8003450:	18ed      	addgt	r5, r5, r3
 8003452:	f04f 0900 	mov.w	r9, #0
 8003456:	341a      	adds	r4, #26
 8003458:	454d      	cmp	r5, r9
 800345a:	d11a      	bne.n	8003492 <_printf_common+0xd6>
 800345c:	2000      	movs	r0, #0
 800345e:	e008      	b.n	8003472 <_printf_common+0xb6>
 8003460:	2301      	movs	r3, #1
 8003462:	4652      	mov	r2, sl
 8003464:	4639      	mov	r1, r7
 8003466:	4630      	mov	r0, r6
 8003468:	47c0      	blx	r8
 800346a:	3001      	adds	r0, #1
 800346c:	d103      	bne.n	8003476 <_printf_common+0xba>
 800346e:	f04f 30ff 	mov.w	r0, #4294967295
 8003472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003476:	3501      	adds	r5, #1
 8003478:	e7c3      	b.n	8003402 <_printf_common+0x46>
 800347a:	18e1      	adds	r1, r4, r3
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	2030      	movs	r0, #48	; 0x30
 8003480:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003484:	4422      	add	r2, r4
 8003486:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800348a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800348e:	3302      	adds	r3, #2
 8003490:	e7c5      	b.n	800341e <_printf_common+0x62>
 8003492:	2301      	movs	r3, #1
 8003494:	4622      	mov	r2, r4
 8003496:	4639      	mov	r1, r7
 8003498:	4630      	mov	r0, r6
 800349a:	47c0      	blx	r8
 800349c:	3001      	adds	r0, #1
 800349e:	d0e6      	beq.n	800346e <_printf_common+0xb2>
 80034a0:	f109 0901 	add.w	r9, r9, #1
 80034a4:	e7d8      	b.n	8003458 <_printf_common+0x9c>
	...

080034a8 <_printf_i>:
 80034a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80034b0:	460c      	mov	r4, r1
 80034b2:	7e09      	ldrb	r1, [r1, #24]
 80034b4:	b085      	sub	sp, #20
 80034b6:	296e      	cmp	r1, #110	; 0x6e
 80034b8:	4617      	mov	r7, r2
 80034ba:	4606      	mov	r6, r0
 80034bc:	4698      	mov	r8, r3
 80034be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80034c0:	f000 80b3 	beq.w	800362a <_printf_i+0x182>
 80034c4:	d822      	bhi.n	800350c <_printf_i+0x64>
 80034c6:	2963      	cmp	r1, #99	; 0x63
 80034c8:	d036      	beq.n	8003538 <_printf_i+0x90>
 80034ca:	d80a      	bhi.n	80034e2 <_printf_i+0x3a>
 80034cc:	2900      	cmp	r1, #0
 80034ce:	f000 80b9 	beq.w	8003644 <_printf_i+0x19c>
 80034d2:	2958      	cmp	r1, #88	; 0x58
 80034d4:	f000 8083 	beq.w	80035de <_printf_i+0x136>
 80034d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80034e0:	e032      	b.n	8003548 <_printf_i+0xa0>
 80034e2:	2964      	cmp	r1, #100	; 0x64
 80034e4:	d001      	beq.n	80034ea <_printf_i+0x42>
 80034e6:	2969      	cmp	r1, #105	; 0x69
 80034e8:	d1f6      	bne.n	80034d8 <_printf_i+0x30>
 80034ea:	6820      	ldr	r0, [r4, #0]
 80034ec:	6813      	ldr	r3, [r2, #0]
 80034ee:	0605      	lsls	r5, r0, #24
 80034f0:	f103 0104 	add.w	r1, r3, #4
 80034f4:	d52a      	bpl.n	800354c <_printf_i+0xa4>
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6011      	str	r1, [r2, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	da03      	bge.n	8003506 <_printf_i+0x5e>
 80034fe:	222d      	movs	r2, #45	; 0x2d
 8003500:	425b      	negs	r3, r3
 8003502:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003506:	486f      	ldr	r0, [pc, #444]	; (80036c4 <_printf_i+0x21c>)
 8003508:	220a      	movs	r2, #10
 800350a:	e039      	b.n	8003580 <_printf_i+0xd8>
 800350c:	2973      	cmp	r1, #115	; 0x73
 800350e:	f000 809d 	beq.w	800364c <_printf_i+0x1a4>
 8003512:	d808      	bhi.n	8003526 <_printf_i+0x7e>
 8003514:	296f      	cmp	r1, #111	; 0x6f
 8003516:	d020      	beq.n	800355a <_printf_i+0xb2>
 8003518:	2970      	cmp	r1, #112	; 0x70
 800351a:	d1dd      	bne.n	80034d8 <_printf_i+0x30>
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	f043 0320 	orr.w	r3, r3, #32
 8003522:	6023      	str	r3, [r4, #0]
 8003524:	e003      	b.n	800352e <_printf_i+0x86>
 8003526:	2975      	cmp	r1, #117	; 0x75
 8003528:	d017      	beq.n	800355a <_printf_i+0xb2>
 800352a:	2978      	cmp	r1, #120	; 0x78
 800352c:	d1d4      	bne.n	80034d8 <_printf_i+0x30>
 800352e:	2378      	movs	r3, #120	; 0x78
 8003530:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003534:	4864      	ldr	r0, [pc, #400]	; (80036c8 <_printf_i+0x220>)
 8003536:	e055      	b.n	80035e4 <_printf_i+0x13c>
 8003538:	6813      	ldr	r3, [r2, #0]
 800353a:	1d19      	adds	r1, r3, #4
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6011      	str	r1, [r2, #0]
 8003540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003548:	2301      	movs	r3, #1
 800354a:	e08c      	b.n	8003666 <_printf_i+0x1be>
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6011      	str	r1, [r2, #0]
 8003550:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003554:	bf18      	it	ne
 8003556:	b21b      	sxthne	r3, r3
 8003558:	e7cf      	b.n	80034fa <_printf_i+0x52>
 800355a:	6813      	ldr	r3, [r2, #0]
 800355c:	6825      	ldr	r5, [r4, #0]
 800355e:	1d18      	adds	r0, r3, #4
 8003560:	6010      	str	r0, [r2, #0]
 8003562:	0628      	lsls	r0, r5, #24
 8003564:	d501      	bpl.n	800356a <_printf_i+0xc2>
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	e002      	b.n	8003570 <_printf_i+0xc8>
 800356a:	0668      	lsls	r0, r5, #25
 800356c:	d5fb      	bpl.n	8003566 <_printf_i+0xbe>
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	4854      	ldr	r0, [pc, #336]	; (80036c4 <_printf_i+0x21c>)
 8003572:	296f      	cmp	r1, #111	; 0x6f
 8003574:	bf14      	ite	ne
 8003576:	220a      	movne	r2, #10
 8003578:	2208      	moveq	r2, #8
 800357a:	2100      	movs	r1, #0
 800357c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003580:	6865      	ldr	r5, [r4, #4]
 8003582:	60a5      	str	r5, [r4, #8]
 8003584:	2d00      	cmp	r5, #0
 8003586:	f2c0 8095 	blt.w	80036b4 <_printf_i+0x20c>
 800358a:	6821      	ldr	r1, [r4, #0]
 800358c:	f021 0104 	bic.w	r1, r1, #4
 8003590:	6021      	str	r1, [r4, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d13d      	bne.n	8003612 <_printf_i+0x16a>
 8003596:	2d00      	cmp	r5, #0
 8003598:	f040 808e 	bne.w	80036b8 <_printf_i+0x210>
 800359c:	4665      	mov	r5, ip
 800359e:	2a08      	cmp	r2, #8
 80035a0:	d10b      	bne.n	80035ba <_printf_i+0x112>
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	07db      	lsls	r3, r3, #31
 80035a6:	d508      	bpl.n	80035ba <_printf_i+0x112>
 80035a8:	6923      	ldr	r3, [r4, #16]
 80035aa:	6862      	ldr	r2, [r4, #4]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	bfde      	ittt	le
 80035b0:	2330      	movle	r3, #48	; 0x30
 80035b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80035ba:	ebac 0305 	sub.w	r3, ip, r5
 80035be:	6123      	str	r3, [r4, #16]
 80035c0:	f8cd 8000 	str.w	r8, [sp]
 80035c4:	463b      	mov	r3, r7
 80035c6:	aa03      	add	r2, sp, #12
 80035c8:	4621      	mov	r1, r4
 80035ca:	4630      	mov	r0, r6
 80035cc:	f7ff fef6 	bl	80033bc <_printf_common>
 80035d0:	3001      	adds	r0, #1
 80035d2:	d14d      	bne.n	8003670 <_printf_i+0x1c8>
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295
 80035d8:	b005      	add	sp, #20
 80035da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035de:	4839      	ldr	r0, [pc, #228]	; (80036c4 <_printf_i+0x21c>)
 80035e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80035e4:	6813      	ldr	r3, [r2, #0]
 80035e6:	6821      	ldr	r1, [r4, #0]
 80035e8:	1d1d      	adds	r5, r3, #4
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6015      	str	r5, [r2, #0]
 80035ee:	060a      	lsls	r2, r1, #24
 80035f0:	d50b      	bpl.n	800360a <_printf_i+0x162>
 80035f2:	07ca      	lsls	r2, r1, #31
 80035f4:	bf44      	itt	mi
 80035f6:	f041 0120 	orrmi.w	r1, r1, #32
 80035fa:	6021      	strmi	r1, [r4, #0]
 80035fc:	b91b      	cbnz	r3, 8003606 <_printf_i+0x15e>
 80035fe:	6822      	ldr	r2, [r4, #0]
 8003600:	f022 0220 	bic.w	r2, r2, #32
 8003604:	6022      	str	r2, [r4, #0]
 8003606:	2210      	movs	r2, #16
 8003608:	e7b7      	b.n	800357a <_printf_i+0xd2>
 800360a:	064d      	lsls	r5, r1, #25
 800360c:	bf48      	it	mi
 800360e:	b29b      	uxthmi	r3, r3
 8003610:	e7ef      	b.n	80035f2 <_printf_i+0x14a>
 8003612:	4665      	mov	r5, ip
 8003614:	fbb3 f1f2 	udiv	r1, r3, r2
 8003618:	fb02 3311 	mls	r3, r2, r1, r3
 800361c:	5cc3      	ldrb	r3, [r0, r3]
 800361e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003622:	460b      	mov	r3, r1
 8003624:	2900      	cmp	r1, #0
 8003626:	d1f5      	bne.n	8003614 <_printf_i+0x16c>
 8003628:	e7b9      	b.n	800359e <_printf_i+0xf6>
 800362a:	6813      	ldr	r3, [r2, #0]
 800362c:	6825      	ldr	r5, [r4, #0]
 800362e:	6961      	ldr	r1, [r4, #20]
 8003630:	1d18      	adds	r0, r3, #4
 8003632:	6010      	str	r0, [r2, #0]
 8003634:	0628      	lsls	r0, r5, #24
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	d501      	bpl.n	800363e <_printf_i+0x196>
 800363a:	6019      	str	r1, [r3, #0]
 800363c:	e002      	b.n	8003644 <_printf_i+0x19c>
 800363e:	066a      	lsls	r2, r5, #25
 8003640:	d5fb      	bpl.n	800363a <_printf_i+0x192>
 8003642:	8019      	strh	r1, [r3, #0]
 8003644:	2300      	movs	r3, #0
 8003646:	6123      	str	r3, [r4, #16]
 8003648:	4665      	mov	r5, ip
 800364a:	e7b9      	b.n	80035c0 <_printf_i+0x118>
 800364c:	6813      	ldr	r3, [r2, #0]
 800364e:	1d19      	adds	r1, r3, #4
 8003650:	6011      	str	r1, [r2, #0]
 8003652:	681d      	ldr	r5, [r3, #0]
 8003654:	6862      	ldr	r2, [r4, #4]
 8003656:	2100      	movs	r1, #0
 8003658:	4628      	mov	r0, r5
 800365a:	f7fc fdd9 	bl	8000210 <memchr>
 800365e:	b108      	cbz	r0, 8003664 <_printf_i+0x1bc>
 8003660:	1b40      	subs	r0, r0, r5
 8003662:	6060      	str	r0, [r4, #4]
 8003664:	6863      	ldr	r3, [r4, #4]
 8003666:	6123      	str	r3, [r4, #16]
 8003668:	2300      	movs	r3, #0
 800366a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800366e:	e7a7      	b.n	80035c0 <_printf_i+0x118>
 8003670:	6923      	ldr	r3, [r4, #16]
 8003672:	462a      	mov	r2, r5
 8003674:	4639      	mov	r1, r7
 8003676:	4630      	mov	r0, r6
 8003678:	47c0      	blx	r8
 800367a:	3001      	adds	r0, #1
 800367c:	d0aa      	beq.n	80035d4 <_printf_i+0x12c>
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	079b      	lsls	r3, r3, #30
 8003682:	d413      	bmi.n	80036ac <_printf_i+0x204>
 8003684:	68e0      	ldr	r0, [r4, #12]
 8003686:	9b03      	ldr	r3, [sp, #12]
 8003688:	4298      	cmp	r0, r3
 800368a:	bfb8      	it	lt
 800368c:	4618      	movlt	r0, r3
 800368e:	e7a3      	b.n	80035d8 <_printf_i+0x130>
 8003690:	2301      	movs	r3, #1
 8003692:	464a      	mov	r2, r9
 8003694:	4639      	mov	r1, r7
 8003696:	4630      	mov	r0, r6
 8003698:	47c0      	blx	r8
 800369a:	3001      	adds	r0, #1
 800369c:	d09a      	beq.n	80035d4 <_printf_i+0x12c>
 800369e:	3501      	adds	r5, #1
 80036a0:	68e3      	ldr	r3, [r4, #12]
 80036a2:	9a03      	ldr	r2, [sp, #12]
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	42ab      	cmp	r3, r5
 80036a8:	dcf2      	bgt.n	8003690 <_printf_i+0x1e8>
 80036aa:	e7eb      	b.n	8003684 <_printf_i+0x1dc>
 80036ac:	2500      	movs	r5, #0
 80036ae:	f104 0919 	add.w	r9, r4, #25
 80036b2:	e7f5      	b.n	80036a0 <_printf_i+0x1f8>
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1ac      	bne.n	8003612 <_printf_i+0x16a>
 80036b8:	7803      	ldrb	r3, [r0, #0]
 80036ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036c2:	e76c      	b.n	800359e <_printf_i+0xf6>
 80036c4:	08004e8b 	.word	0x08004e8b
 80036c8:	08004e9c 	.word	0x08004e9c

080036cc <siprintf>:
 80036cc:	b40e      	push	{r1, r2, r3}
 80036ce:	b500      	push	{lr}
 80036d0:	b09c      	sub	sp, #112	; 0x70
 80036d2:	ab1d      	add	r3, sp, #116	; 0x74
 80036d4:	9002      	str	r0, [sp, #8]
 80036d6:	9006      	str	r0, [sp, #24]
 80036d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036dc:	4809      	ldr	r0, [pc, #36]	; (8003704 <siprintf+0x38>)
 80036de:	9107      	str	r1, [sp, #28]
 80036e0:	9104      	str	r1, [sp, #16]
 80036e2:	4909      	ldr	r1, [pc, #36]	; (8003708 <siprintf+0x3c>)
 80036e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80036e8:	9105      	str	r1, [sp, #20]
 80036ea:	6800      	ldr	r0, [r0, #0]
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	a902      	add	r1, sp, #8
 80036f0:	f000 fcb0 	bl	8004054 <_svfiprintf_r>
 80036f4:	9b02      	ldr	r3, [sp, #8]
 80036f6:	2200      	movs	r2, #0
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	b01c      	add	sp, #112	; 0x70
 80036fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003700:	b003      	add	sp, #12
 8003702:	4770      	bx	lr
 8003704:	20000050 	.word	0x20000050
 8003708:	ffff0208 	.word	0xffff0208

0800370c <siscanf>:
 800370c:	b40e      	push	{r1, r2, r3}
 800370e:	b530      	push	{r4, r5, lr}
 8003710:	b09c      	sub	sp, #112	; 0x70
 8003712:	ac1f      	add	r4, sp, #124	; 0x7c
 8003714:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003718:	f854 5b04 	ldr.w	r5, [r4], #4
 800371c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003720:	9002      	str	r0, [sp, #8]
 8003722:	9006      	str	r0, [sp, #24]
 8003724:	f7fc fd66 	bl	80001f4 <strlen>
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <siscanf+0x4c>)
 800372a:	9003      	str	r0, [sp, #12]
 800372c:	9007      	str	r0, [sp, #28]
 800372e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003730:	480a      	ldr	r0, [pc, #40]	; (800375c <siscanf+0x50>)
 8003732:	9401      	str	r4, [sp, #4]
 8003734:	2300      	movs	r3, #0
 8003736:	930f      	str	r3, [sp, #60]	; 0x3c
 8003738:	9314      	str	r3, [sp, #80]	; 0x50
 800373a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800373e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003742:	462a      	mov	r2, r5
 8003744:	4623      	mov	r3, r4
 8003746:	a902      	add	r1, sp, #8
 8003748:	6800      	ldr	r0, [r0, #0]
 800374a:	f000 fdd5 	bl	80042f8 <__ssvfiscanf_r>
 800374e:	b01c      	add	sp, #112	; 0x70
 8003750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003754:	b003      	add	sp, #12
 8003756:	4770      	bx	lr
 8003758:	08003783 	.word	0x08003783
 800375c:	20000050 	.word	0x20000050

08003760 <__sread>:
 8003760:	b510      	push	{r4, lr}
 8003762:	460c      	mov	r4, r1
 8003764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003768:	f001 f86e 	bl	8004848 <_read_r>
 800376c:	2800      	cmp	r0, #0
 800376e:	bfab      	itete	ge
 8003770:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003772:	89a3      	ldrhlt	r3, [r4, #12]
 8003774:	181b      	addge	r3, r3, r0
 8003776:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800377a:	bfac      	ite	ge
 800377c:	6563      	strge	r3, [r4, #84]	; 0x54
 800377e:	81a3      	strhlt	r3, [r4, #12]
 8003780:	bd10      	pop	{r4, pc}

08003782 <__seofread>:
 8003782:	2000      	movs	r0, #0
 8003784:	4770      	bx	lr

08003786 <__swrite>:
 8003786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800378a:	461f      	mov	r7, r3
 800378c:	898b      	ldrh	r3, [r1, #12]
 800378e:	05db      	lsls	r3, r3, #23
 8003790:	4605      	mov	r5, r0
 8003792:	460c      	mov	r4, r1
 8003794:	4616      	mov	r6, r2
 8003796:	d505      	bpl.n	80037a4 <__swrite+0x1e>
 8003798:	2302      	movs	r3, #2
 800379a:	2200      	movs	r2, #0
 800379c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037a0:	f000 fa96 	bl	8003cd0 <_lseek_r>
 80037a4:	89a3      	ldrh	r3, [r4, #12]
 80037a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037ae:	81a3      	strh	r3, [r4, #12]
 80037b0:	4632      	mov	r2, r6
 80037b2:	463b      	mov	r3, r7
 80037b4:	4628      	mov	r0, r5
 80037b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037ba:	f000 b877 	b.w	80038ac <_write_r>

080037be <__sseek>:
 80037be:	b510      	push	{r4, lr}
 80037c0:	460c      	mov	r4, r1
 80037c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037c6:	f000 fa83 	bl	8003cd0 <_lseek_r>
 80037ca:	1c43      	adds	r3, r0, #1
 80037cc:	89a3      	ldrh	r3, [r4, #12]
 80037ce:	bf15      	itete	ne
 80037d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80037d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80037d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80037da:	81a3      	strheq	r3, [r4, #12]
 80037dc:	bf18      	it	ne
 80037de:	81a3      	strhne	r3, [r4, #12]
 80037e0:	bd10      	pop	{r4, pc}

080037e2 <__sclose>:
 80037e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e6:	f000 b8e9 	b.w	80039bc <_close_r>
	...

080037ec <__swbuf_r>:
 80037ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ee:	460e      	mov	r6, r1
 80037f0:	4614      	mov	r4, r2
 80037f2:	4605      	mov	r5, r0
 80037f4:	b118      	cbz	r0, 80037fe <__swbuf_r+0x12>
 80037f6:	6983      	ldr	r3, [r0, #24]
 80037f8:	b90b      	cbnz	r3, 80037fe <__swbuf_r+0x12>
 80037fa:	f000 f9df 	bl	8003bbc <__sinit>
 80037fe:	4b21      	ldr	r3, [pc, #132]	; (8003884 <__swbuf_r+0x98>)
 8003800:	429c      	cmp	r4, r3
 8003802:	d12a      	bne.n	800385a <__swbuf_r+0x6e>
 8003804:	686c      	ldr	r4, [r5, #4]
 8003806:	69a3      	ldr	r3, [r4, #24]
 8003808:	60a3      	str	r3, [r4, #8]
 800380a:	89a3      	ldrh	r3, [r4, #12]
 800380c:	071a      	lsls	r2, r3, #28
 800380e:	d52e      	bpl.n	800386e <__swbuf_r+0x82>
 8003810:	6923      	ldr	r3, [r4, #16]
 8003812:	b363      	cbz	r3, 800386e <__swbuf_r+0x82>
 8003814:	6923      	ldr	r3, [r4, #16]
 8003816:	6820      	ldr	r0, [r4, #0]
 8003818:	1ac0      	subs	r0, r0, r3
 800381a:	6963      	ldr	r3, [r4, #20]
 800381c:	b2f6      	uxtb	r6, r6
 800381e:	4283      	cmp	r3, r0
 8003820:	4637      	mov	r7, r6
 8003822:	dc04      	bgt.n	800382e <__swbuf_r+0x42>
 8003824:	4621      	mov	r1, r4
 8003826:	4628      	mov	r0, r5
 8003828:	f000 f95e 	bl	8003ae8 <_fflush_r>
 800382c:	bb28      	cbnz	r0, 800387a <__swbuf_r+0x8e>
 800382e:	68a3      	ldr	r3, [r4, #8]
 8003830:	3b01      	subs	r3, #1
 8003832:	60a3      	str	r3, [r4, #8]
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	6022      	str	r2, [r4, #0]
 800383a:	701e      	strb	r6, [r3, #0]
 800383c:	6963      	ldr	r3, [r4, #20]
 800383e:	3001      	adds	r0, #1
 8003840:	4283      	cmp	r3, r0
 8003842:	d004      	beq.n	800384e <__swbuf_r+0x62>
 8003844:	89a3      	ldrh	r3, [r4, #12]
 8003846:	07db      	lsls	r3, r3, #31
 8003848:	d519      	bpl.n	800387e <__swbuf_r+0x92>
 800384a:	2e0a      	cmp	r6, #10
 800384c:	d117      	bne.n	800387e <__swbuf_r+0x92>
 800384e:	4621      	mov	r1, r4
 8003850:	4628      	mov	r0, r5
 8003852:	f000 f949 	bl	8003ae8 <_fflush_r>
 8003856:	b190      	cbz	r0, 800387e <__swbuf_r+0x92>
 8003858:	e00f      	b.n	800387a <__swbuf_r+0x8e>
 800385a:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <__swbuf_r+0x9c>)
 800385c:	429c      	cmp	r4, r3
 800385e:	d101      	bne.n	8003864 <__swbuf_r+0x78>
 8003860:	68ac      	ldr	r4, [r5, #8]
 8003862:	e7d0      	b.n	8003806 <__swbuf_r+0x1a>
 8003864:	4b09      	ldr	r3, [pc, #36]	; (800388c <__swbuf_r+0xa0>)
 8003866:	429c      	cmp	r4, r3
 8003868:	bf08      	it	eq
 800386a:	68ec      	ldreq	r4, [r5, #12]
 800386c:	e7cb      	b.n	8003806 <__swbuf_r+0x1a>
 800386e:	4621      	mov	r1, r4
 8003870:	4628      	mov	r0, r5
 8003872:	f000 f82d 	bl	80038d0 <__swsetup_r>
 8003876:	2800      	cmp	r0, #0
 8003878:	d0cc      	beq.n	8003814 <__swbuf_r+0x28>
 800387a:	f04f 37ff 	mov.w	r7, #4294967295
 800387e:	4638      	mov	r0, r7
 8003880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003882:	bf00      	nop
 8003884:	08004fd0 	.word	0x08004fd0
 8003888:	08004ff0 	.word	0x08004ff0
 800388c:	08004fb0 	.word	0x08004fb0

08003890 <__ascii_wctomb>:
 8003890:	b149      	cbz	r1, 80038a6 <__ascii_wctomb+0x16>
 8003892:	2aff      	cmp	r2, #255	; 0xff
 8003894:	bf85      	ittet	hi
 8003896:	238a      	movhi	r3, #138	; 0x8a
 8003898:	6003      	strhi	r3, [r0, #0]
 800389a:	700a      	strbls	r2, [r1, #0]
 800389c:	f04f 30ff 	movhi.w	r0, #4294967295
 80038a0:	bf98      	it	ls
 80038a2:	2001      	movls	r0, #1
 80038a4:	4770      	bx	lr
 80038a6:	4608      	mov	r0, r1
 80038a8:	4770      	bx	lr
	...

080038ac <_write_r>:
 80038ac:	b538      	push	{r3, r4, r5, lr}
 80038ae:	4c07      	ldr	r4, [pc, #28]	; (80038cc <_write_r+0x20>)
 80038b0:	4605      	mov	r5, r0
 80038b2:	4608      	mov	r0, r1
 80038b4:	4611      	mov	r1, r2
 80038b6:	2200      	movs	r2, #0
 80038b8:	6022      	str	r2, [r4, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	f7fe fffa 	bl	80028b4 <_write>
 80038c0:	1c43      	adds	r3, r0, #1
 80038c2:	d102      	bne.n	80038ca <_write_r+0x1e>
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	b103      	cbz	r3, 80038ca <_write_r+0x1e>
 80038c8:	602b      	str	r3, [r5, #0]
 80038ca:	bd38      	pop	{r3, r4, r5, pc}
 80038cc:	20000b24 	.word	0x20000b24

080038d0 <__swsetup_r>:
 80038d0:	4b32      	ldr	r3, [pc, #200]	; (800399c <__swsetup_r+0xcc>)
 80038d2:	b570      	push	{r4, r5, r6, lr}
 80038d4:	681d      	ldr	r5, [r3, #0]
 80038d6:	4606      	mov	r6, r0
 80038d8:	460c      	mov	r4, r1
 80038da:	b125      	cbz	r5, 80038e6 <__swsetup_r+0x16>
 80038dc:	69ab      	ldr	r3, [r5, #24]
 80038de:	b913      	cbnz	r3, 80038e6 <__swsetup_r+0x16>
 80038e0:	4628      	mov	r0, r5
 80038e2:	f000 f96b 	bl	8003bbc <__sinit>
 80038e6:	4b2e      	ldr	r3, [pc, #184]	; (80039a0 <__swsetup_r+0xd0>)
 80038e8:	429c      	cmp	r4, r3
 80038ea:	d10f      	bne.n	800390c <__swsetup_r+0x3c>
 80038ec:	686c      	ldr	r4, [r5, #4]
 80038ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	0715      	lsls	r5, r2, #28
 80038f6:	d42c      	bmi.n	8003952 <__swsetup_r+0x82>
 80038f8:	06d0      	lsls	r0, r2, #27
 80038fa:	d411      	bmi.n	8003920 <__swsetup_r+0x50>
 80038fc:	2209      	movs	r2, #9
 80038fe:	6032      	str	r2, [r6, #0]
 8003900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003904:	81a3      	strh	r3, [r4, #12]
 8003906:	f04f 30ff 	mov.w	r0, #4294967295
 800390a:	e03e      	b.n	800398a <__swsetup_r+0xba>
 800390c:	4b25      	ldr	r3, [pc, #148]	; (80039a4 <__swsetup_r+0xd4>)
 800390e:	429c      	cmp	r4, r3
 8003910:	d101      	bne.n	8003916 <__swsetup_r+0x46>
 8003912:	68ac      	ldr	r4, [r5, #8]
 8003914:	e7eb      	b.n	80038ee <__swsetup_r+0x1e>
 8003916:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <__swsetup_r+0xd8>)
 8003918:	429c      	cmp	r4, r3
 800391a:	bf08      	it	eq
 800391c:	68ec      	ldreq	r4, [r5, #12]
 800391e:	e7e6      	b.n	80038ee <__swsetup_r+0x1e>
 8003920:	0751      	lsls	r1, r2, #29
 8003922:	d512      	bpl.n	800394a <__swsetup_r+0x7a>
 8003924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003926:	b141      	cbz	r1, 800393a <__swsetup_r+0x6a>
 8003928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800392c:	4299      	cmp	r1, r3
 800392e:	d002      	beq.n	8003936 <__swsetup_r+0x66>
 8003930:	4630      	mov	r0, r6
 8003932:	f000 fa67 	bl	8003e04 <_free_r>
 8003936:	2300      	movs	r3, #0
 8003938:	6363      	str	r3, [r4, #52]	; 0x34
 800393a:	89a3      	ldrh	r3, [r4, #12]
 800393c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003940:	81a3      	strh	r3, [r4, #12]
 8003942:	2300      	movs	r3, #0
 8003944:	6063      	str	r3, [r4, #4]
 8003946:	6923      	ldr	r3, [r4, #16]
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	89a3      	ldrh	r3, [r4, #12]
 800394c:	f043 0308 	orr.w	r3, r3, #8
 8003950:	81a3      	strh	r3, [r4, #12]
 8003952:	6923      	ldr	r3, [r4, #16]
 8003954:	b94b      	cbnz	r3, 800396a <__swsetup_r+0x9a>
 8003956:	89a3      	ldrh	r3, [r4, #12]
 8003958:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800395c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003960:	d003      	beq.n	800396a <__swsetup_r+0x9a>
 8003962:	4621      	mov	r1, r4
 8003964:	4630      	mov	r0, r6
 8003966:	f000 f9e9 	bl	8003d3c <__smakebuf_r>
 800396a:	89a2      	ldrh	r2, [r4, #12]
 800396c:	f012 0301 	ands.w	r3, r2, #1
 8003970:	d00c      	beq.n	800398c <__swsetup_r+0xbc>
 8003972:	2300      	movs	r3, #0
 8003974:	60a3      	str	r3, [r4, #8]
 8003976:	6963      	ldr	r3, [r4, #20]
 8003978:	425b      	negs	r3, r3
 800397a:	61a3      	str	r3, [r4, #24]
 800397c:	6923      	ldr	r3, [r4, #16]
 800397e:	b953      	cbnz	r3, 8003996 <__swsetup_r+0xc6>
 8003980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003984:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003988:	d1ba      	bne.n	8003900 <__swsetup_r+0x30>
 800398a:	bd70      	pop	{r4, r5, r6, pc}
 800398c:	0792      	lsls	r2, r2, #30
 800398e:	bf58      	it	pl
 8003990:	6963      	ldrpl	r3, [r4, #20]
 8003992:	60a3      	str	r3, [r4, #8]
 8003994:	e7f2      	b.n	800397c <__swsetup_r+0xac>
 8003996:	2000      	movs	r0, #0
 8003998:	e7f7      	b.n	800398a <__swsetup_r+0xba>
 800399a:	bf00      	nop
 800399c:	20000050 	.word	0x20000050
 80039a0:	08004fd0 	.word	0x08004fd0
 80039a4:	08004ff0 	.word	0x08004ff0
 80039a8:	08004fb0 	.word	0x08004fb0

080039ac <abort>:
 80039ac:	b508      	push	{r3, lr}
 80039ae:	2006      	movs	r0, #6
 80039b0:	f000 ffc6 	bl	8004940 <raise>
 80039b4:	2001      	movs	r0, #1
 80039b6:	f7ff fa73 	bl	8002ea0 <_exit>
	...

080039bc <_close_r>:
 80039bc:	b538      	push	{r3, r4, r5, lr}
 80039be:	4c06      	ldr	r4, [pc, #24]	; (80039d8 <_close_r+0x1c>)
 80039c0:	2300      	movs	r3, #0
 80039c2:	4605      	mov	r5, r0
 80039c4:	4608      	mov	r0, r1
 80039c6:	6023      	str	r3, [r4, #0]
 80039c8:	f7ff fa91 	bl	8002eee <_close>
 80039cc:	1c43      	adds	r3, r0, #1
 80039ce:	d102      	bne.n	80039d6 <_close_r+0x1a>
 80039d0:	6823      	ldr	r3, [r4, #0]
 80039d2:	b103      	cbz	r3, 80039d6 <_close_r+0x1a>
 80039d4:	602b      	str	r3, [r5, #0]
 80039d6:	bd38      	pop	{r3, r4, r5, pc}
 80039d8:	20000b24 	.word	0x20000b24

080039dc <__sflush_r>:
 80039dc:	898a      	ldrh	r2, [r1, #12]
 80039de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e2:	4605      	mov	r5, r0
 80039e4:	0710      	lsls	r0, r2, #28
 80039e6:	460c      	mov	r4, r1
 80039e8:	d458      	bmi.n	8003a9c <__sflush_r+0xc0>
 80039ea:	684b      	ldr	r3, [r1, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	dc05      	bgt.n	80039fc <__sflush_r+0x20>
 80039f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	dc02      	bgt.n	80039fc <__sflush_r+0x20>
 80039f6:	2000      	movs	r0, #0
 80039f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039fe:	2e00      	cmp	r6, #0
 8003a00:	d0f9      	beq.n	80039f6 <__sflush_r+0x1a>
 8003a02:	2300      	movs	r3, #0
 8003a04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a08:	682f      	ldr	r7, [r5, #0]
 8003a0a:	6a21      	ldr	r1, [r4, #32]
 8003a0c:	602b      	str	r3, [r5, #0]
 8003a0e:	d032      	beq.n	8003a76 <__sflush_r+0x9a>
 8003a10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a12:	89a3      	ldrh	r3, [r4, #12]
 8003a14:	075a      	lsls	r2, r3, #29
 8003a16:	d505      	bpl.n	8003a24 <__sflush_r+0x48>
 8003a18:	6863      	ldr	r3, [r4, #4]
 8003a1a:	1ac0      	subs	r0, r0, r3
 8003a1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a1e:	b10b      	cbz	r3, 8003a24 <__sflush_r+0x48>
 8003a20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a22:	1ac0      	subs	r0, r0, r3
 8003a24:	2300      	movs	r3, #0
 8003a26:	4602      	mov	r2, r0
 8003a28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a2a:	6a21      	ldr	r1, [r4, #32]
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	47b0      	blx	r6
 8003a30:	1c43      	adds	r3, r0, #1
 8003a32:	89a3      	ldrh	r3, [r4, #12]
 8003a34:	d106      	bne.n	8003a44 <__sflush_r+0x68>
 8003a36:	6829      	ldr	r1, [r5, #0]
 8003a38:	291d      	cmp	r1, #29
 8003a3a:	d848      	bhi.n	8003ace <__sflush_r+0xf2>
 8003a3c:	4a29      	ldr	r2, [pc, #164]	; (8003ae4 <__sflush_r+0x108>)
 8003a3e:	40ca      	lsrs	r2, r1
 8003a40:	07d6      	lsls	r6, r2, #31
 8003a42:	d544      	bpl.n	8003ace <__sflush_r+0xf2>
 8003a44:	2200      	movs	r2, #0
 8003a46:	6062      	str	r2, [r4, #4]
 8003a48:	04d9      	lsls	r1, r3, #19
 8003a4a:	6922      	ldr	r2, [r4, #16]
 8003a4c:	6022      	str	r2, [r4, #0]
 8003a4e:	d504      	bpl.n	8003a5a <__sflush_r+0x7e>
 8003a50:	1c42      	adds	r2, r0, #1
 8003a52:	d101      	bne.n	8003a58 <__sflush_r+0x7c>
 8003a54:	682b      	ldr	r3, [r5, #0]
 8003a56:	b903      	cbnz	r3, 8003a5a <__sflush_r+0x7e>
 8003a58:	6560      	str	r0, [r4, #84]	; 0x54
 8003a5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a5c:	602f      	str	r7, [r5, #0]
 8003a5e:	2900      	cmp	r1, #0
 8003a60:	d0c9      	beq.n	80039f6 <__sflush_r+0x1a>
 8003a62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a66:	4299      	cmp	r1, r3
 8003a68:	d002      	beq.n	8003a70 <__sflush_r+0x94>
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	f000 f9ca 	bl	8003e04 <_free_r>
 8003a70:	2000      	movs	r0, #0
 8003a72:	6360      	str	r0, [r4, #52]	; 0x34
 8003a74:	e7c0      	b.n	80039f8 <__sflush_r+0x1c>
 8003a76:	2301      	movs	r3, #1
 8003a78:	4628      	mov	r0, r5
 8003a7a:	47b0      	blx	r6
 8003a7c:	1c41      	adds	r1, r0, #1
 8003a7e:	d1c8      	bne.n	8003a12 <__sflush_r+0x36>
 8003a80:	682b      	ldr	r3, [r5, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0c5      	beq.n	8003a12 <__sflush_r+0x36>
 8003a86:	2b1d      	cmp	r3, #29
 8003a88:	d001      	beq.n	8003a8e <__sflush_r+0xb2>
 8003a8a:	2b16      	cmp	r3, #22
 8003a8c:	d101      	bne.n	8003a92 <__sflush_r+0xb6>
 8003a8e:	602f      	str	r7, [r5, #0]
 8003a90:	e7b1      	b.n	80039f6 <__sflush_r+0x1a>
 8003a92:	89a3      	ldrh	r3, [r4, #12]
 8003a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a98:	81a3      	strh	r3, [r4, #12]
 8003a9a:	e7ad      	b.n	80039f8 <__sflush_r+0x1c>
 8003a9c:	690f      	ldr	r7, [r1, #16]
 8003a9e:	2f00      	cmp	r7, #0
 8003aa0:	d0a9      	beq.n	80039f6 <__sflush_r+0x1a>
 8003aa2:	0793      	lsls	r3, r2, #30
 8003aa4:	680e      	ldr	r6, [r1, #0]
 8003aa6:	bf08      	it	eq
 8003aa8:	694b      	ldreq	r3, [r1, #20]
 8003aaa:	600f      	str	r7, [r1, #0]
 8003aac:	bf18      	it	ne
 8003aae:	2300      	movne	r3, #0
 8003ab0:	eba6 0807 	sub.w	r8, r6, r7
 8003ab4:	608b      	str	r3, [r1, #8]
 8003ab6:	f1b8 0f00 	cmp.w	r8, #0
 8003aba:	dd9c      	ble.n	80039f6 <__sflush_r+0x1a>
 8003abc:	4643      	mov	r3, r8
 8003abe:	463a      	mov	r2, r7
 8003ac0:	6a21      	ldr	r1, [r4, #32]
 8003ac2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	47b0      	blx	r6
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	dc06      	bgt.n	8003ada <__sflush_r+0xfe>
 8003acc:	89a3      	ldrh	r3, [r4, #12]
 8003ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ad2:	81a3      	strh	r3, [r4, #12]
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	e78e      	b.n	80039f8 <__sflush_r+0x1c>
 8003ada:	4407      	add	r7, r0
 8003adc:	eba8 0800 	sub.w	r8, r8, r0
 8003ae0:	e7e9      	b.n	8003ab6 <__sflush_r+0xda>
 8003ae2:	bf00      	nop
 8003ae4:	20400001 	.word	0x20400001

08003ae8 <_fflush_r>:
 8003ae8:	b538      	push	{r3, r4, r5, lr}
 8003aea:	690b      	ldr	r3, [r1, #16]
 8003aec:	4605      	mov	r5, r0
 8003aee:	460c      	mov	r4, r1
 8003af0:	b1db      	cbz	r3, 8003b2a <_fflush_r+0x42>
 8003af2:	b118      	cbz	r0, 8003afc <_fflush_r+0x14>
 8003af4:	6983      	ldr	r3, [r0, #24]
 8003af6:	b90b      	cbnz	r3, 8003afc <_fflush_r+0x14>
 8003af8:	f000 f860 	bl	8003bbc <__sinit>
 8003afc:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <_fflush_r+0x48>)
 8003afe:	429c      	cmp	r4, r3
 8003b00:	d109      	bne.n	8003b16 <_fflush_r+0x2e>
 8003b02:	686c      	ldr	r4, [r5, #4]
 8003b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b08:	b17b      	cbz	r3, 8003b2a <_fflush_r+0x42>
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b12:	f7ff bf63 	b.w	80039dc <__sflush_r>
 8003b16:	4b07      	ldr	r3, [pc, #28]	; (8003b34 <_fflush_r+0x4c>)
 8003b18:	429c      	cmp	r4, r3
 8003b1a:	d101      	bne.n	8003b20 <_fflush_r+0x38>
 8003b1c:	68ac      	ldr	r4, [r5, #8]
 8003b1e:	e7f1      	b.n	8003b04 <_fflush_r+0x1c>
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <_fflush_r+0x50>)
 8003b22:	429c      	cmp	r4, r3
 8003b24:	bf08      	it	eq
 8003b26:	68ec      	ldreq	r4, [r5, #12]
 8003b28:	e7ec      	b.n	8003b04 <_fflush_r+0x1c>
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	bd38      	pop	{r3, r4, r5, pc}
 8003b2e:	bf00      	nop
 8003b30:	08004fd0 	.word	0x08004fd0
 8003b34:	08004ff0 	.word	0x08004ff0
 8003b38:	08004fb0 	.word	0x08004fb0

08003b3c <std>:
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	b510      	push	{r4, lr}
 8003b40:	4604      	mov	r4, r0
 8003b42:	e9c0 3300 	strd	r3, r3, [r0]
 8003b46:	6083      	str	r3, [r0, #8]
 8003b48:	8181      	strh	r1, [r0, #12]
 8003b4a:	6643      	str	r3, [r0, #100]	; 0x64
 8003b4c:	81c2      	strh	r2, [r0, #14]
 8003b4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b52:	6183      	str	r3, [r0, #24]
 8003b54:	4619      	mov	r1, r3
 8003b56:	2208      	movs	r2, #8
 8003b58:	305c      	adds	r0, #92	; 0x5c
 8003b5a:	f7ff fae7 	bl	800312c <memset>
 8003b5e:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <std+0x38>)
 8003b60:	6263      	str	r3, [r4, #36]	; 0x24
 8003b62:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <std+0x3c>)
 8003b64:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b66:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <std+0x40>)
 8003b68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b6a:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <std+0x44>)
 8003b6c:	6224      	str	r4, [r4, #32]
 8003b6e:	6323      	str	r3, [r4, #48]	; 0x30
 8003b70:	bd10      	pop	{r4, pc}
 8003b72:	bf00      	nop
 8003b74:	08003761 	.word	0x08003761
 8003b78:	08003787 	.word	0x08003787
 8003b7c:	080037bf 	.word	0x080037bf
 8003b80:	080037e3 	.word	0x080037e3

08003b84 <_cleanup_r>:
 8003b84:	4901      	ldr	r1, [pc, #4]	; (8003b8c <_cleanup_r+0x8>)
 8003b86:	f000 b885 	b.w	8003c94 <_fwalk_reent>
 8003b8a:	bf00      	nop
 8003b8c:	08003ae9 	.word	0x08003ae9

08003b90 <__sfmoreglue>:
 8003b90:	b570      	push	{r4, r5, r6, lr}
 8003b92:	1e4a      	subs	r2, r1, #1
 8003b94:	2568      	movs	r5, #104	; 0x68
 8003b96:	4355      	muls	r5, r2
 8003b98:	460e      	mov	r6, r1
 8003b9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b9e:	f000 f97f 	bl	8003ea0 <_malloc_r>
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	b140      	cbz	r0, 8003bb8 <__sfmoreglue+0x28>
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	e9c0 1600 	strd	r1, r6, [r0]
 8003bac:	300c      	adds	r0, #12
 8003bae:	60a0      	str	r0, [r4, #8]
 8003bb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003bb4:	f7ff faba 	bl	800312c <memset>
 8003bb8:	4620      	mov	r0, r4
 8003bba:	bd70      	pop	{r4, r5, r6, pc}

08003bbc <__sinit>:
 8003bbc:	6983      	ldr	r3, [r0, #24]
 8003bbe:	b510      	push	{r4, lr}
 8003bc0:	4604      	mov	r4, r0
 8003bc2:	bb33      	cbnz	r3, 8003c12 <__sinit+0x56>
 8003bc4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003bc8:	6503      	str	r3, [r0, #80]	; 0x50
 8003bca:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <__sinit+0x58>)
 8003bcc:	4a12      	ldr	r2, [pc, #72]	; (8003c18 <__sinit+0x5c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6282      	str	r2, [r0, #40]	; 0x28
 8003bd2:	4298      	cmp	r0, r3
 8003bd4:	bf04      	itt	eq
 8003bd6:	2301      	moveq	r3, #1
 8003bd8:	6183      	streq	r3, [r0, #24]
 8003bda:	f000 f81f 	bl	8003c1c <__sfp>
 8003bde:	6060      	str	r0, [r4, #4]
 8003be0:	4620      	mov	r0, r4
 8003be2:	f000 f81b 	bl	8003c1c <__sfp>
 8003be6:	60a0      	str	r0, [r4, #8]
 8003be8:	4620      	mov	r0, r4
 8003bea:	f000 f817 	bl	8003c1c <__sfp>
 8003bee:	2200      	movs	r2, #0
 8003bf0:	60e0      	str	r0, [r4, #12]
 8003bf2:	2104      	movs	r1, #4
 8003bf4:	6860      	ldr	r0, [r4, #4]
 8003bf6:	f7ff ffa1 	bl	8003b3c <std>
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	2109      	movs	r1, #9
 8003bfe:	68a0      	ldr	r0, [r4, #8]
 8003c00:	f7ff ff9c 	bl	8003b3c <std>
 8003c04:	2202      	movs	r2, #2
 8003c06:	2112      	movs	r1, #18
 8003c08:	68e0      	ldr	r0, [r4, #12]
 8003c0a:	f7ff ff97 	bl	8003b3c <std>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	61a3      	str	r3, [r4, #24]
 8003c12:	bd10      	pop	{r4, pc}
 8003c14:	08004e6c 	.word	0x08004e6c
 8003c18:	08003b85 	.word	0x08003b85

08003c1c <__sfp>:
 8003c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1e:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <__sfp+0x70>)
 8003c20:	681e      	ldr	r6, [r3, #0]
 8003c22:	69b3      	ldr	r3, [r6, #24]
 8003c24:	4607      	mov	r7, r0
 8003c26:	b913      	cbnz	r3, 8003c2e <__sfp+0x12>
 8003c28:	4630      	mov	r0, r6
 8003c2a:	f7ff ffc7 	bl	8003bbc <__sinit>
 8003c2e:	3648      	adds	r6, #72	; 0x48
 8003c30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	d503      	bpl.n	8003c40 <__sfp+0x24>
 8003c38:	6833      	ldr	r3, [r6, #0]
 8003c3a:	b133      	cbz	r3, 8003c4a <__sfp+0x2e>
 8003c3c:	6836      	ldr	r6, [r6, #0]
 8003c3e:	e7f7      	b.n	8003c30 <__sfp+0x14>
 8003c40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c44:	b16d      	cbz	r5, 8003c62 <__sfp+0x46>
 8003c46:	3468      	adds	r4, #104	; 0x68
 8003c48:	e7f4      	b.n	8003c34 <__sfp+0x18>
 8003c4a:	2104      	movs	r1, #4
 8003c4c:	4638      	mov	r0, r7
 8003c4e:	f7ff ff9f 	bl	8003b90 <__sfmoreglue>
 8003c52:	6030      	str	r0, [r6, #0]
 8003c54:	2800      	cmp	r0, #0
 8003c56:	d1f1      	bne.n	8003c3c <__sfp+0x20>
 8003c58:	230c      	movs	r3, #12
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	4604      	mov	r4, r0
 8003c5e:	4620      	mov	r0, r4
 8003c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c62:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <__sfp+0x74>)
 8003c64:	6665      	str	r5, [r4, #100]	; 0x64
 8003c66:	e9c4 5500 	strd	r5, r5, [r4]
 8003c6a:	60a5      	str	r5, [r4, #8]
 8003c6c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003c70:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003c74:	2208      	movs	r2, #8
 8003c76:	4629      	mov	r1, r5
 8003c78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c7c:	f7ff fa56 	bl	800312c <memset>
 8003c80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003c84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c88:	e7e9      	b.n	8003c5e <__sfp+0x42>
 8003c8a:	bf00      	nop
 8003c8c:	08004e6c 	.word	0x08004e6c
 8003c90:	ffff0001 	.word	0xffff0001

08003c94 <_fwalk_reent>:
 8003c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c98:	4680      	mov	r8, r0
 8003c9a:	4689      	mov	r9, r1
 8003c9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ca0:	2600      	movs	r6, #0
 8003ca2:	b914      	cbnz	r4, 8003caa <_fwalk_reent+0x16>
 8003ca4:	4630      	mov	r0, r6
 8003ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003caa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003cae:	3f01      	subs	r7, #1
 8003cb0:	d501      	bpl.n	8003cb6 <_fwalk_reent+0x22>
 8003cb2:	6824      	ldr	r4, [r4, #0]
 8003cb4:	e7f5      	b.n	8003ca2 <_fwalk_reent+0xe>
 8003cb6:	89ab      	ldrh	r3, [r5, #12]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d907      	bls.n	8003ccc <_fwalk_reent+0x38>
 8003cbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	d003      	beq.n	8003ccc <_fwalk_reent+0x38>
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	4640      	mov	r0, r8
 8003cc8:	47c8      	blx	r9
 8003cca:	4306      	orrs	r6, r0
 8003ccc:	3568      	adds	r5, #104	; 0x68
 8003cce:	e7ee      	b.n	8003cae <_fwalk_reent+0x1a>

08003cd0 <_lseek_r>:
 8003cd0:	b538      	push	{r3, r4, r5, lr}
 8003cd2:	4c07      	ldr	r4, [pc, #28]	; (8003cf0 <_lseek_r+0x20>)
 8003cd4:	4605      	mov	r5, r0
 8003cd6:	4608      	mov	r0, r1
 8003cd8:	4611      	mov	r1, r2
 8003cda:	2200      	movs	r2, #0
 8003cdc:	6022      	str	r2, [r4, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f7ff f92c 	bl	8002f3c <_lseek>
 8003ce4:	1c43      	adds	r3, r0, #1
 8003ce6:	d102      	bne.n	8003cee <_lseek_r+0x1e>
 8003ce8:	6823      	ldr	r3, [r4, #0]
 8003cea:	b103      	cbz	r3, 8003cee <_lseek_r+0x1e>
 8003cec:	602b      	str	r3, [r5, #0]
 8003cee:	bd38      	pop	{r3, r4, r5, pc}
 8003cf0:	20000b24 	.word	0x20000b24

08003cf4 <__swhatbuf_r>:
 8003cf4:	b570      	push	{r4, r5, r6, lr}
 8003cf6:	460e      	mov	r6, r1
 8003cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cfc:	2900      	cmp	r1, #0
 8003cfe:	b096      	sub	sp, #88	; 0x58
 8003d00:	4614      	mov	r4, r2
 8003d02:	461d      	mov	r5, r3
 8003d04:	da07      	bge.n	8003d16 <__swhatbuf_r+0x22>
 8003d06:	2300      	movs	r3, #0
 8003d08:	602b      	str	r3, [r5, #0]
 8003d0a:	89b3      	ldrh	r3, [r6, #12]
 8003d0c:	061a      	lsls	r2, r3, #24
 8003d0e:	d410      	bmi.n	8003d32 <__swhatbuf_r+0x3e>
 8003d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d14:	e00e      	b.n	8003d34 <__swhatbuf_r+0x40>
 8003d16:	466a      	mov	r2, sp
 8003d18:	f000 ff82 	bl	8004c20 <_fstat_r>
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	dbf2      	blt.n	8003d06 <__swhatbuf_r+0x12>
 8003d20:	9a01      	ldr	r2, [sp, #4]
 8003d22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d2a:	425a      	negs	r2, r3
 8003d2c:	415a      	adcs	r2, r3
 8003d2e:	602a      	str	r2, [r5, #0]
 8003d30:	e7ee      	b.n	8003d10 <__swhatbuf_r+0x1c>
 8003d32:	2340      	movs	r3, #64	; 0x40
 8003d34:	2000      	movs	r0, #0
 8003d36:	6023      	str	r3, [r4, #0]
 8003d38:	b016      	add	sp, #88	; 0x58
 8003d3a:	bd70      	pop	{r4, r5, r6, pc}

08003d3c <__smakebuf_r>:
 8003d3c:	898b      	ldrh	r3, [r1, #12]
 8003d3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d40:	079d      	lsls	r5, r3, #30
 8003d42:	4606      	mov	r6, r0
 8003d44:	460c      	mov	r4, r1
 8003d46:	d507      	bpl.n	8003d58 <__smakebuf_r+0x1c>
 8003d48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d4c:	6023      	str	r3, [r4, #0]
 8003d4e:	6123      	str	r3, [r4, #16]
 8003d50:	2301      	movs	r3, #1
 8003d52:	6163      	str	r3, [r4, #20]
 8003d54:	b002      	add	sp, #8
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
 8003d58:	ab01      	add	r3, sp, #4
 8003d5a:	466a      	mov	r2, sp
 8003d5c:	f7ff ffca 	bl	8003cf4 <__swhatbuf_r>
 8003d60:	9900      	ldr	r1, [sp, #0]
 8003d62:	4605      	mov	r5, r0
 8003d64:	4630      	mov	r0, r6
 8003d66:	f000 f89b 	bl	8003ea0 <_malloc_r>
 8003d6a:	b948      	cbnz	r0, 8003d80 <__smakebuf_r+0x44>
 8003d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d70:	059a      	lsls	r2, r3, #22
 8003d72:	d4ef      	bmi.n	8003d54 <__smakebuf_r+0x18>
 8003d74:	f023 0303 	bic.w	r3, r3, #3
 8003d78:	f043 0302 	orr.w	r3, r3, #2
 8003d7c:	81a3      	strh	r3, [r4, #12]
 8003d7e:	e7e3      	b.n	8003d48 <__smakebuf_r+0xc>
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <__smakebuf_r+0x7c>)
 8003d82:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d84:	89a3      	ldrh	r3, [r4, #12]
 8003d86:	6020      	str	r0, [r4, #0]
 8003d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d8c:	81a3      	strh	r3, [r4, #12]
 8003d8e:	9b00      	ldr	r3, [sp, #0]
 8003d90:	6163      	str	r3, [r4, #20]
 8003d92:	9b01      	ldr	r3, [sp, #4]
 8003d94:	6120      	str	r0, [r4, #16]
 8003d96:	b15b      	cbz	r3, 8003db0 <__smakebuf_r+0x74>
 8003d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	f000 ff51 	bl	8004c44 <_isatty_r>
 8003da2:	b128      	cbz	r0, 8003db0 <__smakebuf_r+0x74>
 8003da4:	89a3      	ldrh	r3, [r4, #12]
 8003da6:	f023 0303 	bic.w	r3, r3, #3
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	81a3      	strh	r3, [r4, #12]
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	431d      	orrs	r5, r3
 8003db4:	81a5      	strh	r5, [r4, #12]
 8003db6:	e7cd      	b.n	8003d54 <__smakebuf_r+0x18>
 8003db8:	08003b85 	.word	0x08003b85

08003dbc <memcpy>:
 8003dbc:	b510      	push	{r4, lr}
 8003dbe:	1e43      	subs	r3, r0, #1
 8003dc0:	440a      	add	r2, r1
 8003dc2:	4291      	cmp	r1, r2
 8003dc4:	d100      	bne.n	8003dc8 <memcpy+0xc>
 8003dc6:	bd10      	pop	{r4, pc}
 8003dc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dd0:	e7f7      	b.n	8003dc2 <memcpy+0x6>

08003dd2 <memmove>:
 8003dd2:	4288      	cmp	r0, r1
 8003dd4:	b510      	push	{r4, lr}
 8003dd6:	eb01 0302 	add.w	r3, r1, r2
 8003dda:	d807      	bhi.n	8003dec <memmove+0x1a>
 8003ddc:	1e42      	subs	r2, r0, #1
 8003dde:	4299      	cmp	r1, r3
 8003de0:	d00a      	beq.n	8003df8 <memmove+0x26>
 8003de2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003de6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003dea:	e7f8      	b.n	8003dde <memmove+0xc>
 8003dec:	4283      	cmp	r3, r0
 8003dee:	d9f5      	bls.n	8003ddc <memmove+0xa>
 8003df0:	1881      	adds	r1, r0, r2
 8003df2:	1ad2      	subs	r2, r2, r3
 8003df4:	42d3      	cmn	r3, r2
 8003df6:	d100      	bne.n	8003dfa <memmove+0x28>
 8003df8:	bd10      	pop	{r4, pc}
 8003dfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dfe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003e02:	e7f7      	b.n	8003df4 <memmove+0x22>

08003e04 <_free_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	4605      	mov	r5, r0
 8003e08:	2900      	cmp	r1, #0
 8003e0a:	d045      	beq.n	8003e98 <_free_r+0x94>
 8003e0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e10:	1f0c      	subs	r4, r1, #4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	bfb8      	it	lt
 8003e16:	18e4      	addlt	r4, r4, r3
 8003e18:	f000 ff24 	bl	8004c64 <__malloc_lock>
 8003e1c:	4a1f      	ldr	r2, [pc, #124]	; (8003e9c <_free_r+0x98>)
 8003e1e:	6813      	ldr	r3, [r2, #0]
 8003e20:	4610      	mov	r0, r2
 8003e22:	b933      	cbnz	r3, 8003e32 <_free_r+0x2e>
 8003e24:	6063      	str	r3, [r4, #4]
 8003e26:	6014      	str	r4, [r2, #0]
 8003e28:	4628      	mov	r0, r5
 8003e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e2e:	f000 bf1a 	b.w	8004c66 <__malloc_unlock>
 8003e32:	42a3      	cmp	r3, r4
 8003e34:	d90c      	bls.n	8003e50 <_free_r+0x4c>
 8003e36:	6821      	ldr	r1, [r4, #0]
 8003e38:	1862      	adds	r2, r4, r1
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	bf04      	itt	eq
 8003e3e:	681a      	ldreq	r2, [r3, #0]
 8003e40:	685b      	ldreq	r3, [r3, #4]
 8003e42:	6063      	str	r3, [r4, #4]
 8003e44:	bf04      	itt	eq
 8003e46:	1852      	addeq	r2, r2, r1
 8003e48:	6022      	streq	r2, [r4, #0]
 8003e4a:	6004      	str	r4, [r0, #0]
 8003e4c:	e7ec      	b.n	8003e28 <_free_r+0x24>
 8003e4e:	4613      	mov	r3, r2
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	b10a      	cbz	r2, 8003e58 <_free_r+0x54>
 8003e54:	42a2      	cmp	r2, r4
 8003e56:	d9fa      	bls.n	8003e4e <_free_r+0x4a>
 8003e58:	6819      	ldr	r1, [r3, #0]
 8003e5a:	1858      	adds	r0, r3, r1
 8003e5c:	42a0      	cmp	r0, r4
 8003e5e:	d10b      	bne.n	8003e78 <_free_r+0x74>
 8003e60:	6820      	ldr	r0, [r4, #0]
 8003e62:	4401      	add	r1, r0
 8003e64:	1858      	adds	r0, r3, r1
 8003e66:	4282      	cmp	r2, r0
 8003e68:	6019      	str	r1, [r3, #0]
 8003e6a:	d1dd      	bne.n	8003e28 <_free_r+0x24>
 8003e6c:	6810      	ldr	r0, [r2, #0]
 8003e6e:	6852      	ldr	r2, [r2, #4]
 8003e70:	605a      	str	r2, [r3, #4]
 8003e72:	4401      	add	r1, r0
 8003e74:	6019      	str	r1, [r3, #0]
 8003e76:	e7d7      	b.n	8003e28 <_free_r+0x24>
 8003e78:	d902      	bls.n	8003e80 <_free_r+0x7c>
 8003e7a:	230c      	movs	r3, #12
 8003e7c:	602b      	str	r3, [r5, #0]
 8003e7e:	e7d3      	b.n	8003e28 <_free_r+0x24>
 8003e80:	6820      	ldr	r0, [r4, #0]
 8003e82:	1821      	adds	r1, r4, r0
 8003e84:	428a      	cmp	r2, r1
 8003e86:	bf04      	itt	eq
 8003e88:	6811      	ldreq	r1, [r2, #0]
 8003e8a:	6852      	ldreq	r2, [r2, #4]
 8003e8c:	6062      	str	r2, [r4, #4]
 8003e8e:	bf04      	itt	eq
 8003e90:	1809      	addeq	r1, r1, r0
 8003e92:	6021      	streq	r1, [r4, #0]
 8003e94:	605c      	str	r4, [r3, #4]
 8003e96:	e7c7      	b.n	8003e28 <_free_r+0x24>
 8003e98:	bd38      	pop	{r3, r4, r5, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000ad8 	.word	0x20000ad8

08003ea0 <_malloc_r>:
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	1ccd      	adds	r5, r1, #3
 8003ea4:	f025 0503 	bic.w	r5, r5, #3
 8003ea8:	3508      	adds	r5, #8
 8003eaa:	2d0c      	cmp	r5, #12
 8003eac:	bf38      	it	cc
 8003eae:	250c      	movcc	r5, #12
 8003eb0:	2d00      	cmp	r5, #0
 8003eb2:	4606      	mov	r6, r0
 8003eb4:	db01      	blt.n	8003eba <_malloc_r+0x1a>
 8003eb6:	42a9      	cmp	r1, r5
 8003eb8:	d903      	bls.n	8003ec2 <_malloc_r+0x22>
 8003eba:	230c      	movs	r3, #12
 8003ebc:	6033      	str	r3, [r6, #0]
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	bd70      	pop	{r4, r5, r6, pc}
 8003ec2:	f000 fecf 	bl	8004c64 <__malloc_lock>
 8003ec6:	4a21      	ldr	r2, [pc, #132]	; (8003f4c <_malloc_r+0xac>)
 8003ec8:	6814      	ldr	r4, [r2, #0]
 8003eca:	4621      	mov	r1, r4
 8003ecc:	b991      	cbnz	r1, 8003ef4 <_malloc_r+0x54>
 8003ece:	4c20      	ldr	r4, [pc, #128]	; (8003f50 <_malloc_r+0xb0>)
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	b91b      	cbnz	r3, 8003edc <_malloc_r+0x3c>
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	f000 fcc9 	bl	800486c <_sbrk_r>
 8003eda:	6020      	str	r0, [r4, #0]
 8003edc:	4629      	mov	r1, r5
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f000 fcc4 	bl	800486c <_sbrk_r>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d124      	bne.n	8003f32 <_malloc_r+0x92>
 8003ee8:	230c      	movs	r3, #12
 8003eea:	6033      	str	r3, [r6, #0]
 8003eec:	4630      	mov	r0, r6
 8003eee:	f000 feba 	bl	8004c66 <__malloc_unlock>
 8003ef2:	e7e4      	b.n	8003ebe <_malloc_r+0x1e>
 8003ef4:	680b      	ldr	r3, [r1, #0]
 8003ef6:	1b5b      	subs	r3, r3, r5
 8003ef8:	d418      	bmi.n	8003f2c <_malloc_r+0x8c>
 8003efa:	2b0b      	cmp	r3, #11
 8003efc:	d90f      	bls.n	8003f1e <_malloc_r+0x7e>
 8003efe:	600b      	str	r3, [r1, #0]
 8003f00:	50cd      	str	r5, [r1, r3]
 8003f02:	18cc      	adds	r4, r1, r3
 8003f04:	4630      	mov	r0, r6
 8003f06:	f000 feae 	bl	8004c66 <__malloc_unlock>
 8003f0a:	f104 000b 	add.w	r0, r4, #11
 8003f0e:	1d23      	adds	r3, r4, #4
 8003f10:	f020 0007 	bic.w	r0, r0, #7
 8003f14:	1ac3      	subs	r3, r0, r3
 8003f16:	d0d3      	beq.n	8003ec0 <_malloc_r+0x20>
 8003f18:	425a      	negs	r2, r3
 8003f1a:	50e2      	str	r2, [r4, r3]
 8003f1c:	e7d0      	b.n	8003ec0 <_malloc_r+0x20>
 8003f1e:	428c      	cmp	r4, r1
 8003f20:	684b      	ldr	r3, [r1, #4]
 8003f22:	bf16      	itet	ne
 8003f24:	6063      	strne	r3, [r4, #4]
 8003f26:	6013      	streq	r3, [r2, #0]
 8003f28:	460c      	movne	r4, r1
 8003f2a:	e7eb      	b.n	8003f04 <_malloc_r+0x64>
 8003f2c:	460c      	mov	r4, r1
 8003f2e:	6849      	ldr	r1, [r1, #4]
 8003f30:	e7cc      	b.n	8003ecc <_malloc_r+0x2c>
 8003f32:	1cc4      	adds	r4, r0, #3
 8003f34:	f024 0403 	bic.w	r4, r4, #3
 8003f38:	42a0      	cmp	r0, r4
 8003f3a:	d005      	beq.n	8003f48 <_malloc_r+0xa8>
 8003f3c:	1a21      	subs	r1, r4, r0
 8003f3e:	4630      	mov	r0, r6
 8003f40:	f000 fc94 	bl	800486c <_sbrk_r>
 8003f44:	3001      	adds	r0, #1
 8003f46:	d0cf      	beq.n	8003ee8 <_malloc_r+0x48>
 8003f48:	6025      	str	r5, [r4, #0]
 8003f4a:	e7db      	b.n	8003f04 <_malloc_r+0x64>
 8003f4c:	20000ad8 	.word	0x20000ad8
 8003f50:	20000adc 	.word	0x20000adc

08003f54 <_realloc_r>:
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f56:	4607      	mov	r7, r0
 8003f58:	4614      	mov	r4, r2
 8003f5a:	460e      	mov	r6, r1
 8003f5c:	b921      	cbnz	r1, 8003f68 <_realloc_r+0x14>
 8003f5e:	4611      	mov	r1, r2
 8003f60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f64:	f7ff bf9c 	b.w	8003ea0 <_malloc_r>
 8003f68:	b922      	cbnz	r2, 8003f74 <_realloc_r+0x20>
 8003f6a:	f7ff ff4b 	bl	8003e04 <_free_r>
 8003f6e:	4625      	mov	r5, r4
 8003f70:	4628      	mov	r0, r5
 8003f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f74:	f000 fe78 	bl	8004c68 <_malloc_usable_size_r>
 8003f78:	42a0      	cmp	r0, r4
 8003f7a:	d20f      	bcs.n	8003f9c <_realloc_r+0x48>
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	4638      	mov	r0, r7
 8003f80:	f7ff ff8e 	bl	8003ea0 <_malloc_r>
 8003f84:	4605      	mov	r5, r0
 8003f86:	2800      	cmp	r0, #0
 8003f88:	d0f2      	beq.n	8003f70 <_realloc_r+0x1c>
 8003f8a:	4631      	mov	r1, r6
 8003f8c:	4622      	mov	r2, r4
 8003f8e:	f7ff ff15 	bl	8003dbc <memcpy>
 8003f92:	4631      	mov	r1, r6
 8003f94:	4638      	mov	r0, r7
 8003f96:	f7ff ff35 	bl	8003e04 <_free_r>
 8003f9a:	e7e9      	b.n	8003f70 <_realloc_r+0x1c>
 8003f9c:	4635      	mov	r5, r6
 8003f9e:	e7e7      	b.n	8003f70 <_realloc_r+0x1c>

08003fa0 <__ssputs_r>:
 8003fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa4:	688e      	ldr	r6, [r1, #8]
 8003fa6:	429e      	cmp	r6, r3
 8003fa8:	4682      	mov	sl, r0
 8003faa:	460c      	mov	r4, r1
 8003fac:	4690      	mov	r8, r2
 8003fae:	4699      	mov	r9, r3
 8003fb0:	d837      	bhi.n	8004022 <__ssputs_r+0x82>
 8003fb2:	898a      	ldrh	r2, [r1, #12]
 8003fb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003fb8:	d031      	beq.n	800401e <__ssputs_r+0x7e>
 8003fba:	6825      	ldr	r5, [r4, #0]
 8003fbc:	6909      	ldr	r1, [r1, #16]
 8003fbe:	1a6f      	subs	r7, r5, r1
 8003fc0:	6965      	ldr	r5, [r4, #20]
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fc8:	fb95 f5f3 	sdiv	r5, r5, r3
 8003fcc:	f109 0301 	add.w	r3, r9, #1
 8003fd0:	443b      	add	r3, r7
 8003fd2:	429d      	cmp	r5, r3
 8003fd4:	bf38      	it	cc
 8003fd6:	461d      	movcc	r5, r3
 8003fd8:	0553      	lsls	r3, r2, #21
 8003fda:	d530      	bpl.n	800403e <__ssputs_r+0x9e>
 8003fdc:	4629      	mov	r1, r5
 8003fde:	f7ff ff5f 	bl	8003ea0 <_malloc_r>
 8003fe2:	4606      	mov	r6, r0
 8003fe4:	b950      	cbnz	r0, 8003ffc <__ssputs_r+0x5c>
 8003fe6:	230c      	movs	r3, #12
 8003fe8:	f8ca 3000 	str.w	r3, [sl]
 8003fec:	89a3      	ldrh	r3, [r4, #12]
 8003fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ff2:	81a3      	strh	r3, [r4, #12]
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ffc:	463a      	mov	r2, r7
 8003ffe:	6921      	ldr	r1, [r4, #16]
 8004000:	f7ff fedc 	bl	8003dbc <memcpy>
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800400a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800400e:	81a3      	strh	r3, [r4, #12]
 8004010:	6126      	str	r6, [r4, #16]
 8004012:	6165      	str	r5, [r4, #20]
 8004014:	443e      	add	r6, r7
 8004016:	1bed      	subs	r5, r5, r7
 8004018:	6026      	str	r6, [r4, #0]
 800401a:	60a5      	str	r5, [r4, #8]
 800401c:	464e      	mov	r6, r9
 800401e:	454e      	cmp	r6, r9
 8004020:	d900      	bls.n	8004024 <__ssputs_r+0x84>
 8004022:	464e      	mov	r6, r9
 8004024:	4632      	mov	r2, r6
 8004026:	4641      	mov	r1, r8
 8004028:	6820      	ldr	r0, [r4, #0]
 800402a:	f7ff fed2 	bl	8003dd2 <memmove>
 800402e:	68a3      	ldr	r3, [r4, #8]
 8004030:	1b9b      	subs	r3, r3, r6
 8004032:	60a3      	str	r3, [r4, #8]
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	441e      	add	r6, r3
 8004038:	6026      	str	r6, [r4, #0]
 800403a:	2000      	movs	r0, #0
 800403c:	e7dc      	b.n	8003ff8 <__ssputs_r+0x58>
 800403e:	462a      	mov	r2, r5
 8004040:	f7ff ff88 	bl	8003f54 <_realloc_r>
 8004044:	4606      	mov	r6, r0
 8004046:	2800      	cmp	r0, #0
 8004048:	d1e2      	bne.n	8004010 <__ssputs_r+0x70>
 800404a:	6921      	ldr	r1, [r4, #16]
 800404c:	4650      	mov	r0, sl
 800404e:	f7ff fed9 	bl	8003e04 <_free_r>
 8004052:	e7c8      	b.n	8003fe6 <__ssputs_r+0x46>

08004054 <_svfiprintf_r>:
 8004054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004058:	461d      	mov	r5, r3
 800405a:	898b      	ldrh	r3, [r1, #12]
 800405c:	061f      	lsls	r7, r3, #24
 800405e:	b09d      	sub	sp, #116	; 0x74
 8004060:	4680      	mov	r8, r0
 8004062:	460c      	mov	r4, r1
 8004064:	4616      	mov	r6, r2
 8004066:	d50f      	bpl.n	8004088 <_svfiprintf_r+0x34>
 8004068:	690b      	ldr	r3, [r1, #16]
 800406a:	b96b      	cbnz	r3, 8004088 <_svfiprintf_r+0x34>
 800406c:	2140      	movs	r1, #64	; 0x40
 800406e:	f7ff ff17 	bl	8003ea0 <_malloc_r>
 8004072:	6020      	str	r0, [r4, #0]
 8004074:	6120      	str	r0, [r4, #16]
 8004076:	b928      	cbnz	r0, 8004084 <_svfiprintf_r+0x30>
 8004078:	230c      	movs	r3, #12
 800407a:	f8c8 3000 	str.w	r3, [r8]
 800407e:	f04f 30ff 	mov.w	r0, #4294967295
 8004082:	e0c8      	b.n	8004216 <_svfiprintf_r+0x1c2>
 8004084:	2340      	movs	r3, #64	; 0x40
 8004086:	6163      	str	r3, [r4, #20]
 8004088:	2300      	movs	r3, #0
 800408a:	9309      	str	r3, [sp, #36]	; 0x24
 800408c:	2320      	movs	r3, #32
 800408e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004092:	2330      	movs	r3, #48	; 0x30
 8004094:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004098:	9503      	str	r5, [sp, #12]
 800409a:	f04f 0b01 	mov.w	fp, #1
 800409e:	4637      	mov	r7, r6
 80040a0:	463d      	mov	r5, r7
 80040a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80040a6:	b10b      	cbz	r3, 80040ac <_svfiprintf_r+0x58>
 80040a8:	2b25      	cmp	r3, #37	; 0x25
 80040aa:	d13e      	bne.n	800412a <_svfiprintf_r+0xd6>
 80040ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80040b0:	d00b      	beq.n	80040ca <_svfiprintf_r+0x76>
 80040b2:	4653      	mov	r3, sl
 80040b4:	4632      	mov	r2, r6
 80040b6:	4621      	mov	r1, r4
 80040b8:	4640      	mov	r0, r8
 80040ba:	f7ff ff71 	bl	8003fa0 <__ssputs_r>
 80040be:	3001      	adds	r0, #1
 80040c0:	f000 80a4 	beq.w	800420c <_svfiprintf_r+0x1b8>
 80040c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040c6:	4453      	add	r3, sl
 80040c8:	9309      	str	r3, [sp, #36]	; 0x24
 80040ca:	783b      	ldrb	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 809d 	beq.w	800420c <_svfiprintf_r+0x1b8>
 80040d2:	2300      	movs	r3, #0
 80040d4:	f04f 32ff 	mov.w	r2, #4294967295
 80040d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040dc:	9304      	str	r3, [sp, #16]
 80040de:	9307      	str	r3, [sp, #28]
 80040e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040e4:	931a      	str	r3, [sp, #104]	; 0x68
 80040e6:	462f      	mov	r7, r5
 80040e8:	2205      	movs	r2, #5
 80040ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80040ee:	4850      	ldr	r0, [pc, #320]	; (8004230 <_svfiprintf_r+0x1dc>)
 80040f0:	f7fc f88e 	bl	8000210 <memchr>
 80040f4:	9b04      	ldr	r3, [sp, #16]
 80040f6:	b9d0      	cbnz	r0, 800412e <_svfiprintf_r+0xda>
 80040f8:	06d9      	lsls	r1, r3, #27
 80040fa:	bf44      	itt	mi
 80040fc:	2220      	movmi	r2, #32
 80040fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004102:	071a      	lsls	r2, r3, #28
 8004104:	bf44      	itt	mi
 8004106:	222b      	movmi	r2, #43	; 0x2b
 8004108:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800410c:	782a      	ldrb	r2, [r5, #0]
 800410e:	2a2a      	cmp	r2, #42	; 0x2a
 8004110:	d015      	beq.n	800413e <_svfiprintf_r+0xea>
 8004112:	9a07      	ldr	r2, [sp, #28]
 8004114:	462f      	mov	r7, r5
 8004116:	2000      	movs	r0, #0
 8004118:	250a      	movs	r5, #10
 800411a:	4639      	mov	r1, r7
 800411c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004120:	3b30      	subs	r3, #48	; 0x30
 8004122:	2b09      	cmp	r3, #9
 8004124:	d94d      	bls.n	80041c2 <_svfiprintf_r+0x16e>
 8004126:	b1b8      	cbz	r0, 8004158 <_svfiprintf_r+0x104>
 8004128:	e00f      	b.n	800414a <_svfiprintf_r+0xf6>
 800412a:	462f      	mov	r7, r5
 800412c:	e7b8      	b.n	80040a0 <_svfiprintf_r+0x4c>
 800412e:	4a40      	ldr	r2, [pc, #256]	; (8004230 <_svfiprintf_r+0x1dc>)
 8004130:	1a80      	subs	r0, r0, r2
 8004132:	fa0b f000 	lsl.w	r0, fp, r0
 8004136:	4318      	orrs	r0, r3
 8004138:	9004      	str	r0, [sp, #16]
 800413a:	463d      	mov	r5, r7
 800413c:	e7d3      	b.n	80040e6 <_svfiprintf_r+0x92>
 800413e:	9a03      	ldr	r2, [sp, #12]
 8004140:	1d11      	adds	r1, r2, #4
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	9103      	str	r1, [sp, #12]
 8004146:	2a00      	cmp	r2, #0
 8004148:	db01      	blt.n	800414e <_svfiprintf_r+0xfa>
 800414a:	9207      	str	r2, [sp, #28]
 800414c:	e004      	b.n	8004158 <_svfiprintf_r+0x104>
 800414e:	4252      	negs	r2, r2
 8004150:	f043 0302 	orr.w	r3, r3, #2
 8004154:	9207      	str	r2, [sp, #28]
 8004156:	9304      	str	r3, [sp, #16]
 8004158:	783b      	ldrb	r3, [r7, #0]
 800415a:	2b2e      	cmp	r3, #46	; 0x2e
 800415c:	d10c      	bne.n	8004178 <_svfiprintf_r+0x124>
 800415e:	787b      	ldrb	r3, [r7, #1]
 8004160:	2b2a      	cmp	r3, #42	; 0x2a
 8004162:	d133      	bne.n	80041cc <_svfiprintf_r+0x178>
 8004164:	9b03      	ldr	r3, [sp, #12]
 8004166:	1d1a      	adds	r2, r3, #4
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	9203      	str	r2, [sp, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	bfb8      	it	lt
 8004170:	f04f 33ff 	movlt.w	r3, #4294967295
 8004174:	3702      	adds	r7, #2
 8004176:	9305      	str	r3, [sp, #20]
 8004178:	4d2e      	ldr	r5, [pc, #184]	; (8004234 <_svfiprintf_r+0x1e0>)
 800417a:	7839      	ldrb	r1, [r7, #0]
 800417c:	2203      	movs	r2, #3
 800417e:	4628      	mov	r0, r5
 8004180:	f7fc f846 	bl	8000210 <memchr>
 8004184:	b138      	cbz	r0, 8004196 <_svfiprintf_r+0x142>
 8004186:	2340      	movs	r3, #64	; 0x40
 8004188:	1b40      	subs	r0, r0, r5
 800418a:	fa03 f000 	lsl.w	r0, r3, r0
 800418e:	9b04      	ldr	r3, [sp, #16]
 8004190:	4303      	orrs	r3, r0
 8004192:	3701      	adds	r7, #1
 8004194:	9304      	str	r3, [sp, #16]
 8004196:	7839      	ldrb	r1, [r7, #0]
 8004198:	4827      	ldr	r0, [pc, #156]	; (8004238 <_svfiprintf_r+0x1e4>)
 800419a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800419e:	2206      	movs	r2, #6
 80041a0:	1c7e      	adds	r6, r7, #1
 80041a2:	f7fc f835 	bl	8000210 <memchr>
 80041a6:	2800      	cmp	r0, #0
 80041a8:	d038      	beq.n	800421c <_svfiprintf_r+0x1c8>
 80041aa:	4b24      	ldr	r3, [pc, #144]	; (800423c <_svfiprintf_r+0x1e8>)
 80041ac:	bb13      	cbnz	r3, 80041f4 <_svfiprintf_r+0x1a0>
 80041ae:	9b03      	ldr	r3, [sp, #12]
 80041b0:	3307      	adds	r3, #7
 80041b2:	f023 0307 	bic.w	r3, r3, #7
 80041b6:	3308      	adds	r3, #8
 80041b8:	9303      	str	r3, [sp, #12]
 80041ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041bc:	444b      	add	r3, r9
 80041be:	9309      	str	r3, [sp, #36]	; 0x24
 80041c0:	e76d      	b.n	800409e <_svfiprintf_r+0x4a>
 80041c2:	fb05 3202 	mla	r2, r5, r2, r3
 80041c6:	2001      	movs	r0, #1
 80041c8:	460f      	mov	r7, r1
 80041ca:	e7a6      	b.n	800411a <_svfiprintf_r+0xc6>
 80041cc:	2300      	movs	r3, #0
 80041ce:	3701      	adds	r7, #1
 80041d0:	9305      	str	r3, [sp, #20]
 80041d2:	4619      	mov	r1, r3
 80041d4:	250a      	movs	r5, #10
 80041d6:	4638      	mov	r0, r7
 80041d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041dc:	3a30      	subs	r2, #48	; 0x30
 80041de:	2a09      	cmp	r2, #9
 80041e0:	d903      	bls.n	80041ea <_svfiprintf_r+0x196>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0c8      	beq.n	8004178 <_svfiprintf_r+0x124>
 80041e6:	9105      	str	r1, [sp, #20]
 80041e8:	e7c6      	b.n	8004178 <_svfiprintf_r+0x124>
 80041ea:	fb05 2101 	mla	r1, r5, r1, r2
 80041ee:	2301      	movs	r3, #1
 80041f0:	4607      	mov	r7, r0
 80041f2:	e7f0      	b.n	80041d6 <_svfiprintf_r+0x182>
 80041f4:	ab03      	add	r3, sp, #12
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	4622      	mov	r2, r4
 80041fa:	4b11      	ldr	r3, [pc, #68]	; (8004240 <_svfiprintf_r+0x1ec>)
 80041fc:	a904      	add	r1, sp, #16
 80041fe:	4640      	mov	r0, r8
 8004200:	f3af 8000 	nop.w
 8004204:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004208:	4681      	mov	r9, r0
 800420a:	d1d6      	bne.n	80041ba <_svfiprintf_r+0x166>
 800420c:	89a3      	ldrh	r3, [r4, #12]
 800420e:	065b      	lsls	r3, r3, #25
 8004210:	f53f af35 	bmi.w	800407e <_svfiprintf_r+0x2a>
 8004214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004216:	b01d      	add	sp, #116	; 0x74
 8004218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800421c:	ab03      	add	r3, sp, #12
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	4622      	mov	r2, r4
 8004222:	4b07      	ldr	r3, [pc, #28]	; (8004240 <_svfiprintf_r+0x1ec>)
 8004224:	a904      	add	r1, sp, #16
 8004226:	4640      	mov	r0, r8
 8004228:	f7ff f93e 	bl	80034a8 <_printf_i>
 800422c:	e7ea      	b.n	8004204 <_svfiprintf_r+0x1b0>
 800422e:	bf00      	nop
 8004230:	08004e7a 	.word	0x08004e7a
 8004234:	08004e80 	.word	0x08004e80
 8004238:	08004e84 	.word	0x08004e84
 800423c:	00000000 	.word	0x00000000
 8004240:	08003fa1 	.word	0x08003fa1

08004244 <_sungetc_r>:
 8004244:	b538      	push	{r3, r4, r5, lr}
 8004246:	1c4b      	adds	r3, r1, #1
 8004248:	4614      	mov	r4, r2
 800424a:	d103      	bne.n	8004254 <_sungetc_r+0x10>
 800424c:	f04f 35ff 	mov.w	r5, #4294967295
 8004250:	4628      	mov	r0, r5
 8004252:	bd38      	pop	{r3, r4, r5, pc}
 8004254:	8993      	ldrh	r3, [r2, #12]
 8004256:	f023 0320 	bic.w	r3, r3, #32
 800425a:	8193      	strh	r3, [r2, #12]
 800425c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800425e:	6852      	ldr	r2, [r2, #4]
 8004260:	b2cd      	uxtb	r5, r1
 8004262:	b18b      	cbz	r3, 8004288 <_sungetc_r+0x44>
 8004264:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004266:	4293      	cmp	r3, r2
 8004268:	dd08      	ble.n	800427c <_sungetc_r+0x38>
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	1e5a      	subs	r2, r3, #1
 800426e:	6022      	str	r2, [r4, #0]
 8004270:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004274:	6863      	ldr	r3, [r4, #4]
 8004276:	3301      	adds	r3, #1
 8004278:	6063      	str	r3, [r4, #4]
 800427a:	e7e9      	b.n	8004250 <_sungetc_r+0xc>
 800427c:	4621      	mov	r1, r4
 800427e:	f000 fc95 	bl	8004bac <__submore>
 8004282:	2800      	cmp	r0, #0
 8004284:	d0f1      	beq.n	800426a <_sungetc_r+0x26>
 8004286:	e7e1      	b.n	800424c <_sungetc_r+0x8>
 8004288:	6921      	ldr	r1, [r4, #16]
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	b151      	cbz	r1, 80042a4 <_sungetc_r+0x60>
 800428e:	4299      	cmp	r1, r3
 8004290:	d208      	bcs.n	80042a4 <_sungetc_r+0x60>
 8004292:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004296:	42a9      	cmp	r1, r5
 8004298:	d104      	bne.n	80042a4 <_sungetc_r+0x60>
 800429a:	3b01      	subs	r3, #1
 800429c:	3201      	adds	r2, #1
 800429e:	6023      	str	r3, [r4, #0]
 80042a0:	6062      	str	r2, [r4, #4]
 80042a2:	e7d5      	b.n	8004250 <_sungetc_r+0xc>
 80042a4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80042a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042ac:	6363      	str	r3, [r4, #52]	; 0x34
 80042ae:	2303      	movs	r3, #3
 80042b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80042b2:	4623      	mov	r3, r4
 80042b4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80042b8:	6023      	str	r3, [r4, #0]
 80042ba:	2301      	movs	r3, #1
 80042bc:	e7dc      	b.n	8004278 <_sungetc_r+0x34>

080042be <__ssrefill_r>:
 80042be:	b510      	push	{r4, lr}
 80042c0:	460c      	mov	r4, r1
 80042c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80042c4:	b169      	cbz	r1, 80042e2 <__ssrefill_r+0x24>
 80042c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042ca:	4299      	cmp	r1, r3
 80042cc:	d001      	beq.n	80042d2 <__ssrefill_r+0x14>
 80042ce:	f7ff fd99 	bl	8003e04 <_free_r>
 80042d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042d4:	6063      	str	r3, [r4, #4]
 80042d6:	2000      	movs	r0, #0
 80042d8:	6360      	str	r0, [r4, #52]	; 0x34
 80042da:	b113      	cbz	r3, 80042e2 <__ssrefill_r+0x24>
 80042dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80042de:	6023      	str	r3, [r4, #0]
 80042e0:	bd10      	pop	{r4, pc}
 80042e2:	6923      	ldr	r3, [r4, #16]
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	2300      	movs	r3, #0
 80042e8:	6063      	str	r3, [r4, #4]
 80042ea:	89a3      	ldrh	r3, [r4, #12]
 80042ec:	f043 0320 	orr.w	r3, r3, #32
 80042f0:	81a3      	strh	r3, [r4, #12]
 80042f2:	f04f 30ff 	mov.w	r0, #4294967295
 80042f6:	e7f3      	b.n	80042e0 <__ssrefill_r+0x22>

080042f8 <__ssvfiscanf_r>:
 80042f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fc:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8004300:	460c      	mov	r4, r1
 8004302:	2100      	movs	r1, #0
 8004304:	9144      	str	r1, [sp, #272]	; 0x110
 8004306:	9145      	str	r1, [sp, #276]	; 0x114
 8004308:	499f      	ldr	r1, [pc, #636]	; (8004588 <__ssvfiscanf_r+0x290>)
 800430a:	91a0      	str	r1, [sp, #640]	; 0x280
 800430c:	f10d 0804 	add.w	r8, sp, #4
 8004310:	499e      	ldr	r1, [pc, #632]	; (800458c <__ssvfiscanf_r+0x294>)
 8004312:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8004590 <__ssvfiscanf_r+0x298>
 8004316:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800431a:	4606      	mov	r6, r0
 800431c:	4692      	mov	sl, r2
 800431e:	91a1      	str	r1, [sp, #644]	; 0x284
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	270a      	movs	r7, #10
 8004324:	f89a 3000 	ldrb.w	r3, [sl]
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 812a 	beq.w	8004582 <__ssvfiscanf_r+0x28a>
 800432e:	4655      	mov	r5, sl
 8004330:	f7fe fedc 	bl	80030ec <__locale_ctype_ptr>
 8004334:	f815 bb01 	ldrb.w	fp, [r5], #1
 8004338:	4458      	add	r0, fp
 800433a:	7843      	ldrb	r3, [r0, #1]
 800433c:	f013 0308 	ands.w	r3, r3, #8
 8004340:	d01c      	beq.n	800437c <__ssvfiscanf_r+0x84>
 8004342:	6863      	ldr	r3, [r4, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	dd12      	ble.n	800436e <__ssvfiscanf_r+0x76>
 8004348:	f7fe fed0 	bl	80030ec <__locale_ctype_ptr>
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	781a      	ldrb	r2, [r3, #0]
 8004350:	4410      	add	r0, r2
 8004352:	7842      	ldrb	r2, [r0, #1]
 8004354:	0712      	lsls	r2, r2, #28
 8004356:	d401      	bmi.n	800435c <__ssvfiscanf_r+0x64>
 8004358:	46aa      	mov	sl, r5
 800435a:	e7e3      	b.n	8004324 <__ssvfiscanf_r+0x2c>
 800435c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800435e:	3201      	adds	r2, #1
 8004360:	9245      	str	r2, [sp, #276]	; 0x114
 8004362:	6862      	ldr	r2, [r4, #4]
 8004364:	3301      	adds	r3, #1
 8004366:	3a01      	subs	r2, #1
 8004368:	6062      	str	r2, [r4, #4]
 800436a:	6023      	str	r3, [r4, #0]
 800436c:	e7e9      	b.n	8004342 <__ssvfiscanf_r+0x4a>
 800436e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004370:	4621      	mov	r1, r4
 8004372:	4630      	mov	r0, r6
 8004374:	4798      	blx	r3
 8004376:	2800      	cmp	r0, #0
 8004378:	d0e6      	beq.n	8004348 <__ssvfiscanf_r+0x50>
 800437a:	e7ed      	b.n	8004358 <__ssvfiscanf_r+0x60>
 800437c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8004380:	f040 8082 	bne.w	8004488 <__ssvfiscanf_r+0x190>
 8004384:	9343      	str	r3, [sp, #268]	; 0x10c
 8004386:	9341      	str	r3, [sp, #260]	; 0x104
 8004388:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800438c:	2b2a      	cmp	r3, #42	; 0x2a
 800438e:	d103      	bne.n	8004398 <__ssvfiscanf_r+0xa0>
 8004390:	2310      	movs	r3, #16
 8004392:	9341      	str	r3, [sp, #260]	; 0x104
 8004394:	f10a 0502 	add.w	r5, sl, #2
 8004398:	46aa      	mov	sl, r5
 800439a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800439e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80043a2:	2a09      	cmp	r2, #9
 80043a4:	d922      	bls.n	80043ec <__ssvfiscanf_r+0xf4>
 80043a6:	2203      	movs	r2, #3
 80043a8:	4879      	ldr	r0, [pc, #484]	; (8004590 <__ssvfiscanf_r+0x298>)
 80043aa:	f7fb ff31 	bl	8000210 <memchr>
 80043ae:	b138      	cbz	r0, 80043c0 <__ssvfiscanf_r+0xc8>
 80043b0:	eba0 0309 	sub.w	r3, r0, r9
 80043b4:	2001      	movs	r0, #1
 80043b6:	4098      	lsls	r0, r3
 80043b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80043ba:	4318      	orrs	r0, r3
 80043bc:	9041      	str	r0, [sp, #260]	; 0x104
 80043be:	46aa      	mov	sl, r5
 80043c0:	f89a 3000 	ldrb.w	r3, [sl]
 80043c4:	2b67      	cmp	r3, #103	; 0x67
 80043c6:	f10a 0501 	add.w	r5, sl, #1
 80043ca:	d82b      	bhi.n	8004424 <__ssvfiscanf_r+0x12c>
 80043cc:	2b65      	cmp	r3, #101	; 0x65
 80043ce:	f080 809f 	bcs.w	8004510 <__ssvfiscanf_r+0x218>
 80043d2:	2b47      	cmp	r3, #71	; 0x47
 80043d4:	d810      	bhi.n	80043f8 <__ssvfiscanf_r+0x100>
 80043d6:	2b45      	cmp	r3, #69	; 0x45
 80043d8:	f080 809a 	bcs.w	8004510 <__ssvfiscanf_r+0x218>
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d06c      	beq.n	80044ba <__ssvfiscanf_r+0x1c2>
 80043e0:	2b25      	cmp	r3, #37	; 0x25
 80043e2:	d051      	beq.n	8004488 <__ssvfiscanf_r+0x190>
 80043e4:	2303      	movs	r3, #3
 80043e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80043e8:	9742      	str	r7, [sp, #264]	; 0x108
 80043ea:	e027      	b.n	800443c <__ssvfiscanf_r+0x144>
 80043ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80043ee:	fb07 1303 	mla	r3, r7, r3, r1
 80043f2:	3b30      	subs	r3, #48	; 0x30
 80043f4:	9343      	str	r3, [sp, #268]	; 0x10c
 80043f6:	e7cf      	b.n	8004398 <__ssvfiscanf_r+0xa0>
 80043f8:	2b5b      	cmp	r3, #91	; 0x5b
 80043fa:	d06a      	beq.n	80044d2 <__ssvfiscanf_r+0x1da>
 80043fc:	d80c      	bhi.n	8004418 <__ssvfiscanf_r+0x120>
 80043fe:	2b58      	cmp	r3, #88	; 0x58
 8004400:	d1f0      	bne.n	80043e4 <__ssvfiscanf_r+0xec>
 8004402:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004408:	9241      	str	r2, [sp, #260]	; 0x104
 800440a:	2210      	movs	r2, #16
 800440c:	9242      	str	r2, [sp, #264]	; 0x108
 800440e:	2b6e      	cmp	r3, #110	; 0x6e
 8004410:	bf8c      	ite	hi
 8004412:	2304      	movhi	r3, #4
 8004414:	2303      	movls	r3, #3
 8004416:	e010      	b.n	800443a <__ssvfiscanf_r+0x142>
 8004418:	2b63      	cmp	r3, #99	; 0x63
 800441a:	d065      	beq.n	80044e8 <__ssvfiscanf_r+0x1f0>
 800441c:	2b64      	cmp	r3, #100	; 0x64
 800441e:	d1e1      	bne.n	80043e4 <__ssvfiscanf_r+0xec>
 8004420:	9742      	str	r7, [sp, #264]	; 0x108
 8004422:	e7f4      	b.n	800440e <__ssvfiscanf_r+0x116>
 8004424:	2b70      	cmp	r3, #112	; 0x70
 8004426:	d04b      	beq.n	80044c0 <__ssvfiscanf_r+0x1c8>
 8004428:	d826      	bhi.n	8004478 <__ssvfiscanf_r+0x180>
 800442a:	2b6e      	cmp	r3, #110	; 0x6e
 800442c:	d062      	beq.n	80044f4 <__ssvfiscanf_r+0x1fc>
 800442e:	d84c      	bhi.n	80044ca <__ssvfiscanf_r+0x1d2>
 8004430:	2b69      	cmp	r3, #105	; 0x69
 8004432:	d1d7      	bne.n	80043e4 <__ssvfiscanf_r+0xec>
 8004434:	2300      	movs	r3, #0
 8004436:	9342      	str	r3, [sp, #264]	; 0x108
 8004438:	2303      	movs	r3, #3
 800443a:	9347      	str	r3, [sp, #284]	; 0x11c
 800443c:	6863      	ldr	r3, [r4, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	dd68      	ble.n	8004514 <__ssvfiscanf_r+0x21c>
 8004442:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004444:	0659      	lsls	r1, r3, #25
 8004446:	d407      	bmi.n	8004458 <__ssvfiscanf_r+0x160>
 8004448:	f7fe fe50 	bl	80030ec <__locale_ctype_ptr>
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	781a      	ldrb	r2, [r3, #0]
 8004450:	4410      	add	r0, r2
 8004452:	7842      	ldrb	r2, [r0, #1]
 8004454:	0712      	lsls	r2, r2, #28
 8004456:	d464      	bmi.n	8004522 <__ssvfiscanf_r+0x22a>
 8004458:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800445a:	2b02      	cmp	r3, #2
 800445c:	dc73      	bgt.n	8004546 <__ssvfiscanf_r+0x24e>
 800445e:	466b      	mov	r3, sp
 8004460:	4622      	mov	r2, r4
 8004462:	a941      	add	r1, sp, #260	; 0x104
 8004464:	4630      	mov	r0, r6
 8004466:	f000 f897 	bl	8004598 <_scanf_chars>
 800446a:	2801      	cmp	r0, #1
 800446c:	f000 8089 	beq.w	8004582 <__ssvfiscanf_r+0x28a>
 8004470:	2802      	cmp	r0, #2
 8004472:	f47f af71 	bne.w	8004358 <__ssvfiscanf_r+0x60>
 8004476:	e01d      	b.n	80044b4 <__ssvfiscanf_r+0x1bc>
 8004478:	2b75      	cmp	r3, #117	; 0x75
 800447a:	d0d1      	beq.n	8004420 <__ssvfiscanf_r+0x128>
 800447c:	2b78      	cmp	r3, #120	; 0x78
 800447e:	d0c0      	beq.n	8004402 <__ssvfiscanf_r+0x10a>
 8004480:	2b73      	cmp	r3, #115	; 0x73
 8004482:	d1af      	bne.n	80043e4 <__ssvfiscanf_r+0xec>
 8004484:	2302      	movs	r3, #2
 8004486:	e7d8      	b.n	800443a <__ssvfiscanf_r+0x142>
 8004488:	6863      	ldr	r3, [r4, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	dd0c      	ble.n	80044a8 <__ssvfiscanf_r+0x1b0>
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	781a      	ldrb	r2, [r3, #0]
 8004492:	455a      	cmp	r2, fp
 8004494:	d175      	bne.n	8004582 <__ssvfiscanf_r+0x28a>
 8004496:	3301      	adds	r3, #1
 8004498:	6862      	ldr	r2, [r4, #4]
 800449a:	6023      	str	r3, [r4, #0]
 800449c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800449e:	3a01      	subs	r2, #1
 80044a0:	3301      	adds	r3, #1
 80044a2:	6062      	str	r2, [r4, #4]
 80044a4:	9345      	str	r3, [sp, #276]	; 0x114
 80044a6:	e757      	b.n	8004358 <__ssvfiscanf_r+0x60>
 80044a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80044aa:	4621      	mov	r1, r4
 80044ac:	4630      	mov	r0, r6
 80044ae:	4798      	blx	r3
 80044b0:	2800      	cmp	r0, #0
 80044b2:	d0ec      	beq.n	800448e <__ssvfiscanf_r+0x196>
 80044b4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80044b6:	2800      	cmp	r0, #0
 80044b8:	d159      	bne.n	800456e <__ssvfiscanf_r+0x276>
 80044ba:	f04f 30ff 	mov.w	r0, #4294967295
 80044be:	e05c      	b.n	800457a <__ssvfiscanf_r+0x282>
 80044c0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80044c2:	f042 0220 	orr.w	r2, r2, #32
 80044c6:	9241      	str	r2, [sp, #260]	; 0x104
 80044c8:	e79b      	b.n	8004402 <__ssvfiscanf_r+0x10a>
 80044ca:	2308      	movs	r3, #8
 80044cc:	9342      	str	r3, [sp, #264]	; 0x108
 80044ce:	2304      	movs	r3, #4
 80044d0:	e7b3      	b.n	800443a <__ssvfiscanf_r+0x142>
 80044d2:	4629      	mov	r1, r5
 80044d4:	4640      	mov	r0, r8
 80044d6:	f000 f9d9 	bl	800488c <__sccl>
 80044da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80044dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044e0:	9341      	str	r3, [sp, #260]	; 0x104
 80044e2:	4605      	mov	r5, r0
 80044e4:	2301      	movs	r3, #1
 80044e6:	e7a8      	b.n	800443a <__ssvfiscanf_r+0x142>
 80044e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80044ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ee:	9341      	str	r3, [sp, #260]	; 0x104
 80044f0:	2300      	movs	r3, #0
 80044f2:	e7a2      	b.n	800443a <__ssvfiscanf_r+0x142>
 80044f4:	9841      	ldr	r0, [sp, #260]	; 0x104
 80044f6:	06c3      	lsls	r3, r0, #27
 80044f8:	f53f af2e 	bmi.w	8004358 <__ssvfiscanf_r+0x60>
 80044fc:	9b00      	ldr	r3, [sp, #0]
 80044fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004500:	1d19      	adds	r1, r3, #4
 8004502:	9100      	str	r1, [sp, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	07c0      	lsls	r0, r0, #31
 8004508:	bf4c      	ite	mi
 800450a:	801a      	strhmi	r2, [r3, #0]
 800450c:	601a      	strpl	r2, [r3, #0]
 800450e:	e723      	b.n	8004358 <__ssvfiscanf_r+0x60>
 8004510:	2305      	movs	r3, #5
 8004512:	e792      	b.n	800443a <__ssvfiscanf_r+0x142>
 8004514:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004516:	4621      	mov	r1, r4
 8004518:	4630      	mov	r0, r6
 800451a:	4798      	blx	r3
 800451c:	2800      	cmp	r0, #0
 800451e:	d090      	beq.n	8004442 <__ssvfiscanf_r+0x14a>
 8004520:	e7c8      	b.n	80044b4 <__ssvfiscanf_r+0x1bc>
 8004522:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004524:	3201      	adds	r2, #1
 8004526:	9245      	str	r2, [sp, #276]	; 0x114
 8004528:	6862      	ldr	r2, [r4, #4]
 800452a:	3a01      	subs	r2, #1
 800452c:	2a00      	cmp	r2, #0
 800452e:	6062      	str	r2, [r4, #4]
 8004530:	dd02      	ble.n	8004538 <__ssvfiscanf_r+0x240>
 8004532:	3301      	adds	r3, #1
 8004534:	6023      	str	r3, [r4, #0]
 8004536:	e787      	b.n	8004448 <__ssvfiscanf_r+0x150>
 8004538:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800453a:	4621      	mov	r1, r4
 800453c:	4630      	mov	r0, r6
 800453e:	4798      	blx	r3
 8004540:	2800      	cmp	r0, #0
 8004542:	d081      	beq.n	8004448 <__ssvfiscanf_r+0x150>
 8004544:	e7b6      	b.n	80044b4 <__ssvfiscanf_r+0x1bc>
 8004546:	2b04      	cmp	r3, #4
 8004548:	dc06      	bgt.n	8004558 <__ssvfiscanf_r+0x260>
 800454a:	466b      	mov	r3, sp
 800454c:	4622      	mov	r2, r4
 800454e:	a941      	add	r1, sp, #260	; 0x104
 8004550:	4630      	mov	r0, r6
 8004552:	f000 f885 	bl	8004660 <_scanf_i>
 8004556:	e788      	b.n	800446a <__ssvfiscanf_r+0x172>
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <__ssvfiscanf_r+0x29c>)
 800455a:	2b00      	cmp	r3, #0
 800455c:	f43f aefc 	beq.w	8004358 <__ssvfiscanf_r+0x60>
 8004560:	466b      	mov	r3, sp
 8004562:	4622      	mov	r2, r4
 8004564:	a941      	add	r1, sp, #260	; 0x104
 8004566:	4630      	mov	r0, r6
 8004568:	f3af 8000 	nop.w
 800456c:	e77d      	b.n	800446a <__ssvfiscanf_r+0x172>
 800456e:	89a3      	ldrh	r3, [r4, #12]
 8004570:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004574:	bf18      	it	ne
 8004576:	f04f 30ff 	movne.w	r0, #4294967295
 800457a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800457e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004582:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004584:	e7f9      	b.n	800457a <__ssvfiscanf_r+0x282>
 8004586:	bf00      	nop
 8004588:	08004245 	.word	0x08004245
 800458c:	080042bf 	.word	0x080042bf
 8004590:	08004e80 	.word	0x08004e80
 8004594:	00000000 	.word	0x00000000

08004598 <_scanf_chars>:
 8004598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800459c:	4615      	mov	r5, r2
 800459e:	688a      	ldr	r2, [r1, #8]
 80045a0:	4680      	mov	r8, r0
 80045a2:	460c      	mov	r4, r1
 80045a4:	b932      	cbnz	r2, 80045b4 <_scanf_chars+0x1c>
 80045a6:	698a      	ldr	r2, [r1, #24]
 80045a8:	2a00      	cmp	r2, #0
 80045aa:	bf14      	ite	ne
 80045ac:	f04f 32ff 	movne.w	r2, #4294967295
 80045b0:	2201      	moveq	r2, #1
 80045b2:	608a      	str	r2, [r1, #8]
 80045b4:	6822      	ldr	r2, [r4, #0]
 80045b6:	06d1      	lsls	r1, r2, #27
 80045b8:	bf5f      	itttt	pl
 80045ba:	681a      	ldrpl	r2, [r3, #0]
 80045bc:	1d11      	addpl	r1, r2, #4
 80045be:	6019      	strpl	r1, [r3, #0]
 80045c0:	6817      	ldrpl	r7, [r2, #0]
 80045c2:	2600      	movs	r6, #0
 80045c4:	69a3      	ldr	r3, [r4, #24]
 80045c6:	b1db      	cbz	r3, 8004600 <_scanf_chars+0x68>
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d107      	bne.n	80045dc <_scanf_chars+0x44>
 80045cc:	682b      	ldr	r3, [r5, #0]
 80045ce:	6962      	ldr	r2, [r4, #20]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	5cd3      	ldrb	r3, [r2, r3]
 80045d4:	b9a3      	cbnz	r3, 8004600 <_scanf_chars+0x68>
 80045d6:	2e00      	cmp	r6, #0
 80045d8:	d132      	bne.n	8004640 <_scanf_chars+0xa8>
 80045da:	e006      	b.n	80045ea <_scanf_chars+0x52>
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d007      	beq.n	80045f0 <_scanf_chars+0x58>
 80045e0:	2e00      	cmp	r6, #0
 80045e2:	d12d      	bne.n	8004640 <_scanf_chars+0xa8>
 80045e4:	69a3      	ldr	r3, [r4, #24]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d12a      	bne.n	8004640 <_scanf_chars+0xa8>
 80045ea:	2001      	movs	r0, #1
 80045ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045f0:	f7fe fd7c 	bl	80030ec <__locale_ctype_ptr>
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	4418      	add	r0, r3
 80045fa:	7843      	ldrb	r3, [r0, #1]
 80045fc:	071b      	lsls	r3, r3, #28
 80045fe:	d4ef      	bmi.n	80045e0 <_scanf_chars+0x48>
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	06da      	lsls	r2, r3, #27
 8004604:	bf5e      	ittt	pl
 8004606:	682b      	ldrpl	r3, [r5, #0]
 8004608:	781b      	ldrbpl	r3, [r3, #0]
 800460a:	703b      	strbpl	r3, [r7, #0]
 800460c:	682a      	ldr	r2, [r5, #0]
 800460e:	686b      	ldr	r3, [r5, #4]
 8004610:	f102 0201 	add.w	r2, r2, #1
 8004614:	602a      	str	r2, [r5, #0]
 8004616:	68a2      	ldr	r2, [r4, #8]
 8004618:	f103 33ff 	add.w	r3, r3, #4294967295
 800461c:	f102 32ff 	add.w	r2, r2, #4294967295
 8004620:	606b      	str	r3, [r5, #4]
 8004622:	f106 0601 	add.w	r6, r6, #1
 8004626:	bf58      	it	pl
 8004628:	3701      	addpl	r7, #1
 800462a:	60a2      	str	r2, [r4, #8]
 800462c:	b142      	cbz	r2, 8004640 <_scanf_chars+0xa8>
 800462e:	2b00      	cmp	r3, #0
 8004630:	dcc8      	bgt.n	80045c4 <_scanf_chars+0x2c>
 8004632:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004636:	4629      	mov	r1, r5
 8004638:	4640      	mov	r0, r8
 800463a:	4798      	blx	r3
 800463c:	2800      	cmp	r0, #0
 800463e:	d0c1      	beq.n	80045c4 <_scanf_chars+0x2c>
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	f013 0310 	ands.w	r3, r3, #16
 8004646:	d105      	bne.n	8004654 <_scanf_chars+0xbc>
 8004648:	68e2      	ldr	r2, [r4, #12]
 800464a:	3201      	adds	r2, #1
 800464c:	60e2      	str	r2, [r4, #12]
 800464e:	69a2      	ldr	r2, [r4, #24]
 8004650:	b102      	cbz	r2, 8004654 <_scanf_chars+0xbc>
 8004652:	703b      	strb	r3, [r7, #0]
 8004654:	6923      	ldr	r3, [r4, #16]
 8004656:	441e      	add	r6, r3
 8004658:	6126      	str	r6, [r4, #16]
 800465a:	2000      	movs	r0, #0
 800465c:	e7c6      	b.n	80045ec <_scanf_chars+0x54>
	...

08004660 <_scanf_i>:
 8004660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004664:	469a      	mov	sl, r3
 8004666:	4b74      	ldr	r3, [pc, #464]	; (8004838 <_scanf_i+0x1d8>)
 8004668:	460c      	mov	r4, r1
 800466a:	4683      	mov	fp, r0
 800466c:	4616      	mov	r6, r2
 800466e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004672:	b087      	sub	sp, #28
 8004674:	ab03      	add	r3, sp, #12
 8004676:	68a7      	ldr	r7, [r4, #8]
 8004678:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800467c:	4b6f      	ldr	r3, [pc, #444]	; (800483c <_scanf_i+0x1dc>)
 800467e:	69a1      	ldr	r1, [r4, #24]
 8004680:	4a6f      	ldr	r2, [pc, #444]	; (8004840 <_scanf_i+0x1e0>)
 8004682:	2903      	cmp	r1, #3
 8004684:	bf08      	it	eq
 8004686:	461a      	moveq	r2, r3
 8004688:	1e7b      	subs	r3, r7, #1
 800468a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800468e:	bf84      	itt	hi
 8004690:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004694:	60a3      	strhi	r3, [r4, #8]
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	9200      	str	r2, [sp, #0]
 800469a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800469e:	bf88      	it	hi
 80046a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80046a4:	f104 091c 	add.w	r9, r4, #28
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	bf8c      	ite	hi
 80046ac:	197f      	addhi	r7, r7, r5
 80046ae:	2700      	movls	r7, #0
 80046b0:	464b      	mov	r3, r9
 80046b2:	f04f 0800 	mov.w	r8, #0
 80046b6:	9301      	str	r3, [sp, #4]
 80046b8:	6831      	ldr	r1, [r6, #0]
 80046ba:	ab03      	add	r3, sp, #12
 80046bc:	2202      	movs	r2, #2
 80046be:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80046c2:	7809      	ldrb	r1, [r1, #0]
 80046c4:	f7fb fda4 	bl	8000210 <memchr>
 80046c8:	9b01      	ldr	r3, [sp, #4]
 80046ca:	b330      	cbz	r0, 800471a <_scanf_i+0xba>
 80046cc:	f1b8 0f01 	cmp.w	r8, #1
 80046d0:	d15a      	bne.n	8004788 <_scanf_i+0x128>
 80046d2:	6862      	ldr	r2, [r4, #4]
 80046d4:	b92a      	cbnz	r2, 80046e2 <_scanf_i+0x82>
 80046d6:	6822      	ldr	r2, [r4, #0]
 80046d8:	2108      	movs	r1, #8
 80046da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046de:	6061      	str	r1, [r4, #4]
 80046e0:	6022      	str	r2, [r4, #0]
 80046e2:	6822      	ldr	r2, [r4, #0]
 80046e4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80046e8:	6022      	str	r2, [r4, #0]
 80046ea:	68a2      	ldr	r2, [r4, #8]
 80046ec:	1e51      	subs	r1, r2, #1
 80046ee:	60a1      	str	r1, [r4, #8]
 80046f0:	b19a      	cbz	r2, 800471a <_scanf_i+0xba>
 80046f2:	6832      	ldr	r2, [r6, #0]
 80046f4:	1c51      	adds	r1, r2, #1
 80046f6:	6031      	str	r1, [r6, #0]
 80046f8:	7812      	ldrb	r2, [r2, #0]
 80046fa:	701a      	strb	r2, [r3, #0]
 80046fc:	1c5d      	adds	r5, r3, #1
 80046fe:	6873      	ldr	r3, [r6, #4]
 8004700:	3b01      	subs	r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	6073      	str	r3, [r6, #4]
 8004706:	dc07      	bgt.n	8004718 <_scanf_i+0xb8>
 8004708:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800470c:	4631      	mov	r1, r6
 800470e:	4658      	mov	r0, fp
 8004710:	4798      	blx	r3
 8004712:	2800      	cmp	r0, #0
 8004714:	f040 8086 	bne.w	8004824 <_scanf_i+0x1c4>
 8004718:	462b      	mov	r3, r5
 800471a:	f108 0801 	add.w	r8, r8, #1
 800471e:	f1b8 0f03 	cmp.w	r8, #3
 8004722:	d1c8      	bne.n	80046b6 <_scanf_i+0x56>
 8004724:	6862      	ldr	r2, [r4, #4]
 8004726:	b90a      	cbnz	r2, 800472c <_scanf_i+0xcc>
 8004728:	220a      	movs	r2, #10
 800472a:	6062      	str	r2, [r4, #4]
 800472c:	6862      	ldr	r2, [r4, #4]
 800472e:	4945      	ldr	r1, [pc, #276]	; (8004844 <_scanf_i+0x1e4>)
 8004730:	6960      	ldr	r0, [r4, #20]
 8004732:	9301      	str	r3, [sp, #4]
 8004734:	1a89      	subs	r1, r1, r2
 8004736:	f000 f8a9 	bl	800488c <__sccl>
 800473a:	9b01      	ldr	r3, [sp, #4]
 800473c:	f04f 0800 	mov.w	r8, #0
 8004740:	461d      	mov	r5, r3
 8004742:	68a3      	ldr	r3, [r4, #8]
 8004744:	6822      	ldr	r2, [r4, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d03a      	beq.n	80047c0 <_scanf_i+0x160>
 800474a:	6831      	ldr	r1, [r6, #0]
 800474c:	6960      	ldr	r0, [r4, #20]
 800474e:	f891 c000 	ldrb.w	ip, [r1]
 8004752:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004756:	2800      	cmp	r0, #0
 8004758:	d032      	beq.n	80047c0 <_scanf_i+0x160>
 800475a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800475e:	d121      	bne.n	80047a4 <_scanf_i+0x144>
 8004760:	0510      	lsls	r0, r2, #20
 8004762:	d51f      	bpl.n	80047a4 <_scanf_i+0x144>
 8004764:	f108 0801 	add.w	r8, r8, #1
 8004768:	b117      	cbz	r7, 8004770 <_scanf_i+0x110>
 800476a:	3301      	adds	r3, #1
 800476c:	3f01      	subs	r7, #1
 800476e:	60a3      	str	r3, [r4, #8]
 8004770:	6873      	ldr	r3, [r6, #4]
 8004772:	3b01      	subs	r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	6073      	str	r3, [r6, #4]
 8004778:	dd1b      	ble.n	80047b2 <_scanf_i+0x152>
 800477a:	6833      	ldr	r3, [r6, #0]
 800477c:	3301      	adds	r3, #1
 800477e:	6033      	str	r3, [r6, #0]
 8004780:	68a3      	ldr	r3, [r4, #8]
 8004782:	3b01      	subs	r3, #1
 8004784:	60a3      	str	r3, [r4, #8]
 8004786:	e7dc      	b.n	8004742 <_scanf_i+0xe2>
 8004788:	f1b8 0f02 	cmp.w	r8, #2
 800478c:	d1ad      	bne.n	80046ea <_scanf_i+0x8a>
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004794:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004798:	d1bf      	bne.n	800471a <_scanf_i+0xba>
 800479a:	2110      	movs	r1, #16
 800479c:	6061      	str	r1, [r4, #4]
 800479e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047a2:	e7a1      	b.n	80046e8 <_scanf_i+0x88>
 80047a4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80047a8:	6022      	str	r2, [r4, #0]
 80047aa:	780b      	ldrb	r3, [r1, #0]
 80047ac:	702b      	strb	r3, [r5, #0]
 80047ae:	3501      	adds	r5, #1
 80047b0:	e7de      	b.n	8004770 <_scanf_i+0x110>
 80047b2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80047b6:	4631      	mov	r1, r6
 80047b8:	4658      	mov	r0, fp
 80047ba:	4798      	blx	r3
 80047bc:	2800      	cmp	r0, #0
 80047be:	d0df      	beq.n	8004780 <_scanf_i+0x120>
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	05d9      	lsls	r1, r3, #23
 80047c4:	d50c      	bpl.n	80047e0 <_scanf_i+0x180>
 80047c6:	454d      	cmp	r5, r9
 80047c8:	d908      	bls.n	80047dc <_scanf_i+0x17c>
 80047ca:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80047ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047d2:	4632      	mov	r2, r6
 80047d4:	4658      	mov	r0, fp
 80047d6:	4798      	blx	r3
 80047d8:	1e6f      	subs	r7, r5, #1
 80047da:	463d      	mov	r5, r7
 80047dc:	454d      	cmp	r5, r9
 80047de:	d029      	beq.n	8004834 <_scanf_i+0x1d4>
 80047e0:	6822      	ldr	r2, [r4, #0]
 80047e2:	f012 0210 	ands.w	r2, r2, #16
 80047e6:	d113      	bne.n	8004810 <_scanf_i+0x1b0>
 80047e8:	702a      	strb	r2, [r5, #0]
 80047ea:	6863      	ldr	r3, [r4, #4]
 80047ec:	9e00      	ldr	r6, [sp, #0]
 80047ee:	4649      	mov	r1, r9
 80047f0:	4658      	mov	r0, fp
 80047f2:	47b0      	blx	r6
 80047f4:	f8da 3000 	ldr.w	r3, [sl]
 80047f8:	6821      	ldr	r1, [r4, #0]
 80047fa:	1d1a      	adds	r2, r3, #4
 80047fc:	f8ca 2000 	str.w	r2, [sl]
 8004800:	f011 0f20 	tst.w	r1, #32
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	d010      	beq.n	800482a <_scanf_i+0x1ca>
 8004808:	6018      	str	r0, [r3, #0]
 800480a:	68e3      	ldr	r3, [r4, #12]
 800480c:	3301      	adds	r3, #1
 800480e:	60e3      	str	r3, [r4, #12]
 8004810:	eba5 0509 	sub.w	r5, r5, r9
 8004814:	44a8      	add	r8, r5
 8004816:	6925      	ldr	r5, [r4, #16]
 8004818:	4445      	add	r5, r8
 800481a:	6125      	str	r5, [r4, #16]
 800481c:	2000      	movs	r0, #0
 800481e:	b007      	add	sp, #28
 8004820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004824:	f04f 0800 	mov.w	r8, #0
 8004828:	e7ca      	b.n	80047c0 <_scanf_i+0x160>
 800482a:	07ca      	lsls	r2, r1, #31
 800482c:	bf4c      	ite	mi
 800482e:	8018      	strhmi	r0, [r3, #0]
 8004830:	6018      	strpl	r0, [r3, #0]
 8004832:	e7ea      	b.n	800480a <_scanf_i+0x1aa>
 8004834:	2001      	movs	r0, #1
 8004836:	e7f2      	b.n	800481e <_scanf_i+0x1be>
 8004838:	08004dd4 	.word	0x08004dd4
 800483c:	08004a71 	.word	0x08004a71
 8004840:	08004b89 	.word	0x08004b89
 8004844:	08005020 	.word	0x08005020

08004848 <_read_r>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	4c07      	ldr	r4, [pc, #28]	; (8004868 <_read_r+0x20>)
 800484c:	4605      	mov	r5, r0
 800484e:	4608      	mov	r0, r1
 8004850:	4611      	mov	r1, r2
 8004852:	2200      	movs	r2, #0
 8004854:	6022      	str	r2, [r4, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	f7fe fb2c 	bl	8002eb4 <_read>
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	d102      	bne.n	8004866 <_read_r+0x1e>
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	b103      	cbz	r3, 8004866 <_read_r+0x1e>
 8004864:	602b      	str	r3, [r5, #0]
 8004866:	bd38      	pop	{r3, r4, r5, pc}
 8004868:	20000b24 	.word	0x20000b24

0800486c <_sbrk_r>:
 800486c:	b538      	push	{r3, r4, r5, lr}
 800486e:	4c06      	ldr	r4, [pc, #24]	; (8004888 <_sbrk_r+0x1c>)
 8004870:	2300      	movs	r3, #0
 8004872:	4605      	mov	r5, r0
 8004874:	4608      	mov	r0, r1
 8004876:	6023      	str	r3, [r4, #0]
 8004878:	f7fe fb6e 	bl	8002f58 <_sbrk>
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	d102      	bne.n	8004886 <_sbrk_r+0x1a>
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	b103      	cbz	r3, 8004886 <_sbrk_r+0x1a>
 8004884:	602b      	str	r3, [r5, #0]
 8004886:	bd38      	pop	{r3, r4, r5, pc}
 8004888:	20000b24 	.word	0x20000b24

0800488c <__sccl>:
 800488c:	b570      	push	{r4, r5, r6, lr}
 800488e:	780b      	ldrb	r3, [r1, #0]
 8004890:	2b5e      	cmp	r3, #94	; 0x5e
 8004892:	bf13      	iteet	ne
 8004894:	1c4a      	addne	r2, r1, #1
 8004896:	1c8a      	addeq	r2, r1, #2
 8004898:	784b      	ldrbeq	r3, [r1, #1]
 800489a:	2100      	movne	r1, #0
 800489c:	bf08      	it	eq
 800489e:	2101      	moveq	r1, #1
 80048a0:	1e44      	subs	r4, r0, #1
 80048a2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80048a6:	f804 1f01 	strb.w	r1, [r4, #1]!
 80048aa:	42ac      	cmp	r4, r5
 80048ac:	d1fb      	bne.n	80048a6 <__sccl+0x1a>
 80048ae:	b913      	cbnz	r3, 80048b6 <__sccl+0x2a>
 80048b0:	3a01      	subs	r2, #1
 80048b2:	4610      	mov	r0, r2
 80048b4:	bd70      	pop	{r4, r5, r6, pc}
 80048b6:	f081 0401 	eor.w	r4, r1, #1
 80048ba:	54c4      	strb	r4, [r0, r3]
 80048bc:	1c51      	adds	r1, r2, #1
 80048be:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80048c2:	2d2d      	cmp	r5, #45	; 0x2d
 80048c4:	f101 36ff 	add.w	r6, r1, #4294967295
 80048c8:	460a      	mov	r2, r1
 80048ca:	d006      	beq.n	80048da <__sccl+0x4e>
 80048cc:	2d5d      	cmp	r5, #93	; 0x5d
 80048ce:	d0f0      	beq.n	80048b2 <__sccl+0x26>
 80048d0:	b90d      	cbnz	r5, 80048d6 <__sccl+0x4a>
 80048d2:	4632      	mov	r2, r6
 80048d4:	e7ed      	b.n	80048b2 <__sccl+0x26>
 80048d6:	462b      	mov	r3, r5
 80048d8:	e7ef      	b.n	80048ba <__sccl+0x2e>
 80048da:	780e      	ldrb	r6, [r1, #0]
 80048dc:	2e5d      	cmp	r6, #93	; 0x5d
 80048de:	d0fa      	beq.n	80048d6 <__sccl+0x4a>
 80048e0:	42b3      	cmp	r3, r6
 80048e2:	dcf8      	bgt.n	80048d6 <__sccl+0x4a>
 80048e4:	3301      	adds	r3, #1
 80048e6:	429e      	cmp	r6, r3
 80048e8:	54c4      	strb	r4, [r0, r3]
 80048ea:	dcfb      	bgt.n	80048e4 <__sccl+0x58>
 80048ec:	3102      	adds	r1, #2
 80048ee:	e7e6      	b.n	80048be <__sccl+0x32>

080048f0 <_raise_r>:
 80048f0:	291f      	cmp	r1, #31
 80048f2:	b538      	push	{r3, r4, r5, lr}
 80048f4:	4604      	mov	r4, r0
 80048f6:	460d      	mov	r5, r1
 80048f8:	d904      	bls.n	8004904 <_raise_r+0x14>
 80048fa:	2316      	movs	r3, #22
 80048fc:	6003      	str	r3, [r0, #0]
 80048fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004902:	bd38      	pop	{r3, r4, r5, pc}
 8004904:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004906:	b112      	cbz	r2, 800490e <_raise_r+0x1e>
 8004908:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800490c:	b94b      	cbnz	r3, 8004922 <_raise_r+0x32>
 800490e:	4620      	mov	r0, r4
 8004910:	f000 f830 	bl	8004974 <_getpid_r>
 8004914:	462a      	mov	r2, r5
 8004916:	4601      	mov	r1, r0
 8004918:	4620      	mov	r0, r4
 800491a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800491e:	f000 b817 	b.w	8004950 <_kill_r>
 8004922:	2b01      	cmp	r3, #1
 8004924:	d00a      	beq.n	800493c <_raise_r+0x4c>
 8004926:	1c59      	adds	r1, r3, #1
 8004928:	d103      	bne.n	8004932 <_raise_r+0x42>
 800492a:	2316      	movs	r3, #22
 800492c:	6003      	str	r3, [r0, #0]
 800492e:	2001      	movs	r0, #1
 8004930:	e7e7      	b.n	8004902 <_raise_r+0x12>
 8004932:	2400      	movs	r4, #0
 8004934:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004938:	4628      	mov	r0, r5
 800493a:	4798      	blx	r3
 800493c:	2000      	movs	r0, #0
 800493e:	e7e0      	b.n	8004902 <_raise_r+0x12>

08004940 <raise>:
 8004940:	4b02      	ldr	r3, [pc, #8]	; (800494c <raise+0xc>)
 8004942:	4601      	mov	r1, r0
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	f7ff bfd3 	b.w	80048f0 <_raise_r>
 800494a:	bf00      	nop
 800494c:	20000050 	.word	0x20000050

08004950 <_kill_r>:
 8004950:	b538      	push	{r3, r4, r5, lr}
 8004952:	4c07      	ldr	r4, [pc, #28]	; (8004970 <_kill_r+0x20>)
 8004954:	2300      	movs	r3, #0
 8004956:	4605      	mov	r5, r0
 8004958:	4608      	mov	r0, r1
 800495a:	4611      	mov	r1, r2
 800495c:	6023      	str	r3, [r4, #0]
 800495e:	f7fe fa8f 	bl	8002e80 <_kill>
 8004962:	1c43      	adds	r3, r0, #1
 8004964:	d102      	bne.n	800496c <_kill_r+0x1c>
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	b103      	cbz	r3, 800496c <_kill_r+0x1c>
 800496a:	602b      	str	r3, [r5, #0]
 800496c:	bd38      	pop	{r3, r4, r5, pc}
 800496e:	bf00      	nop
 8004970:	20000b24 	.word	0x20000b24

08004974 <_getpid_r>:
 8004974:	f7fe ba7c 	b.w	8002e70 <_getpid>

08004978 <_strtol_l.isra.0>:
 8004978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800497c:	4680      	mov	r8, r0
 800497e:	4689      	mov	r9, r1
 8004980:	4692      	mov	sl, r2
 8004982:	461e      	mov	r6, r3
 8004984:	460f      	mov	r7, r1
 8004986:	463d      	mov	r5, r7
 8004988:	9808      	ldr	r0, [sp, #32]
 800498a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800498e:	f7fe fba9 	bl	80030e4 <__locale_ctype_ptr_l>
 8004992:	4420      	add	r0, r4
 8004994:	7843      	ldrb	r3, [r0, #1]
 8004996:	f013 0308 	ands.w	r3, r3, #8
 800499a:	d132      	bne.n	8004a02 <_strtol_l.isra.0+0x8a>
 800499c:	2c2d      	cmp	r4, #45	; 0x2d
 800499e:	d132      	bne.n	8004a06 <_strtol_l.isra.0+0x8e>
 80049a0:	787c      	ldrb	r4, [r7, #1]
 80049a2:	1cbd      	adds	r5, r7, #2
 80049a4:	2201      	movs	r2, #1
 80049a6:	2e00      	cmp	r6, #0
 80049a8:	d05d      	beq.n	8004a66 <_strtol_l.isra.0+0xee>
 80049aa:	2e10      	cmp	r6, #16
 80049ac:	d109      	bne.n	80049c2 <_strtol_l.isra.0+0x4a>
 80049ae:	2c30      	cmp	r4, #48	; 0x30
 80049b0:	d107      	bne.n	80049c2 <_strtol_l.isra.0+0x4a>
 80049b2:	782b      	ldrb	r3, [r5, #0]
 80049b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80049b8:	2b58      	cmp	r3, #88	; 0x58
 80049ba:	d14f      	bne.n	8004a5c <_strtol_l.isra.0+0xe4>
 80049bc:	786c      	ldrb	r4, [r5, #1]
 80049be:	2610      	movs	r6, #16
 80049c0:	3502      	adds	r5, #2
 80049c2:	2a00      	cmp	r2, #0
 80049c4:	bf14      	ite	ne
 80049c6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80049ca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80049ce:	2700      	movs	r7, #0
 80049d0:	fbb1 fcf6 	udiv	ip, r1, r6
 80049d4:	4638      	mov	r0, r7
 80049d6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80049da:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80049de:	2b09      	cmp	r3, #9
 80049e0:	d817      	bhi.n	8004a12 <_strtol_l.isra.0+0x9a>
 80049e2:	461c      	mov	r4, r3
 80049e4:	42a6      	cmp	r6, r4
 80049e6:	dd23      	ble.n	8004a30 <_strtol_l.isra.0+0xb8>
 80049e8:	1c7b      	adds	r3, r7, #1
 80049ea:	d007      	beq.n	80049fc <_strtol_l.isra.0+0x84>
 80049ec:	4584      	cmp	ip, r0
 80049ee:	d31c      	bcc.n	8004a2a <_strtol_l.isra.0+0xb2>
 80049f0:	d101      	bne.n	80049f6 <_strtol_l.isra.0+0x7e>
 80049f2:	45a6      	cmp	lr, r4
 80049f4:	db19      	blt.n	8004a2a <_strtol_l.isra.0+0xb2>
 80049f6:	fb00 4006 	mla	r0, r0, r6, r4
 80049fa:	2701      	movs	r7, #1
 80049fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a00:	e7eb      	b.n	80049da <_strtol_l.isra.0+0x62>
 8004a02:	462f      	mov	r7, r5
 8004a04:	e7bf      	b.n	8004986 <_strtol_l.isra.0+0xe>
 8004a06:	2c2b      	cmp	r4, #43	; 0x2b
 8004a08:	bf04      	itt	eq
 8004a0a:	1cbd      	addeq	r5, r7, #2
 8004a0c:	787c      	ldrbeq	r4, [r7, #1]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	e7c9      	b.n	80049a6 <_strtol_l.isra.0+0x2e>
 8004a12:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004a16:	2b19      	cmp	r3, #25
 8004a18:	d801      	bhi.n	8004a1e <_strtol_l.isra.0+0xa6>
 8004a1a:	3c37      	subs	r4, #55	; 0x37
 8004a1c:	e7e2      	b.n	80049e4 <_strtol_l.isra.0+0x6c>
 8004a1e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004a22:	2b19      	cmp	r3, #25
 8004a24:	d804      	bhi.n	8004a30 <_strtol_l.isra.0+0xb8>
 8004a26:	3c57      	subs	r4, #87	; 0x57
 8004a28:	e7dc      	b.n	80049e4 <_strtol_l.isra.0+0x6c>
 8004a2a:	f04f 37ff 	mov.w	r7, #4294967295
 8004a2e:	e7e5      	b.n	80049fc <_strtol_l.isra.0+0x84>
 8004a30:	1c7b      	adds	r3, r7, #1
 8004a32:	d108      	bne.n	8004a46 <_strtol_l.isra.0+0xce>
 8004a34:	2322      	movs	r3, #34	; 0x22
 8004a36:	f8c8 3000 	str.w	r3, [r8]
 8004a3a:	4608      	mov	r0, r1
 8004a3c:	f1ba 0f00 	cmp.w	sl, #0
 8004a40:	d107      	bne.n	8004a52 <_strtol_l.isra.0+0xda>
 8004a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a46:	b102      	cbz	r2, 8004a4a <_strtol_l.isra.0+0xd2>
 8004a48:	4240      	negs	r0, r0
 8004a4a:	f1ba 0f00 	cmp.w	sl, #0
 8004a4e:	d0f8      	beq.n	8004a42 <_strtol_l.isra.0+0xca>
 8004a50:	b10f      	cbz	r7, 8004a56 <_strtol_l.isra.0+0xde>
 8004a52:	f105 39ff 	add.w	r9, r5, #4294967295
 8004a56:	f8ca 9000 	str.w	r9, [sl]
 8004a5a:	e7f2      	b.n	8004a42 <_strtol_l.isra.0+0xca>
 8004a5c:	2430      	movs	r4, #48	; 0x30
 8004a5e:	2e00      	cmp	r6, #0
 8004a60:	d1af      	bne.n	80049c2 <_strtol_l.isra.0+0x4a>
 8004a62:	2608      	movs	r6, #8
 8004a64:	e7ad      	b.n	80049c2 <_strtol_l.isra.0+0x4a>
 8004a66:	2c30      	cmp	r4, #48	; 0x30
 8004a68:	d0a3      	beq.n	80049b2 <_strtol_l.isra.0+0x3a>
 8004a6a:	260a      	movs	r6, #10
 8004a6c:	e7a9      	b.n	80049c2 <_strtol_l.isra.0+0x4a>
	...

08004a70 <_strtol_r>:
 8004a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a72:	4c06      	ldr	r4, [pc, #24]	; (8004a8c <_strtol_r+0x1c>)
 8004a74:	4d06      	ldr	r5, [pc, #24]	; (8004a90 <_strtol_r+0x20>)
 8004a76:	6824      	ldr	r4, [r4, #0]
 8004a78:	6a24      	ldr	r4, [r4, #32]
 8004a7a:	2c00      	cmp	r4, #0
 8004a7c:	bf08      	it	eq
 8004a7e:	462c      	moveq	r4, r5
 8004a80:	9400      	str	r4, [sp, #0]
 8004a82:	f7ff ff79 	bl	8004978 <_strtol_l.isra.0>
 8004a86:	b003      	add	sp, #12
 8004a88:	bd30      	pop	{r4, r5, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000050 	.word	0x20000050
 8004a90:	200000b4 	.word	0x200000b4

08004a94 <_strtoul_l.isra.0>:
 8004a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a98:	4680      	mov	r8, r0
 8004a9a:	4689      	mov	r9, r1
 8004a9c:	4692      	mov	sl, r2
 8004a9e:	461e      	mov	r6, r3
 8004aa0:	460f      	mov	r7, r1
 8004aa2:	463d      	mov	r5, r7
 8004aa4:	9808      	ldr	r0, [sp, #32]
 8004aa6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004aaa:	f7fe fb1b 	bl	80030e4 <__locale_ctype_ptr_l>
 8004aae:	4420      	add	r0, r4
 8004ab0:	7843      	ldrb	r3, [r0, #1]
 8004ab2:	f013 0308 	ands.w	r3, r3, #8
 8004ab6:	d130      	bne.n	8004b1a <_strtoul_l.isra.0+0x86>
 8004ab8:	2c2d      	cmp	r4, #45	; 0x2d
 8004aba:	d130      	bne.n	8004b1e <_strtoul_l.isra.0+0x8a>
 8004abc:	787c      	ldrb	r4, [r7, #1]
 8004abe:	1cbd      	adds	r5, r7, #2
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	2e00      	cmp	r6, #0
 8004ac4:	d05c      	beq.n	8004b80 <_strtoul_l.isra.0+0xec>
 8004ac6:	2e10      	cmp	r6, #16
 8004ac8:	d109      	bne.n	8004ade <_strtoul_l.isra.0+0x4a>
 8004aca:	2c30      	cmp	r4, #48	; 0x30
 8004acc:	d107      	bne.n	8004ade <_strtoul_l.isra.0+0x4a>
 8004ace:	782b      	ldrb	r3, [r5, #0]
 8004ad0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004ad4:	2b58      	cmp	r3, #88	; 0x58
 8004ad6:	d14e      	bne.n	8004b76 <_strtoul_l.isra.0+0xe2>
 8004ad8:	786c      	ldrb	r4, [r5, #1]
 8004ada:	2610      	movs	r6, #16
 8004adc:	3502      	adds	r5, #2
 8004ade:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	fbb2 f2f6 	udiv	r2, r2, r6
 8004ae8:	fb06 fc02 	mul.w	ip, r6, r2
 8004aec:	ea6f 0c0c 	mvn.w	ip, ip
 8004af0:	4618      	mov	r0, r3
 8004af2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004af6:	2f09      	cmp	r7, #9
 8004af8:	d817      	bhi.n	8004b2a <_strtoul_l.isra.0+0x96>
 8004afa:	463c      	mov	r4, r7
 8004afc:	42a6      	cmp	r6, r4
 8004afe:	dd23      	ble.n	8004b48 <_strtoul_l.isra.0+0xb4>
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	db1e      	blt.n	8004b42 <_strtoul_l.isra.0+0xae>
 8004b04:	4282      	cmp	r2, r0
 8004b06:	d31c      	bcc.n	8004b42 <_strtoul_l.isra.0+0xae>
 8004b08:	d101      	bne.n	8004b0e <_strtoul_l.isra.0+0x7a>
 8004b0a:	45a4      	cmp	ip, r4
 8004b0c:	db19      	blt.n	8004b42 <_strtoul_l.isra.0+0xae>
 8004b0e:	fb00 4006 	mla	r0, r0, r6, r4
 8004b12:	2301      	movs	r3, #1
 8004b14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b18:	e7eb      	b.n	8004af2 <_strtoul_l.isra.0+0x5e>
 8004b1a:	462f      	mov	r7, r5
 8004b1c:	e7c1      	b.n	8004aa2 <_strtoul_l.isra.0+0xe>
 8004b1e:	2c2b      	cmp	r4, #43	; 0x2b
 8004b20:	bf04      	itt	eq
 8004b22:	1cbd      	addeq	r5, r7, #2
 8004b24:	787c      	ldrbeq	r4, [r7, #1]
 8004b26:	4619      	mov	r1, r3
 8004b28:	e7cb      	b.n	8004ac2 <_strtoul_l.isra.0+0x2e>
 8004b2a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004b2e:	2f19      	cmp	r7, #25
 8004b30:	d801      	bhi.n	8004b36 <_strtoul_l.isra.0+0xa2>
 8004b32:	3c37      	subs	r4, #55	; 0x37
 8004b34:	e7e2      	b.n	8004afc <_strtoul_l.isra.0+0x68>
 8004b36:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004b3a:	2f19      	cmp	r7, #25
 8004b3c:	d804      	bhi.n	8004b48 <_strtoul_l.isra.0+0xb4>
 8004b3e:	3c57      	subs	r4, #87	; 0x57
 8004b40:	e7dc      	b.n	8004afc <_strtoul_l.isra.0+0x68>
 8004b42:	f04f 33ff 	mov.w	r3, #4294967295
 8004b46:	e7e5      	b.n	8004b14 <_strtoul_l.isra.0+0x80>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	da09      	bge.n	8004b60 <_strtoul_l.isra.0+0xcc>
 8004b4c:	2322      	movs	r3, #34	; 0x22
 8004b4e:	f8c8 3000 	str.w	r3, [r8]
 8004b52:	f04f 30ff 	mov.w	r0, #4294967295
 8004b56:	f1ba 0f00 	cmp.w	sl, #0
 8004b5a:	d107      	bne.n	8004b6c <_strtoul_l.isra.0+0xd8>
 8004b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b60:	b101      	cbz	r1, 8004b64 <_strtoul_l.isra.0+0xd0>
 8004b62:	4240      	negs	r0, r0
 8004b64:	f1ba 0f00 	cmp.w	sl, #0
 8004b68:	d0f8      	beq.n	8004b5c <_strtoul_l.isra.0+0xc8>
 8004b6a:	b10b      	cbz	r3, 8004b70 <_strtoul_l.isra.0+0xdc>
 8004b6c:	f105 39ff 	add.w	r9, r5, #4294967295
 8004b70:	f8ca 9000 	str.w	r9, [sl]
 8004b74:	e7f2      	b.n	8004b5c <_strtoul_l.isra.0+0xc8>
 8004b76:	2430      	movs	r4, #48	; 0x30
 8004b78:	2e00      	cmp	r6, #0
 8004b7a:	d1b0      	bne.n	8004ade <_strtoul_l.isra.0+0x4a>
 8004b7c:	2608      	movs	r6, #8
 8004b7e:	e7ae      	b.n	8004ade <_strtoul_l.isra.0+0x4a>
 8004b80:	2c30      	cmp	r4, #48	; 0x30
 8004b82:	d0a4      	beq.n	8004ace <_strtoul_l.isra.0+0x3a>
 8004b84:	260a      	movs	r6, #10
 8004b86:	e7aa      	b.n	8004ade <_strtoul_l.isra.0+0x4a>

08004b88 <_strtoul_r>:
 8004b88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b8a:	4c06      	ldr	r4, [pc, #24]	; (8004ba4 <_strtoul_r+0x1c>)
 8004b8c:	4d06      	ldr	r5, [pc, #24]	; (8004ba8 <_strtoul_r+0x20>)
 8004b8e:	6824      	ldr	r4, [r4, #0]
 8004b90:	6a24      	ldr	r4, [r4, #32]
 8004b92:	2c00      	cmp	r4, #0
 8004b94:	bf08      	it	eq
 8004b96:	462c      	moveq	r4, r5
 8004b98:	9400      	str	r4, [sp, #0]
 8004b9a:	f7ff ff7b 	bl	8004a94 <_strtoul_l.isra.0>
 8004b9e:	b003      	add	sp, #12
 8004ba0:	bd30      	pop	{r4, r5, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000050 	.word	0x20000050
 8004ba8:	200000b4 	.word	0x200000b4

08004bac <__submore>:
 8004bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb0:	460c      	mov	r4, r1
 8004bb2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004bb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bb8:	4299      	cmp	r1, r3
 8004bba:	d11d      	bne.n	8004bf8 <__submore+0x4c>
 8004bbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004bc0:	f7ff f96e 	bl	8003ea0 <_malloc_r>
 8004bc4:	b918      	cbnz	r0, 8004bce <__submore+0x22>
 8004bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bd2:	63a3      	str	r3, [r4, #56]	; 0x38
 8004bd4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004bd8:	6360      	str	r0, [r4, #52]	; 0x34
 8004bda:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004bde:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004be2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004be6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004bea:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004bee:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004bf2:	6020      	str	r0, [r4, #0]
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	e7e8      	b.n	8004bca <__submore+0x1e>
 8004bf8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004bfa:	0077      	lsls	r7, r6, #1
 8004bfc:	463a      	mov	r2, r7
 8004bfe:	f7ff f9a9 	bl	8003f54 <_realloc_r>
 8004c02:	4605      	mov	r5, r0
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d0de      	beq.n	8004bc6 <__submore+0x1a>
 8004c08:	eb00 0806 	add.w	r8, r0, r6
 8004c0c:	4601      	mov	r1, r0
 8004c0e:	4632      	mov	r2, r6
 8004c10:	4640      	mov	r0, r8
 8004c12:	f7ff f8d3 	bl	8003dbc <memcpy>
 8004c16:	f8c4 8000 	str.w	r8, [r4]
 8004c1a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004c1e:	e7e9      	b.n	8004bf4 <__submore+0x48>

08004c20 <_fstat_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	4c07      	ldr	r4, [pc, #28]	; (8004c40 <_fstat_r+0x20>)
 8004c24:	2300      	movs	r3, #0
 8004c26:	4605      	mov	r5, r0
 8004c28:	4608      	mov	r0, r1
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	6023      	str	r3, [r4, #0]
 8004c2e:	f7fe f96a 	bl	8002f06 <_fstat>
 8004c32:	1c43      	adds	r3, r0, #1
 8004c34:	d102      	bne.n	8004c3c <_fstat_r+0x1c>
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	b103      	cbz	r3, 8004c3c <_fstat_r+0x1c>
 8004c3a:	602b      	str	r3, [r5, #0]
 8004c3c:	bd38      	pop	{r3, r4, r5, pc}
 8004c3e:	bf00      	nop
 8004c40:	20000b24 	.word	0x20000b24

08004c44 <_isatty_r>:
 8004c44:	b538      	push	{r3, r4, r5, lr}
 8004c46:	4c06      	ldr	r4, [pc, #24]	; (8004c60 <_isatty_r+0x1c>)
 8004c48:	2300      	movs	r3, #0
 8004c4a:	4605      	mov	r5, r0
 8004c4c:	4608      	mov	r0, r1
 8004c4e:	6023      	str	r3, [r4, #0]
 8004c50:	f7fe f969 	bl	8002f26 <_isatty>
 8004c54:	1c43      	adds	r3, r0, #1
 8004c56:	d102      	bne.n	8004c5e <_isatty_r+0x1a>
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	b103      	cbz	r3, 8004c5e <_isatty_r+0x1a>
 8004c5c:	602b      	str	r3, [r5, #0]
 8004c5e:	bd38      	pop	{r3, r4, r5, pc}
 8004c60:	20000b24 	.word	0x20000b24

08004c64 <__malloc_lock>:
 8004c64:	4770      	bx	lr

08004c66 <__malloc_unlock>:
 8004c66:	4770      	bx	lr

08004c68 <_malloc_usable_size_r>:
 8004c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c6c:	1f18      	subs	r0, r3, #4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bfbc      	itt	lt
 8004c72:	580b      	ldrlt	r3, [r1, r0]
 8004c74:	18c0      	addlt	r0, r0, r3
 8004c76:	4770      	bx	lr

08004c78 <_init>:
 8004c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7a:	bf00      	nop
 8004c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7e:	bc08      	pop	{r3}
 8004c80:	469e      	mov	lr, r3
 8004c82:	4770      	bx	lr

08004c84 <_fini>:
 8004c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c86:	bf00      	nop
 8004c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8a:	bc08      	pop	{r3}
 8004c8c:	469e      	mov	lr, r3
 8004c8e:	4770      	bx	lr
